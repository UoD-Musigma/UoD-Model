create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_INITIATE
(
	V_START_DATE IN DATE,
   V_END_DATE IN DATE
)
AS

v_c1 int;
v_sql_cmd varchar2(10000);

BEGIN

	V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.model_timestamp';  EXECUTE IMMEDIATE V_SQL_CMD;
	
	INSERT INTO idssc_hist_read_uod.model_timestamp
	VALUES (SYSTIMESTAMP);

	V_SQL_CMD := 'truncate table idssc_hist_read_uod.uod_recommendation_rank';  EXECUTE IMMEDIATE V_SQL_CMD;

-- qc OF RAW TABLES

--qc FOR INVENTORY MODEL
select count(distinct product_id) INTO V_C1 from idssc_hist.hist_inventory_models 
where product_id in (select distinct PRODUCT_ID from idssc_hist.hist_weekly_forecast);

               
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.qc_RAW_TABLES
VALUES(''HIST_INVENTORY_MODELS'',''MODEL PRESENT FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;
COMMIT WORK;

select count(distinct product_id) INTO V_C1 from idssc_hist.hist_inventory_models 
where product_id in (select distinct PRODUCT_ID from idssc_hist.hist_weekly_forecast)
and model_id not like 'DOS%'
and model_id not like 'WOS%'
and model_id not like 'COM%'
and model_id not like 'MULT%';


V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.qc_RAW_TABLES
VALUES(''HIST_INVENTORY_MODELS'',''UNKNOWN INVENTORY MODEL OBSERVED FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;
COMMIT WORK;
               

               --qc FOR NETWORK-SCHEDULE
               
select count(distinct upc) into v_c1 from idssc_hist.hist_network_schedule 
where upc in (select distinct PRODUCT_ID from idssc_hist.hist_weekly_forecast);


V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.qc_RAW_TABLES
VALUES(''HIST_NETWORK_SCHEDULE'',''DATA PRESENT FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;
COMMIT WORK;
               
--qc FOR DOW PROFILES              
               
select count(distinct PRODUCT_ID) into v_c1 from idssc_hist.hist_DOW_PROFILES 
where PRODUCT_ID in (select distinct PRODUCT_ID from idssc_hist.hist_weekly_forecast);


V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.qc_RAW_TABLES
VALUES(''HIST_DOW_PROFILES'',''DATA PRESENT FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;
COMMIT WORK;

select count(distinct PRODUCT_ID) into v_c1 from idssc_hist.hist_DOW_PROFILES 
where PRODUCT_ID in (select distinct PRODUCT_ID from idssc_hist.hist_weekly_forecast)
AND (DOW_SUN+DOW_MON+ DOW_TUE+DOW_WED+DOW_THU+DOW_FRI+DOW_SAT) NOT BETWEEN 0.99 AND 1.01;

               
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.qc_RAW_TABLES
VALUES(''HIST_DOW_PROFILES'',''SUM OF DOW NOT 1 FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;
COMMIT WORK;              

select count(distinct PRODUCT_ID) into v_c1 from idssc_hist.hist_DOW_PROFILES
where PRODUCT_ID in (select distinct PRODUCT_ID from idssc_hist.hist_weekly_forecast)
AND (DOW_SUN <0 OR
   DOW_MON<0 OR
   DOW_TUE<0 OR
   DOW_WED<0 OR
   DOW_THU<0 OR
   DOW_FRI<0 OR
   DOW_SAT<0);
	

V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.qc_RAW_TABLES
VALUES(''HIST_DOW_PROFILES'',''NEGATIVE DOW ON ONE OR MORE DAY FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;
COMMIT WORK;

--LIFE

select count(distinct UPC) into v_c1 from idssc_hist.hist_PROD_LIFE 
where UPC in (select distinct PRODUCT_ID from idssc_hist.hist_weekly_forecast);


V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.qc_RAW_TABLES
VALUES(''HIST_PROD_LIFE'',''LIFE DATA PRESENT FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;
COMMIT WORK;


select count(distinct UPC) into v_c1 from idssc_hist.HIST_PROD_LIFE 
where UPC in (select distinct PRODUCT_ID from idssc_hist.hist_weekly_forecast)
AND (day_0_life <0 OR
    day_1_life<0 OR
    day_2_life<0 OR
    day_3_life<0 OR
    day_4_life<0 OR
    day_5_life<0 OR
    day_6_life<0 OR 
    (day_0_life+day_1_life+ day_2_life+day_3_life+day_4_life+day_5_life+day_6_life) IS NULL);
	 
	 
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.qc_RAW_TABLES
VALUES(''HIST_PROD_LIFE'',''LIFE IS NEGATIVE OR NULL ON ONE OR MORE DAY FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;
COMMIT WORK;
               
--location schedule

select count(distinct site) into v_c1 from idssc_hist.hist_site 
where site in (select distinct substr(LOCATION_ID,2,8) from idssc_hist.hist_weekly_forecast);

V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.qc_RAW_TABLES
VALUES(''HIST_SITE'',''DELIVERY STATUS PRESENT FOR ' || V_C1 || ' STORES'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;
COMMIT WORK;
--

 --ranking the extract date for selecting latest data
      V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.uod_TI_MODEL_1';  EXECUTE IMMEDIATE V_SQL_CMD;
       INSERT INTO idssc_hist_read_uod.uod_TI_MODEL_1
         ( SELECT /*+PARALLEL(6)*/ CAST(A.PRODUCT_ID AS INT),
                        A.LOCATION_ID,
                        TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR'),
                        A.MODEL_ID,
                        TO_DATE(A.ON_RANGE_DT,'DD-MON-RRRR'),
                        TO_DATE(A.OFF_RANGE_DT,'DD-MON-RRRR'),
                        RANK() OVER ( PARTITION BY CAST(A.PRODUCT_ID AS INT), A.LOCATION_ID ORDER BY TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR') DESC  ) 
              FROM IDSSC_HIST.hist_INVENTORY_MODELS A );
			  
    ----TRANSFORMATION OF NETWORK SCHEDULE DATA

        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.uod_NETWORK_SCHEDULE_1';  EXECUTE IMMEDIATE V_SQL_CMD;
       INSERT INTO idssc_hist_read_uod.uod_NETWORK_SCHEDULE_1
         ( SELECT /*+PARALLEL(6)*/ CAST(A.UPC AS INT) ,
                        A.DEST_LOCATION ,
                        TO_DATE(A.EFFECTIVE_BEGIN_DATE,'DD-MON-RRRR'),
                        A.ORDER_LEAD_TIME_01 ,
                        A.UNITS_PER_TRAY_01 ,
                        A.ORDER_LEAD_TIME_02 ,
                           A.UNITS_PER_TRAY_02 ,
                        A.ORDER_LEAD_TIME_03 ,
                           A.UNITS_PER_TRAY_03 ,
                       A.ORDER_LEAD_TIME_04 ,
                       A.UNITS_PER_TRAY_04,
                     A.ORDER_LEAD_TIME_05 ,
                       A.UNITS_PER_TRAY_05 ,
                     A.ORDER_LEAD_TIME_06 ,
                           A.UNITS_PER_TRAY_06 ,
                        A.ORDER_LEAD_TIME_07 ,
                       A.UNITS_PER_TRAY_07,
                        TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR'),
                          RANK() OVER ( PARTITION BY CAST(A.UPC AS INT) , A.DEST_LOCATION, TO_DATE(A.EFFECTIVE_BEGIN_DATE,'DD-MON-RRRR')
                          ORDER BY TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR') DESC  ) 
              FROM IDSSC_HIST.hist_NETWORK_SCHEDULE  A);
			  
--ranking the extract date for selecting latest data
               V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.uod_dow_1';  EXECUTE IMMEDIATE V_SQL_CMD;
       INSERT INTO idssc_hist_read_uod.uod_dow_1
         ( SELECT /*+PARALLEL(6)*/ CAST(A.PRODUCT_ID AS INT) ,
                        A.STG_ID,
                        TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR'),
                        A.DOW_SUN,
                        A.DOW_MON,
                        A.DOW_TUE,
                        A.DOW_WED,
                        A.DOW_THU,
                        A.DOW_FRI,
                        A.DOW_SAT,
                        RANK() OVER ( PARTITION BY CAST(A.PRODUCT_ID AS INT), A.STG_ID ORDER BY TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR') DESC  ) 
              FROM IDSSC_HIST.hist_DOW_PROFILES   A );
			  
			  
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.uod_life_max';  EXECUTE IMMEDIATE V_SQL_CMD;
INSERT into idssc_hist_read_uod.uod_life_max
      (select /*+PARALLEL(6)*/ CAST(A.UPC AS INT), 
      TO_DATE(A.week_begin_date,'DD-MON-RRRR'),
      max(A.day_0_life) ,
      max(A.day_1_life) ,
      max(A.day_2_life) ,
      max(A.day_3_life) ,
      max(A.day_4_life) ,
      max(A.day_5_life) ,
      max(A.day_6_life) ,
      A.ctry_code
      from IDSSC_HIST.hist_prod_life A
      group by A.upc,TO_DATE(A.week_begin_date,'DD-MON-RRRR'),A.ctry_code);
	  
	  
-------TRANSFORMATION OF STORE SCHEDULE DATA

       --INSERTING LOCATION SCHEDULE RAW DATA WITH LOCATION ID SUBSTRINGED TO REQUIRED FORMAT--
        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.uod_LOCATION_SCHEDULE_1';  EXECUTE IMMEDIATE V_SQL_CMD;
       INSERT INTO idssc_hist_read_uod.uod_LOCATION_SCHEDULE_1
         ( SELECT /*+PARALLEL(6)*/ CAST(A.SITE AS INT),
                        TO_DATE(A.OPENING_DATE,'DD-MON-RRRR') ,
                        A.DELIVERYSTATUS_SUN ,
                        A.DELIVERYSTATUS_MON ,
                        A.DELIVERYSTATUS_TUE ,
                        A.DELIVERYSTATUS_WED ,
                        A.DELIVERYSTATUS_THU ,
                        A.DELIVERYSTATUS_FRI ,
                        A.DELIVERYSTATUS_SAT ,
                        TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR'),
                         RANK() OVER ( PARTITION BY CAST(A.SITE AS INT), TO_DATE(A.OPENING_DATE,'DD-MON-RRRR') 
                         ORDER BY TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR') DESC  ) 
              FROM IDSSC_HIST.hist_SITE A WHERE length(A.SITE)=4 );


       --INSERTING STORE SCHEDULE RANKED ON BEGIN DATE--
        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.uod_LOCATION_SCHEDULE_2';  EXECUTE IMMEDIATE V_SQL_CMD;
       INSERT INTO idssc_hist_read_uod.uod_LOCATION_SCHEDULE_2
         SELECT /*+PARALLEL(6)*/ STORECODE ,
                     BEGIN_DATE ,
                     SUN ,
                     MON ,
                     TUE ,
                     WED ,
                     THU ,
                     FRI ,
                     SAT ,
                     RANK() OVER ( PARTITION BY STORECODE ORDER BY BEGIN_DATE ASC  ) 
              FROM idssc_hist_read_uod.uod_LOCATION_SCHEDULE_1 WHERE RANK_DT=1;

       --CALCULATING END DATE BY JOINING ON DATE RANK WITH PREVIOUS TEMPORARY TABLE--
        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3';  EXECUTE IMMEDIATE V_SQL_CMD;
       INSERT INTO idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3
         ( SELECT A.STORECODE	,
					A.BEGIN_DATE	,
					A.SUN	,
					A.MON	,
					A.TUE	,
					A.WED	,
					A.THU	,
					A.FRI	,
					A.SAT	,
					A.DATE_RANK	,
                        (B.BEGIN_DATE - 1)
              FROM idssc_hist_read_uod.uod_LOCATION_SCHEDULE_2 A
                        LEFT JOIN idssc_hist_read_uod.uod_LOCATION_SCHEDULE_2 B
                           ON A.STORECODE = B.STORECODE
                        AND A.DATE_RANK = (B.DATE_RANK - 1) );
						

       --SETTING END DATE AS DEFAULT VALUE FOR NULL RECORDS--
       UPDATE idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3
          SET END_DATE = v_end_date
          WHERE END_DATE IS NULL;
          

       --TRANSPOSING STORE SCHEDULE FROM UPC-STORE TO UPC-STORE-DAY LEVEL--
        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.uod_STORE_SCHEDULE_FINAL';  EXECUTE IMMEDIATE V_SQL_CMD;
       INSERT INTO idssc_hist_read_uod.uod_STORE_SCHEDULE_FINAL
         ( SELECT STORECODE ,
                        BEGIN_DATE ,
                        SUN ,
                        1 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3 
              UNION 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        MON ,
                        2 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        TUE ,
                        3 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        WED ,
                        4 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        THU ,
                        5 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        FRI ,
                        6 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        SAT ,
                        7 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3  );
       
			UPDATE idssc_hist_read_uod.uod_STORE_SCHEDULE_FINAL
          SET DAY_SCHEDULE = 1
          WHERE DAY_SCHEDULE>0;
                                  

--selecting latest store excess flag for a category-store

 V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.uod_xs_final';  EXECUTE IMMEDIATE V_SQL_CMD;
  INSERT into idssc_hist_read_uod.uod_xs_final
  (select category_code,
    site_code,
    xs_flag,
    rank() over (partition by category_code,site_code order by TO_DATE(start_date,'DD-MON-RRRR') desc)
    from IDSSC_HIST.hist_Store_xs);
      
      
   V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.uod_store_excess';  EXECUTE IMMEDIATE V_SQL_CMD;
  INSERT into idssc_hist_read_uod.uod_store_excess
  (select category_code,
          site_code,
          xs_flag
          from idssc_hist_read_uod.uod_xs_final where rank_dt=1);
      
          
V_SQL_CMD := 'truncate table idssc_hist_read_uod.uod_nde_rank';  EXECUTE IMMEDIATE V_SQL_CMD;
insert into idssc_hist_read_uod.uod_nde_rank(
select /*+PARALLEL(6)*/ A.product_id,
A.location_id,
TO_DATE(A.week_begin_dt,'DD-MON-RRRR'),
A.total_uplift,
rank() over (partition by A.product_id, A.location_id, TO_DATE(A.week_begin_dt,'DD-MON-RRRR') 
order by TO_DATE(A.extract_date,'DD-MON-RRRR') desc, TO_DATE(SUBSTR(A.interface_run_date_time,1,9),'DD-MON-RRRR') desc)
from IDSSC_HIST.hist_non_demand_events A where A.product_id in (select distinct product_id from IDSSC_HIST.hist_weekly_forecast) 
and TO_DATE(A.week_begin_dt,'DD-MON-RRRR') between v_start_date and v_end_date);

                
V_SQL_CMD := 'truncate table idssc_hist_read_uod.uod_nde';  EXECUTE IMMEDIATE V_SQL_CMD;
   insert into idssc_hist_read_uod.uod_nde
   (select /*+PARALLEL(6)*/ product_id,
   location_id,
   uplift_dt,
   total_uplift
   from idssc_hist_read_uod.uod_nde_rank where rank_dt=1);
	  
	
end;




create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_TRANSFORMATIONS
(
   V_END_DATE IN DATE,
   V_CATEGORY IN NVARCHAR2
)
AS

exc_inv exception;
exc_ntw_sched exception;
exc_dow exception;
exc_life exception;
v_c1 int;
V_c2 int;
v_sql_cmd varchar2(10000);

BEGIN
      
      V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_QC_INTER_TABLES'; EXECUTE IMMEDIATE V_SQL_CMD;


       --INSERTING RAW VALUES FROM INVENTORY MODEL DATASET INTO TABLE WHERE COMPONENTS OF TARGET INVENTORY MODELS ARE CALCULATED--
        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TI_MODEL'; EXECUTE IMMEDIATE V_SQL_CMD;
       V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TI_MODEL
         ( SELECT A.* ,
                        NULL ,
                        NULL ,
                        NULL ,NULL
              FROM idssc_hist_read_uod.uod_TI_MODEL_1 A WHERE A.RANK_DT=1 
                                                  and A.PRODUCT_ID IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:a))'; 
                                                  EXECUTE IMMEDIATE V_SQL_CMD using v_category;



       --UPDATING TABLE TO ADD COMPONENTS OF TARGET INVENTORY MODEL--     

       V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TI_MODEL
       SET MODEL = SUBSTR(MODEL_ID, 1, 3)'; EXECUTE IMMEDIATE V_SQL_CMD;

       V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TI_MODEL
          SET DAY_FULL = (CASE
                                                                                    WHEN MODEL= ''COM'' THEN CAST(SUBSTR(MODEL_ID, 7, 1) AS NUMBER(18))
                                                                                    WHEN MODEL= ''DOS'' THEN CAST(SUBSTR(MODEL_ID, 4, 1) AS NUMBER(18))
                                                                                    WHEN MODEL= ''WOS'' THEN CAST(FLOOR((CAST(SUBSTR(MODEL_ID, 4, 8) AS FLOAT(53))) * 7) AS NUMBER(18))
                 ELSE 0
                       END)'; EXECUTE IMMEDIATE V_SQL_CMD;
       V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TI_MODEL
          SET DAY_PART = (CASE
                                                                                    WHEN MODEL= ''COM'' THEN CAST(SUBSTR(MODEL_ID, 8, 2) AS FLOAT(53)) / 100
                                                                                    WHEN MODEL= ''DOS'' THEN CAST(SUBSTR(MODEL_ID, 5, 2) AS FLOAT(53)) / 100
                                                                                    WHEN MODEL= ''WOS'' THEN (CAST(SUBSTR(MODEL_ID, 4, 8) AS FLOAT(53)) * 7) - DAY_FULL
                 ELSE 0
                       END)'; EXECUTE IMMEDIATE V_SQL_CMD;
       V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TI_MODEL
          SET MULT = (CASE 
                                                                             WHEN MODEL= ''COM'' THEN CAST(SUBSTR(MODEL_ID, 4, 3) AS FLOAT(53)) / 100
                                                                             WHEN MODEL= ''MUL'' THEN CAST(SUBSTR(MODEL_ID, 5, 3) AS FLOAT(53)) / 100
                 ELSE 0
                       END)'; EXECUTE IMMEDIATE V_SQL_CMD;

       V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TI_MODEL
       SET MODEL = ''DOS''
       WHERE MODEL = ''WOS'''; EXECUTE IMMEDIATE V_SQL_CMD;

--QC for inventory model data

                V_SQL_CMD := 'SELECT COUNT(*) from (SELECT PRODUCT_ID,LOCATION_ID
                FROM idssc_hist_read_uod.' || v_category || '_uod_TI_MODEL GROUP BY PRODUCT_ID,LOCATION_ID HAVING COUNT(*)>1)'; EXECUTE IMMEDIATE V_SQL_CMD into v_c1;
    
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                values(''INVENTORY MODEL'',(case when (:a>0) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),systimestamp)'; 
                                                                EXECUTE IMMEDIATE V_SQL_CMD using v_c1;

commit;

begin
if (v_c1>0) then raise EXC_INV; end if;
end;
                   
                     
    

--INSERTING CLEANED ORDER LEAD TIME AND UPT INTO TEMPORARY NETWORK SCHEDULE TABLE--  
        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_NETWORK_SCHEDULE_2'; EXECUTE IMMEDIATE V_SQL_CMD;
       V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_NETWORK_SCHEDULE_2
         ( SELECT PRODUCT_ID ,
                        sink_id ,
                        EFFECTIVE_BEGIN_DT ,
                        MAX(sun) ,
                        MAX(SUN_UPT) ,
                        MAX(mon) ,
                        MAX(MON_UPT) ,
                        MAX(tue) ,
                        MAX(TUE_UPT) ,
                        MAX(wed) ,
                        MAX(WED_UPT) ,
                        MAX(thu) ,
                        MAX(THU_UPT) ,
                        MAX(fri) ,
                        MAX(FRI_UPT) ,
                        MAX(sat) ,
                        MAX(SAT_UPT)
              FROM idssc_hist_read_uod.uod_NETWORK_SCHEDULE_1 where rank_dt=1 and
      PRODUCT_ID IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:a)
                GROUP BY PRODUCT_ID,SINK_ID,EFFECTIVE_BEGIN_DT)'; EXECUTE IMMEDIATE V_SQL_CMD using v_category;

                 V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_NETWORK_SCHEDULE_2
                     set sink_id=concat(''MandS:W'',sink_id) where sink_id like ''B%'' or sink_id like ''D%'' or sink_id like ''S%'''; EXECUTE IMMEDIATE V_SQL_CMD;

                V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_NETWORK_SCHEDULE_2
                     set sink_id=concat(''S'',sink_id) where sink_id not like ''M%'''; EXECUTE IMMEDIATE V_SQL_CMD;

                    

       --INSERTING UPT AND DELIVERY FLAGS AND RANKING THE NETWORK SCHEDULE FOR A UPC BY EFFECTIVE BEGIN DATE--
        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_NETWORK_SCHEDULE_3'; EXECUTE IMMEDIATE V_SQL_CMD;
       V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_NETWORK_SCHEDULE_3
         SELECT PRODUCT_ID ,
                     SINK_ID ,
                     EFFECTIVE_BEGIN_DT ,
                     SUN ,
                     SUN_UPT ,
                     MON ,
                     MON_UPT ,
                     TUE ,
                     TUE_UPT ,
                     WED ,
                     WED_UPT ,
                     THU ,
                     THU_UPT ,
                     FRI ,
                     FRI_UPT ,
                     SAT ,
                     SAT_UPT ,
                     RANK() OVER ( PARTITION BY PRODUCT_ID, SINK_ID ORDER BY EFFECTIVE_BEGIN_DT ASC  ) 
              FROM idssc_hist_read_uod.' || v_category || '_uod_NETWORK_SCHEDULE_2 '; EXECUTE IMMEDIATE V_SQL_CMD;


       --CALCULATING EFFECTIVE BEGIN AND END DATE BY JOINING 2 TEMPORARY TABLES--
        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4'; EXECUTE IMMEDIATE V_SQL_CMD;
       V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4
         ( SELECT A.* ,
              (B.EFFECTIVE_BEGIN_DT - 1)
              FROM idssc_hist_read_uod.' || v_category || '_uod_NETWORK_SCHEDULE_3  A
                        LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_NETWORK_SCHEDULE_3  B
                           ON A.PRODUCT_ID = B.PRODUCT_ID
                        AND A.SINK_ID = B.SINK_ID
                        AND A.RANK_DATE = (B.RANK_DATE - 1) )'; EXECUTE IMMEDIATE V_SQL_CMD;



       --UPDATING TEMPORARY NETWORK SCHEDULE TABLE TO SET DEFAULT DATE FOR NULL RECORDS--
       V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4
          SET END_DATE = :a
          WHERE END_DATE IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD using v_end_date;
          

       --INSERTING UPT AND DELIVERY FLAGS ACROSS DAY OF WEEK AT UPC DEPOT LEVEL WITH BEGIN AND END DATES--  
        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_final'; EXECUTE IMMEDIATE V_SQL_CMD;
       V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_final
         ( SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SUN ,
                        SUN_UPT ,
                        END_DATE ,
                        1 
              FROM idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4 
              union
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        MON ,
                        MON_UPT ,
                        END_DATE ,
                        2 
              FROM idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4 
              union 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        TUE ,
                        TUE_UPT ,
                        END_DATE ,
                        3 
              FROM idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4 
              union 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        WED ,
                        WED_UPT ,
                        END_DATE ,
                        4 
              FROM idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4 
              union 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        THU ,
                        THU_UPT ,
                        END_DATE ,
                        5 
              FROM idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4 
              union 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        FRI ,
                        FRI_UPT ,
                        END_DATE ,
                       6 
              FROM idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4 
              union 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SAT ,
                        SAT_UPT ,
                        END_DATE ,
                        7 
              FROM idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4  )'; EXECUTE IMMEDIATE V_SQL_CMD;



       --SETTING CONSISTENT VALUES FOR ORDER LEAD TIME
       V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_final
          SET RCPT = (CASE WHEN RCPT IS NOT NULL THEN 1 ELSE 0 END)'; EXECUTE IMMEDIATE V_SQL_CMD;
       
                                  
		V_SQL_CMD := 'SELECT COUNT(*) from idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_final'; EXECUTE IMMEDIATE V_SQL_CMD into v_c1;
                                  
		V_SQL_CMD := 'SELECT COUNT(*)*7 from idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_4'; EXECUTE IMMEDIATE V_SQL_CMD into v_c2;
    
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                values(''NETWORK SCHEDULE'',(case when (:a<>:b) then ''TRANSFORMATION INCORRECT'' else ''TRANSFORMATION CORRECT'' end),systimestamp)'; 
                                                                EXECUTE IMMEDIATE V_SQL_CMD using v_c1, v_c2;

commit;

begin
if (v_c1<>V_C2) then raise EXC_NTW_SCHED; end if;
end;
                                  
                                  
V_SQL_CMD := 'SELECT COUNT(*) from (SELECT PRODUCT_ID, SINK_ID, EFFECTIVE_BEGIN_DT, DAY_NUM FROM idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_final 
GROUP BY PRODUCT_ID, SINK_ID,EFFECTIVE_BEGIN_DT,DAY_NUM HAVING COUNT(*)>1)'; EXECUTE IMMEDIATE V_SQL_CMD INTO V_C1;
    
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                values(''NETWORK SCHEDULE'',(case when (:a>0) then ''DUPLICATES RECORDS'' else ''CORRECT RECORDS'' end),systimestamp)';
                EXECUTE IMMEDIATE V_SQL_CMD using v_c1;

commit;

begin
if (v_c1>0) then raise EXC_NTW_SCHED; end if;
end;

       --Transformation of DOW data

       
          --TRANSPOSING RAW DOW FILE FROM UPC-STG FROM RAW FILE TO  UPC-STG-DAY OF WEEK LEVEL--
        V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_DOW'; EXECUTE IMMEDIATE V_SQL_CMD;
       V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_DOW
         ( SELECT UPC ,
                        STG ,
                        1 DOW  ,
                        SUN PROFILE  
FROM idssc_hist_read_uod.uod_DOW_1 WHERE RANK_DT=1 and upc IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:a)
              union
              SELECT UPC ,
                        STG ,
                        2 DOW  ,
                        MON PROFILE  
       FROM idssc_hist_read_uod.uod_DOW_1 WHERE RANK_DT=1 and upc IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:b)
              union
              SELECT UPC ,
                        STG ,
                        3 DOW  ,
                        TUE PROFILE  
       FROM idssc_hist_read_uod.uod_DOW_1 WHERE RANK_DT=1 and upc IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:c)
              union 
              SELECT UPC ,
                        STG ,
                        4 DOW  ,
                        WED PROFILE  
       FROM idssc_hist_read_uod.uod_DOW_1 WHERE RANK_DT=1 and upc IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:d)
              union 
              SELECT UPC ,
                        STG ,
                        5 DOW  ,
                        THU PROFILE  
       FROM idssc_hist_read_uod.uod_DOW_1 WHERE RANK_DT=1 and upc IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:e)
              union 
              SELECT UPC ,
                        STG ,
                        6 DOW  ,
                        FRI PROFILE  
       FROM idssc_hist_read_uod.uod_DOW_1 WHERE RANK_DT=1 and upc IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:f)
              union 
              SELECT UPC ,
                        STG ,
                        7 DOW  ,
                        SAT PROFILE  
              FROM idssc_hist_read_uod.uod_DOW_1 WHERE RANK_DT=1 and upc IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:g))';
                                                  EXECUTE IMMEDIATE V_SQL_CMD USING V_CATEGORY,V_CATEGORY,V_CATEGORY,V_CATEGORY,V_CATEGORY,V_CATEGORY,V_CATEGORY;


                
                                  
                                  V_SQL_CMD := 'SELECT COUNT(*) from idssc_hist_read_uod.' || v_category || '_uod_DOW'; EXECUTE IMMEDIATE V_SQL_CMD into v_c1;
                                  
                                  V_SQL_CMD := 'SELECT COUNT(*)*7 from idssc_hist_read_uod.uod_DOW_1 WHERE RANK_DT=1
                                      AND UPC IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:a)'; 
                                    EXECUTE IMMEDIATE V_SQL_CMD into v_c2 USING V_CATEGORY;
    
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                values(''DAY OF WEEK PROFILES'',(case when (:a<>:b) then ''TRANSFORMATION INCORRECT'' else ''TRANSFORMATION CORRECT'' end),systimestamp)'; 
                                                                EXECUTE IMMEDIATE V_SQL_CMD using v_c1, v_c2;

commit;


begin
if (v_c1<>V_C2) then raise EXC_DOW; end if;
end;
                                  
                                  
V_SQL_CMD := 'SELECT COUNT(*) from (SELECT DISTINCT UPC, STG,DOW, COUNT(*) FROM idssc_hist_read_uod.' || v_category || '_uod_DOW
GROUP BY UPC, STG,DOW HAVING COUNT(*)>1)'; EXECUTE IMMEDIATE V_SQL_CMD INTO V_C1;
    
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                values(''DAY OF WEEK PROFILES'',(case when (:a>0) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),systimestamp)'; 
                                                                EXECUTE IMMEDIATE V_SQL_CMD using v_c1;

commit;


begin
if (v_c1>0) then raise EXC_DOW; end if;
end;
                                                    

----TRANSFORMATION OF LIFE DATA
                
				V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_life_latest'; EXECUTE IMMEDIATE V_SQL_CMD;
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_uod_life_latest
                                (
                                select upc,
                                day_0_life,
                                day_1_life,
                                day_2_life,
                                day_3_life,
                                day_4_life,
                                day_5_life,
                                day_6_life,
                                ctry_code,
                                rank() over (partition by upc, ctry_code order by week_begin_date desc) 
                                from idssc_hist_read_uod.uod_life_max WHERE UPC 
                                IN (SELECT DISTINCT UPC FROM idssc_hist.MAN_PRODUCT_DIMENSION WHERE CATEGORY_ID=:a))'; 
EXECUTE IMMEDIATE V_SQL_CMD USING V_CATEGORY;

--------------------------------------------
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_product_life_depot'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_uod_product_life_depot
                (select
                a.upc,
                b.depot_code,
                a.life1,
                a.life2,
                a.life3,
                a.life4,
                a.life5,
                a.life6,
                a.life7 
                from idssc_hist_read_uod.' || v_category || '_uod_life_latest a left join idssc_hist.hist_depot_corp b on a.country=b.served_country where a.rank_dt=1 and b.served_country <> ''ALL'')'; EXECUTE IMMEDIATE V_SQL_CMD;



                --TRANSPOSING RAW LIFE DATA FROM UPC-STORE TO UPC-STORE-DAY OF WEEK LEVEL CONVERTING NIGHT LIFE TO SHELF LIFE--
                 V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_PRODUCTLIFE'; EXECUTE IMMEDIATE V_SQL_CMD;
                V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_PRODUCTLIFE
                  ( SELECT upc ,
                                                   depot ,
                                                   1 ,
                                                   LIFE_SUN + 1 
                                FROM idssc_hist_read_uod.' || v_category || '_uod_product_life_depot 
                                union
                                SELECT upc ,
                                                   depot  ,
                                                   2 ,
                                                   LIFE_MON + 1 
                                FROM idssc_hist_read_uod.' || v_category || '_uod_product_life_depot 
                                union 
                                SELECT upc ,
                                                   depot  ,
                                                  3 ,
                                                   LIFE_TUE + 1 
                                FROM idssc_hist_read_uod.' || v_category || '_uod_product_life_depot 
                                union 
                                SELECT upc ,
                                                   depot ,
                                                   4 ,
                                                   LIFE_WED + 1 
                                FROM idssc_hist_read_uod.' || v_category || '_uod_product_life_depot 
                                union 
                                SELECT upc ,
                                                   depot ,
                                                   5 ,
                                                   LIFE_THU + 1 
                                FROM idssc_hist_read_uod.' || v_category || '_uod_product_life_depot 
                                union 
                                SELECT upc ,
                                                   depot ,
                                                   6 ,
                                                   LIFE_FRI + 1 
                                FROM idssc_hist_read_uod.' || v_category || '_uod_product_life_depot
                                union 
                                SELECT upc ,
                                                   depot ,
                                                   7 ,
                                                   LIFE_SAT + 1 
                                FROM idssc_hist_read_uod.' || v_category || '_uod_product_life_depot  )'; EXECUTE IMMEDIATE V_SQL_CMD;

                                
                                 V_SQL_CMD := 'SELECT COUNT(*) from idssc_hist_read_uod.' || v_category || '_uod_PRODUCTLIFE'; 
                                                                                                                                EXECUTE IMMEDIATE V_SQL_CMD into v_c1;
                                  
                                  V_SQL_CMD := 'SELECT COUNT(*)*7 from idssc_hist_read_uod.' || v_category || '_uod_product_life_depot'; EXECUTE IMMEDIATE V_SQL_CMD into v_c2;
    
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                values(''PRODUCT LIFE DATA'',(case when (:a<>:b) then ''TRANSFORMATION INCORRECT'' else ''TRANSFORMATION CORRECT'' end),systimestamp)'; 
                                                                EXECUTE IMMEDIATE V_SQL_CMD using v_c1, v_c2;

commit;


begin
if (v_c1<>V_C2) then raise EXC_LIFE; end if;
end;
                                  
                                  
V_SQL_CMD := 'SELECT COUNT(*) from (SELECT UPC, DEPOT,fday FROM idssc_hist_read_uod.' || v_category || '_uod_productlife
GROUP BY UPC, DEPOT,fday HAVING COUNT(*)>1)'; EXECUTE IMMEDIATE V_SQL_CMD INTO V_C1;
    
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                values(''PRODUCT LIFE DATA'',(case when (:a>0) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),systimestamp)'; 
                                                                EXECUTE IMMEDIATE V_SQL_CMD using v_c1;

commit;


begin
if (v_c1>0) then raise EXC_LIFE; end if;
end;
                                                
                                                            

exception
when exc_inv then 
       raise_application_error (-20021,'ERROR IN INVENTORY MODEL TRANSFORMATION',TRUE);
raise;

when exc_ntw_sched then 
       raise_application_error (-20022,'ERROR IN NETWORK SCHEDULE TRANSFORMATION',TRUE);
raise;

when exc_dow then 
       raise_application_error (-20021,'ERROR IN DOW TRANSFORMATION',TRUE);
raise;

when exc_life then 
       raise_application_error (-20023,'ERROR IN PRODUCT LIFE TRANSFORMATION',TRUE);
raise;


--WHEN OTHERS THEN
--      raise_application_error (-20006,'An error has occurred in the transformations',TRUE);
--raise;

                                  
END;




create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_ROW_WISE_UPT
(
   V_TRAY_TYPE IN VARCHAR2,
   V_CATEGORY IN VARCHAR2
)
AS
   V_UPC float;
   V_UPT NUMBER(10,0);
   V_COUNT NUMBER(10,0);

BEGIN
 
EXECUTE IMMEDIATE
   'SELECT COUNT(*)
     FROM idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIs_PIVOT '
     into v_count;
     
   EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_1 ';
   
   EXECUTE IMMEDIATE
   'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_1
     ( SELECT * 
       FROM idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC  )';
       
   --V_TRAY_TYPE := 'METRIC_TRAY_7' ;
   WHILE V_COUNT > 0 
   LOOP 
      
      BEGIN
         EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_2 ';
         
         EXECUTE IMMEDIATE
         'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_2
           ( SELECT * 
             FROM idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_1 WHERE ROWNUM <= 1 )';
         
          EXECUTE IMMEDIATE 'SELECT UPC
           FROM idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_2'
           INTO v_upc;
          
           
         EXECUTE IMMEDIATE
         'SELECT
         CASE 
               WHEN :a=''BROWN_TRAY'' THEN BROWN_TRAY
           WHEN :b=''CARDBOARD'' THEN CARDBOARD
           WHEN :c=''METRIC_TRAY_7'' THEN METRIC_7IN_MAX_UPT
           WHEN :d=''METRIC_TRAY_5'' THEN METRIC_5IN_MAX_UPT
           WHEN :e=''METRIC_TRAY_2'' THEN METRIC_2IN_MAX_UPT
           WHEN :f=''HALF_TRAY_7'' THEN HALF_7IN_MAX_UPT
           WHEN :g=''HALF_TRAY_5'' THEN HALF_5IN_MAX_UPT
           WHEN :h=''HALF_TRAY_2'' THEN HALF_2IN_MAX_UPT
         END
           FROM idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS_PIVOT 
           WHERE UPC = :i'
           INTO V_UPT
           USING V_TRAY_TYPE,V_TRAY_TYPE,V_TRAY_TYPE,V_TRAY_TYPE,V_TRAY_TYPE,V_TRAY_TYPE,V_TRAY_TYPE,V_TRAY_TYPE, V_UPC;
           
         WHILE ( V_UPT >= 1 ) 
         LOOP 
            
            BEGIN
               EXECUTE IMMEDIATE
               'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_3
                 VALUES ( :a, :b, :c )'
                 USING V_UPC, V_UPT, V_TRAY_TYPE;
               V_UPT := (V_UPT - 1) ;
            END;
         END LOOP;
         
         EXECUTE IMMEDIATE
         'DELETE idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_1
          WHERE UPC = :a'
          USING V_UPC;
          
         V_COUNT := V_COUNT - 1 ;
      END;
   END LOOP;
END;




create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_PROD_DESC_CAL
(
   V_end_date in date,   
      v_start_date in date,
   V_CATEGORY IN NVARCHAR2
) 
AS
       V_DOLLY_VOLUME NUMBER(10,3);
       V_DOLLY_COST NUMBER(4,2);
       v_pallet_width int;
       v_pallet_depth int;
       v_pallet_height int;
       v_sql_cmd varchar2(10000);
		EXC_PROD_DESC EXCEPTION;
		V_C1 INT;
		V_C2 INT;

BEGIN
       V_DOLLY_VOLUME := 601695.216;
       V_DOLLY_COST := 10.37;
       v_pallet_width := 120;
       v_pallet_depth := 80;
       v_pallet_height := 178;
      
       ------------MAXIMUM PERMISSIBLE CALCULATIONS--------------


       --EXTRACTION OF DIMENSIONS FOR REQUIRED CATEGORY FROM DIMENSION DUMP
       v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.'|| V_CATEGORY ||'_uod_prod_dim';
        EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.'|| V_CATEGORY ||'_uod_prod_dim
         ( SELECT UPC ,
                        :a CATEGORY  ,
                        NAME ,
                        WIDTH ,
                        HEIGHT ,
                        DEPTH ,
                        TRAYWIDTH ,
                        TRAYHEIGHT ,
                        TRAYDEPTH ,
                        0 UNIT_WEIGHT  ,
                        0 UNIT_COST  ,
                        NULL IS_SRP  ,
                        NULL SRP_TOTAL  ,
                        rank() over(partition by upc order by ID)
              FROM IDSSC_HIST.man_PRODUCT_DIMENSION where  
                category_ID= :b AND
               UPC IN (SELECT DISTINCT product_id FROM IDSSC_HIST.hist_weekly_FORECAST))';
        EXECUTE IMMEDIATE V_SQL_CMD
        USING V_CATEGORY, V_CATEGORY;
       --DELETING UPCS WITH MISING DIMENSION or negative dimensions(S)
       
        v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_prod_dim
       WHERE rank_upc>1';
        EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_prod_dim
       WHERE WIDTH * HEIGHT * DEPTH <= 0';
        EXECUTE IMMEDIATE V_SQL_CMD;
                                
		select count(DISTINCT UPC) into v_c1 from IDSSC_HIST.MAN_PRODUCT_DIMENSION;
       
 INSERT INTO idssc_hist_read_uod.qc_raw_TABLES
VALUES('PRODUCT DIMENSIONS','PRODUCT DIMENSIONS AVAILABLE FOR ' || V_C1 || ' UPCs IN ' || V_CATEGORY || ' CATEGORY',SYSTIMESTAMP);

COMMIT;


       --TREATING INCORRECT VALUES FOR SRPS
      
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_dim
          SET IS_SRP = ''YES''
          WHERE SRP_HEIGHT > 0
         OR SRP_WIDTH > 0
         OR SRP_DEPTH > 0';
         EXECUTE IMMEDIATE V_SQL_CMD;
      
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_dim
          SET IS_SRP = ''NO''
          WHERE IS_SRP IS NULL';
          EXECUTE IMMEDIATE V_SQL_CMD;
      
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_dim
          SET SRP_HEIGHT = HEIGHT
          WHERE HEIGHT > SRP_HEIGHT
         AND IS_SRP = ''YES''';
         EXECUTE IMMEDIATE V_SQL_CMD;
      
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_dim
          SET SRP_WIDTH = WIDTH
          WHERE WIDTH > SRP_WIDTH
         AND IS_SRP = ''YES''';
         EXECUTE IMMEDIATE V_SQL_CMD;
      
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_dim
          SET SRP_DEPTH = DEPTH
          WHERE DEPTH > SRP_DEPTH
         AND IS_SRP = ''YES''';
         EXECUTE IMMEDIATE V_SQL_CMD;
      
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_dim
          SET SRP_TOTAL = (FLOOR(SRP_WIDTH / WIDTH) * FLOOR(SRP_DEPTH / DEPTH) * FLOOR(SRP_HEIGHT / HEIGHT))
          WHERE IS_SRP = ''YES''';
          EXECUTE IMMEDIATE V_SQL_CMD;
      
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_dim
          SET SRP_TOTAL = 1
          WHERE IS_SRP = ''NO''';
          EXECUTE IMMEDIATE V_SQL_CMD;
		  
		  
        --GETTING TRAY DIMENSIONS FROM IDS TABLE
               v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_DIM_TRAY' ;
               EXECUTE IMMEDIATE V_SQL_CMD;
              
         v_sql_cmd :=  'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_DIM_TRAY
         ( SELECT TRAY_TYPE ,
                        TRAY_WIDTH ,
                        TRAY_DEPTH ,
                        TRAY_HEIGHT ,
                        MAX_WEIGHT ,
                        MAX_COST 
              FROM IDSSC_HIST.MAN_TRAY_DIMENSION )';
             EXECUTE IMMEDIATE V_SQL_CMD;
                                  
       -- CALCULATION OF POSSIBLE UPT BASED ON DIFFERENT ORIENTATIONS AND CALCULATING THE MAXIMUM
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS' ;
        EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
         ( SELECT UPC ,
                        PROD_DESCRIPTION ,
                        CATEGORY ,
                        WIDTH ,
                        HEIGHT ,
                        DEPTH ,
                        SRP_WIDTH ,
                        SRP_HEIGHT ,
                        SRP_DEPTH ,
                        SRP_TOTAL ,
                        TRAY_TYPE ,
                        TRAY_WIDTH ,
                        TRAY_HEIGHT ,
                        TRAY_DEPTH ,
                        MAX_WEIGHT ,
                        MAX_COST ,
                        IS_SRP ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL 
              FROM ( SELECT * 
                        FROM idssc_hist_read_uod.' || v_category || '_uod_prod_dim 
                                    CROSS JOIN idssc_hist_read_uod.' || v_category || '_uod_DIM_TRAY  ) )';
                                    EXECUTE IMMEDIATE V_SQL_CMD;

                                                                                                                       
       --ENSURING THAT THERE ARE NO UPCS WITH MISSING DIMENSION                                                          
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
       WHERE WIDTH IS NULL';
       EXECUTE IMMEDIATE V_SQL_CMD;
        
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
       WHERE DEPTH IS NULL';
       EXECUTE IMMEDIATE V_SQL_CMD;

        
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
       WHERE HEIGHT IS NULL';
       EXECUTE IMMEDIATE V_SQL_CMD;

       --REPLACING PRODUCT DIMENSIONS WITH SRP DIMENSIONS FOR SHELF READY PACKS
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET WIDTH = (CASE 
                                          WHEN IS_SRP = ''YES'' THEN SRP_WIDTH
                 ELSE WIDTH
                      END)';
                      EXECUTE IMMEDIATE V_SQL_CMD;
                      
                          
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET DEPTH = (CASE 
                                          WHEN IS_SRP = ''YES'' THEN SRP_DEPTH
                 ELSE DEPTH
                       END)';
                       
                       EXECUTE IMMEDIATE V_SQL_CMD;
        
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET HEIGHT = (CASE 
                                           WHEN IS_SRP = ''YES'' THEN SRP_HEIGHT
                 ELSE HEIGHT
                       END)';
                       EXECUTE IMMEDIATE V_SQL_CMD;

       --CALCULATING THE NUMBER OF UNITS(OR SRPs) THAT FIT IN THE TRAY IN THE TWO ORIENTATIONS
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET UPT1 = (FLOOR(TRAY_WIDTH / WIDTH) * FLOOR(TRAY_HEIGHT / HEIGHT) * FLOOR(TRAY_DEPTH / DEPTH))';
          EXECUTE IMMEDIATE V_SQL_CMD;
      
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET UPT2 = (FLOOR(TRAY_WIDTH / DEPTH) * FLOOR(TRAY_HEIGHT / HEIGHT) * FLOOR(TRAY_DEPTH / WIDTH))';
          EXECUTE IMMEDIATE V_SQL_CMD;

       --SELECTING THE ORIENTATION WITH THE MAXIMUM UPT
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
       SET UPT_INITIAL = greatest (UPT1,UPT2)';
       EXECUTE IMMEDIATE V_SQL_CMD;

       --CALCULATING THE REMAINING SPACE ACROSS ALL DIMENSIONS
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET REDWID = (CASE 
                                           WHEN UPT_INITIAL = UPT1 THEN TRAY_WIDTH - FLOOR(TRAY_WIDTH / WIDTH) * WIDTH

                                           WHEN UPT_INITIAL = UPT2 THEN TRAY_WIDTH - FLOOR(TRAY_WIDTH / DEPTH) * DEPTH
                 ELSE 0
                       END)';
                       EXECUTE IMMEDIATE V_SQL_CMD;
                       
                               
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET REDHGT = (CASE 
                                           WHEN UPT_INITIAL = UPT1 THEN TRAY_HEIGHT - FLOOR(TRAY_HEIGHT / HEIGHT) * HEIGHT
                                           WHEN UPT_INITIAL = UPT2 THEN TRAY_HEIGHT - FLOOR(TRAY_HEIGHT / HEIGHT) * HEIGHT
                 ELSE 0
                       END)';
                       EXECUTE IMMEDIATE V_SQL_CMD;
       
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET REDDEP = (CASE 
                                           WHEN UPT_INITIAL = UPT1 THEN TRAY_DEPTH - FLOOR(TRAY_DEPTH / DEPTH) * DEPTH
                                           WHEN UPT_INITIAL = UPT2 THEN TRAY_DEPTH - FLOOR(TRAY_DEPTH / WIDTH) * WIDTH
                 ELSE 0
                       END)';
                       EXECUTE IMMEDIATE V_SQL_CMD;

       --CALCULATING THE NUMBER OF UNITS THAT CAN FIT IN REMAINING SPACE ALONG WIDTH
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET UPT1 = FLOOR(REDWID / WIDTH) * FLOOR(TRAY_HEIGHT / HEIGHT) * FLOOR(TRAY_DEPTH / DEPTH)';
       EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET UPT2 = FLOOR(REDWID / DEPTH) * FLOOR(TRAY_HEIGHT / HEIGHT) * FLOOR(TRAY_DEPTH / WIDTH)';
          EXECUTE IMMEDIATE V_SQL_CMD;

         --SELECTING MAXIMUM UNITS THAT FIT IN EXTRA SPACE ALONG WIDTH
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
                                  SET UPT_WIDTH= greatest (UPT1,UPT2)';
                                  EXECUTE IMMEDIATE V_SQL_CMD;
                                                                                                                     
       --CALCULATING REMAINING SPACE ALONG WIDTH AFTER FITTING IN REMAINING SPACE                            
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET REDWID = (CASE 
                                           WHEN UPT_WIDTH = 0 THEN TRAY_WIDTH

                 ELSE TRAY_WIDTH - REDWID
                       END)';
                       EXECUTE IMMEDIATE V_SQL_CMD;

       --CALCULATING UNITS THAT FIT IN REMAINING SPACE ALONG DEPTH
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET UPT1 = FLOOR(REDWID / WIDTH) * FLOOR(TRAY_HEIGHT / HEIGHT) * FLOOR(REDDEP / DEPTH)';
          EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET UPT2 = FLOOR(REDWID / DEPTH) * FLOOR(TRAY_HEIGHT / HEIGHT) * FLOOR(REDDEP / WIDTH)';
          EXECUTE IMMEDIATE V_SQL_CMD;

              --SELECTING MAXIMUM UNITS THAT FIT IN EXTRA SPACE ALONG DEPTH
          v_sql_cmd := 
          'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
                                  SET UPT_DEPTH=greatest (UPT1,UPT2)';
                                  EXECUTE IMMEDIATE V_SQL_CMD;
                                                                                                                     
       --CALCULATION OF REMAINING SPACE TO FIT EXTRA UNITS ALONG HEIGHT                       
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET REDDEP = TRAY_DEPTH - REDDEP';
          EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET REDWID = TRAY_WIDTH - REDWID';
          EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET UPT1 = FLOOR(REDWID / WIDTH) * FLOOR(REDHGT / HEIGHT) * FLOOR(REDDEP / DEPTH)';
          EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET UPT2 = FLOOR(REDWID / DEPTH) * FLOOR(REDHGT / HEIGHT) * FLOOR(REDDEP / WIDTH)';
          EXECUTE IMMEDIATE V_SQL_CMD;

        v_sql_cmd :=   
        'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
       SET UPT_HEIGHT = greatest (UPT1,UPT2)';
       EXECUTE IMMEDIATE V_SQL_CMD;


       --CALCULATING MAXIMUM UNITS THAT FIT IN A TRAY
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
          SET UPT_MAX = UPT_INITIAL + UPT_WIDTH + UPT_DEPTH + UPT_HEIGHT';
          EXECUTE IMMEDIATE V_SQL_CMD;
          
         -- GETTING THE FINAL MATRIX FROM MAX PERMISSIBLE UPT FOR DIFFERENT TRAY TYPE-HEIGHT COMBINATIONS 
          v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot';
          EXECUTE IMMEDIATE V_SQL_CMD;
       v_sql_cmd :=   
       'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
         ( SELECT DISTINCT UPC ,
                                         PROD_DESCRIPTION ,
                                         CATEGORY ,
                                         IS_SRP ,
                                         SRP_TOTAL ,
                                         SUM(CASE WHEN TRAY_TYPE=''HALF_TRAY_2'' THEN UPT_MAX
                                                ELSE 0
                                                   END) MAX_HALF_NESTED_UPT  ,
                                         SUM(CASE WHEN TRAY_TYPE=''HALF_TRAY_5'' THEN UPT_MAX
                                                ELSE 0
                                                   END) MAX_HALF_LOW_UPT  ,
                                         SUM(CASE WHEN TRAY_TYPE = ''HALF_TRAY_7'' THEN UPT_MAX
                                                ELSE 0
                                                   END) MAX_HALF_HIGH_UPT  ,
                                         SUM(CASE WHEN  TRAY_TYPE=''METRIC_TRAY_2'' THEN UPT_MAX
                                                ELSE 0
                                                   END) MAX_METRIC_NESTED_UPT  ,
                                         SUM(CASE WHEN TRAY_TYPE=''METRIC_TRAY_5'' THEN UPT_MAX
                                                ELSE 0
                                                   END) MAX_METRIC_LOW_UPT  ,
                                         SUM(CASE WHEN TRAY_TYPE=''METRIC_TRAY_7'' THEN UPT_MAX 
                                                ELSE 0
                                                   END) MAX_METRIC_HIGH_UPT  ,
                                         SUM(CASE WHEN TRAY_TYPE= ''CARDBOARD'' THEN UPT_MAX 
                                                ELSE 0
                                                   END) CARDBOARD  ,
                                         SUM(CASE WHEN TRAY_TYPE= ''BROWN_TRAY'' THEN UPT_MAX
                                                ELSE 0
                                                   END) BROWN_TRAY  ,
                                         NULL ,
                                         NULL ,
                                         NULL 
              FROM idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS
                GROUP BY UPC,PROD_DESCRIPTION,CATEGORY,IS_SRP,SRP_TOTAL )'; EXECUTE IMMEDIATE V_SQL_CMD;

--UPC-SUPPLIER MAPPING
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_UPC_VENDOR'; EXECUTE IMMEDIATE V_SQL_CMD;
       v_sql_cmd := 
       'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_UPC_VENDOR
         ( SELECT DISTINCT UPC ,
                                         SUBSTR(src_location,1,4)
              FROM IDSSC_HIST.hist_NETWORK_SCHEDULE GROUP BY UPC ,SUBSTR(src_location,1,4))'; EXECUTE IMMEDIATE V_SQL_CMD;
              
        v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_UPC_VENDOR where source_id like ''B%''';
      EXECUTE IMMEDIATE v_sql_cmd;
      v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_UPC_VENDOR where source_id like ''D%''';
      EXECUTE IMMEDIATE v_sql_cmd;
      v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_UPC_VENDOR where source_id like ''H%''';
      EXECUTE IMMEDIATE v_sql_cmd;
      v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_UPC_VENDOR where source_id like ''S%''';
      EXECUTE IMMEDIATE v_sql_cmd;
                  
                  V_SQL_CMD := 'select count(distinct UPC) from IDSSC_HIST.MAN_EQUIPMENT where UPC IN (SELECT DISTINCT UPC FROM idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS)
  AND equipment_id<>4 and equipment_id<>9 and equipment_id<>11';
  EXECUTE IMMEDIATE v_sql_cmd INTO V_C1;

V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.qc_raw_TABLES
VALUES(''EQUIPMENT DATA'',''EQUIPMENT DATA AVAILABLE FOR ' || V_C1 || ' UPCs FROM ' || V_CATEGORY || ' CATEGORY'',SYSTIMESTAMP)';
COMMIT;

		v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TRAY_LATEST'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TRAY_LATEST
	   ( SELECT UPC ,
                        EQUIPMENT_ID ,
                        VENDOR_NO ,
							SITE_ID,
                        RANK() OVER (PARTITION BY UPC, EQUIPMENT_ID, VENDOR_NO, SITE_ID ORDER BY WITH_EFFECT_FROM DESC)
              FROM IDSSC_HIST.MAN_EQUIPMENT where equipment_id<>4 and equipment_id<>9 and equipment_id<>11)'; 
                                                  EXECUTE IMMEDIATE V_SQL_CMD;
                      

--counting the repetition of tray types for a UPC- vendor combination
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TRAY_COUNT'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TRAY_COUNT
         ( SELECT UPC ,
                        EQUIPMENT_ID ,
                        VENDOR_NO ,
                        count(*)
              FROM idssc_hist_read_uod.' || v_category || '_uod_TRAY_LATEST WHERE RANK_EQP = 1 GROUP BY UPC,EQUIPMENT_ID,VENDOR_NO)'; 
                                                  EXECUTE IMMEDIATE V_SQL_CMD;


--Ranking the most repeated tray type for a UPC vendor combination
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TRAY_COUNT_1'; EXECUTE IMMEDIATE V_SQL_CMD;

      v_sql_cmd :=  'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TRAY_COUNT_1
         ( SELECT UPC ,
                        EQUIPMENT_ID ,
                        VENDOR_NO ,
                        COUNT_REP,
                        RANK() OVER (PARTITION BY UPC, EQUIPMENT_ID,VENDOR_NO ORDER BY COUNT_REP DESC)
              FROM idssc_hist_read_uod.' || v_category || '_uod_TRAY_COUNT)'; EXECUTE IMMEDIATE V_SQL_CMD;

--selecting the most repeated tray type as the default tray type for a UPC vendor combination
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY'; EXECUTE IMMEDIATE V_SQL_CMD;

       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY
         ( SELECT UPC ,
                        EQUIPMENT_ID ,
                        VENDOR_NO ,
                        null
              FROM idssc_hist_read_uod.' || v_category || '_uod_TRAY_COUNT_1 WHERE RANK_REP=1
          )'; EXECUTE IMMEDIATE V_SQL_CMD;

       --MATCHING THE VENDOR FOR A UPC IN EQUIPMENT DATA FROM NETWORK SCHEDULE
       
       v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY
       USING (SELECT distinct * FROM idssc_hist_read_uod.' || v_category || '_uod_UPC_VENDOR) ' || v_category || '_uod_UPC_VENDOR 
       ON  (idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY.UPC = ' || v_category || '_uod_UPC_VENDOR.UPC)
       WHEN MATCHED THEN UPDATE SET VENDOR = ' || v_category || '_uod_UPC_VENDOR.SOURCE_ID
       WHERE (SUBSTR(idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY.VENDOR_NUMBER, 3,4)= ' || v_category || '_uod_UPC_VENDOR.SOURCE_ID)'; EXECUTE IMMEDIATE V_SQL_CMD;
          
          
         --PRIORITISING TRAYS FOR EACH UPCS WHERE VENDOR MATCHES
          v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_1' ; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_1
         SELECT UPC ,
                     EQUIPMENT_ID ,
                     RANK() OVER ( PARTITION BY UPC ORDER BY EQUIPMENT_ID DESC  ) ,
                     NULL 
              FROM idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY 
          WHERE VENDOR IS NOT NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

          --PRIORITISING TRAYS FOR EACH UPCS WHERE VENDOR DON'T MATCH
           v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_2'; EXECUTE IMMEDIATE V_SQL_CMD;
          
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_2
         SELECT UPC ,
                     EQUIPMENT_ID ,
                     RANK() OVER ( PARTITION BY UPC ORDER BY EQUIPMENT_ID DESC  ) ,
                     NULL 
              FROM idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY 
          WHERE VENDOR IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;
          
       --SELECTING THE TRAY WITH HIGHEST PRIORITY FOR UPC WITH VENDOR MAPPING
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_1
       WHERE RANK_TRAY > 1'; EXECUTE IMMEDIATE V_SQL_CMD;

       --SELECTING THE TRAY WITH HIGHEST PRIORITY FOR UPC WITH NO VENDOR MAPPING
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_2
       WHERE RANK_TRAY > 1'; EXECUTE IMMEDIATE V_SQL_CMD;

       --DELETING UPCS FOR WHICH VENDOR MAPPING EXISTS FROM NO-VENDOR MATCH TABLE 
        
        v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_2
       WHERE UPC IN (SELECT DISTINCT UPC FROM idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_1)'; EXECUTE IMMEDIATE V_SQL_CMD;

       --COLLATING TRE EQUIPMENT DATA
   
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_1
       SELECT * FROM idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_2'; EXECUTE IMMEDIATE V_SQL_CMD;

       --RENAMING TRAY TYPE TO CONSISTANT NAMES
                 
                 v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_1
                 SET CURRENT_TRAY=(CASE 
                                                               WHEN TRAY =5 THEN ''METRIC_TRAY''
                                                              WHEN TRAY = 10 THEN ''BROWN_TRAY''
                                                              WHEN TRAY =2 THEN ''HALF_TRAY''
                                                              WHEN TRAY =8 THEN ''CARDBOARD''
                 ELSE ''METRIC_TRAY''
                 end)'; EXECUTE IMMEDIATE V_SQL_CMD;

       -- FINAL UPC-TRAY MAPPING
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_FINAL' ; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_FINAL
         ( SELECT DISTINCT UPC ,
                                         CURRENT_TRAY 
              FROM idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_1  )'; EXECUTE IMMEDIATE V_SQL_CMD;
                                  
       --UPDATING THE MAX UPT MATRIX WITH CURRENT TRAY TYPE
       
       v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot 
       USING (SELECT DISTINCT * FROM  idssc_hist_read_uod.' || v_category || '_uod_CURR_TRAY_FINAL) B 
       ON ( idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot.UPC = B.UPC )
       WHEN MATCHED THEN UPDATE SET CURRENT_TRAY = B.CURRENT_TRAY'; EXECUTE IMMEDIATE V_SQL_CMD;

  
  --SETTING THE CURRENT TRAY TYPE AS METRIC TRAY FOR UPCS WITH MISSING CURRENT TRAY
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET CURRENT_TRAY=''METRIC_TRAY'' WHERE CURRENT_TRAY IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

       --CALCULATING MAX CURRENT UPT SEEN ACROSS DEPOTS FROM NETWORK SCHEDULE

        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_CURR_UPT_MAX'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_CURR_UPT_MAX
         ( SELECT DISTINCT PRODUCT_ID ,
                                        MAX(UPT) 
              FROM idssc_hist_read_uod.' || v_category || '_uod_NTW_SCHD_FINAL WHERE UPT IS NOT NULL
                GROUP BY PRODUCT_ID )'; EXECUTE IMMEDIATE V_SQL_CMD;
                                    
       --UPDATING CURRENT UPT IN TABLE CONTAINING MAXIMUM PERMISSIBLE UPT              
       
       v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot 
       USING (SELECT DISTINCT * FROM  idssc_hist_read_uod.' || v_category || '_uod_CURR_UPT_MAX) B 
       ON ( idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot.UPC = B.UPC )
       WHEN MATCHED THEN UPDATE SET CURRENT_UPT = B.UPT'; EXECUTE IMMEDIATE V_SQL_CMD;      





       --CALCULATING MAX UPT FEASIBLE BASED ON CURRENT UPT
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET MAX_UPT_FEASIBLE = (CASE 
                                         WHEN IS_SRP = ''YES'' THEN (CASE 
                                                WHEN ( METRIC_7IN_MAX_UPT * SRP_TOTAL < CURRENT_UPT ) THEN CEIL(CURRENT_UPT / SRP_TOTAL)
                                         ELSE METRIC_7IN_MAX_UPT
                                            END)
                                         WHEN IS_SRP = ''NO'' THEN (CASE 
                                                WHEN ( METRIC_7IN_MAX_UPT < CURRENT_UPT ) THEN CURRENT_UPT
                                         ELSE METRIC_7IN_MAX_UPT
                                            END)
                 ELSE METRIC_7IN_MAX_UPT
                       END)'; EXECUTE IMMEDIATE V_SQL_CMD;
              
       --CAPPING THE LARGEST TRAYS WITH THE CURRENT UPT WHERE MAX<CURRENT UPT
      v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET METRIC_7IN_MAX_UPT = MAX_UPT_FEASIBLE'; EXECUTE IMMEDIATE V_SQL_CMD;
         
        v_sql_cmd :=   
        'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET CARDBOARD = MAX_UPT_FEASIBLE'; EXECUTE IMMEDIATE V_SQL_CMD; 
      
      
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET MAX_UPT_FEASIBLE = (CASE 
                                         WHEN IS_SRP = ''YES'' THEN (CASE 
                                                WHEN ( BROWN_TRAY * SRP_TOTAL < CURRENT_UPT ) THEN CEIL(CURRENT_UPT / SRP_TOTAL)
                                         ELSE BROWN_TRAY
                                            END)
                                         WHEN IS_SRP = ''NO'' THEN (CASE 
                                                WHEN ( BROWN_TRAY < CURRENT_UPT ) THEN CURRENT_UPT
                                         ELSE BROWN_TRAY
                                            END)
                 ELSE BROWN_TRAY
                       END)'; EXECUTE IMMEDIATE V_SQL_CMD;
      
       v_sql_cmd := 
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET BROWN_TRAY = MAX_UPT_FEASIBLE'; EXECUTE IMMEDIATE V_SQL_CMD;
   
       v_sql_cmd :=    
       'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
       SET BROWN_TRAY=METRIC_7IN_MAX_UPT WHERE CURRENT_TRAY<>''BROWN_TRAY'''; EXECUTE IMMEDIATE V_SQL_CMD;

       --CREATING DUMMY TABLES TO BE USED IN THE PROCEDURE
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC
         ( SELECT DISTINCT UPC 
              FROM idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot  )'; EXECUTE IMMEDIATE V_SQL_CMD;  
              
          
       --GENERATING ALL UPT VALUES POSSIBLE FOR A UPC BY TAKING ITS MAX UPT IN THE LARGEST TRAY
       BEGIN
                    idssc_hist_read_uod.uod_PROC_ROW_WISE_UPT('BROWN_TRAY',v_category); 
       END;

       -- INSERTING VARIOUS UPTS ACROSS DEPOTS TO FIND MOST REPEATING UPT
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_depot'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_depot
         ( SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SUN ,
                        SUN_UPT ,
                        END_DATE ,
                        1 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.' || v_category || '_uod_NTW_SCHD_4 
              UNION 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        MON ,
                        MON_UPT ,
                        END_DATE ,
                        2 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.' || v_category || '_uod_NTW_SCHD_4 
              UNION
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        TUE ,
                        TUE_UPT ,
                        END_DATE ,
                        3 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.' || v_category || '_uod_NTW_SCHD_4 
              UNION
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        WED ,
                        WED_UPT ,
                        END_DATE ,
                        4 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.' || v_category || '_uod_NTW_SCHD_4 
              UNION
              SELECT PRODUCT_ID ,
                       SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        THU ,
                        THU_UPT ,
                        END_DATE ,
                        5 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.' || v_category || '_uod_NTW_SCHD_4 
              UNION
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        FRI ,
                        FRI_UPT ,
                        END_DATE ,
                        6 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.' || v_category || '_uod_NTW_SCHD_4 
              UNION
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SAT ,
                        SAT_UPT ,
                        END_DATE ,
                        7 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.' || v_category || '_uod_NTW_SCHD_4  )'; EXECUTE IMMEDIATE V_SQL_CMD;
                                  
                                  

                                                
                                  
       --COUNT OF REPEATITION OF UPT ACROSS DEPOTS
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT
         SELECT DISTINCT PRODUCT_ID ,
                                    SINK_ID ,
                                    UPT ,
                                    COUNT(*) 
             FROM idssc_hist_read_uod.' || v_category || '_uod_ntw_schd_depot 
                                                  where :a between effective_begin_dt and end_date
              GROUP BY PRODUCT_ID,SINK_ID,UPT'; EXECUTE IMMEDIATE V_SQL_CMD using V_start_date;

       -- DELETING RECORDS WITH NULL UPTS 
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT
       WHERE UPT IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

       --RANKING UPT BASED ON NUMBER OF OCCURANCE IN A DEPOT
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_RANK'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_RANK
         SELECT DISTINCT UPC ,
                                    DEPOT ,
                                    UPT ,
                                    COUNT_UPT ,
                                    RANK() OVER ( PARTITION BY UPC ORDER BY COUNT_UPT DESC  ) 
              FROM idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT' ; EXECUTE IMMEDIATE V_SQL_CMD;
			  
			  
		  v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_UPT1';  EXECUTE IMMEDIATE V_SQL_CMD;

	v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_UPT1
         ( SELECT DISTINCT upc ,
                                         UPT ,
                                         count(*)
              FROM idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_RANK
                GROUP BY upc,UPT)';EXECUTE IMMEDIATE V_SQL_CMD;

--DELETING WHERE UPT IS NULL
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_UPT1
       WHERE UPT IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;
                                  
       --SELECTING MOST REPEATED UPT IN A DEPOT
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_FINAL'; EXECUTE IMMEDIATE V_SQL_CMD;
      
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_FINAL
         ( SELECT UPC ,
                        DEPOT ,
                        UPT 
              FROM idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_RANK 
                                  
                                  WHERE RANK_UPT = 1 )'; EXECUTE IMMEDIATE V_SQL_CMD;
                                  
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_FINAL
       WHERE DEPOT LIKE ''S%'''; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_FINAL
       SET DEPOT= SUBSTR(DEPOT,8,5)'; EXECUTE IMMEDIATE V_SQL_CMD;
	   
	   v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_UPT1
       WHERE UPC in (select distinct upc from idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_FINAL)'; EXECUTE IMMEDIATE V_SQL_CMD;


                   --COUNTING THE NUMBER OF OCCURANCE OF NON-NULL UPTS FOR A UPC
               
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_UPT1
         ( SELECT DISTINCT upc ,
                                         UPT ,
                                         COUNT(*) 
              FROM idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_FINAL
                GROUP BY upc,UPT)'; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_UPT1
       WHERE UPT IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

       --RANKING UPT FOR ALL UPC
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_UPT2'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_UPT2
         SELECT DISTINCT UPC ,
                                    UPT ,
                                    COUNT_UPT ,
                                    RANK() OVER ( PARTITION BY UPC ORDER BY COUNT_UPT DESC , UPT desc ) 
              FROM idssc_hist_read_uod.' || v_category || '_uod_UPT1' ; EXECUTE IMMEDIATE V_SQL_CMD;
                                  
                                  
       --SELECTING MOST REPEATING UPT AS THE CURRENT
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_CURR_UPT'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_CURR_UPT
         ( SELECT UPC ,
                        UPT 
              FROM idssc_hist_read_uod.' || v_category || '_uod_UPT2 
               WHERE RANK_UPT = 1 )'; EXECUTE IMMEDIATE V_SQL_CMD;


       --JOINING THE UPT LIST AND THE SRP UNITS FOR A UPC
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_LIST_ALL_UPT'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_LIST_ALL_UPT
         ( SELECT A.* ,
                        B.SRP_TOTAL 
              FROM idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_3 A
                        LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_prod_dim B
                           ON A.UPC = B.UPC )'; EXECUTE IMMEDIATE V_SQL_CMD;
                                                                                         
       --CONVERTING NUMBER OF SRPS TO NUMBER OF UNITS FOR SRPS
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_LIST_ALL_UPT
          SET UPT = UPT * SRP'; EXECUTE IMMEDIATE V_SQL_CMD;
          
          v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_LIST_ALL_UPT
       WHERE UPT > 72'; EXECUTE IMMEDIATE V_SQL_CMD; 
          
          
          
        --INSERTING THE UPT ACROSS DEPOT TO PERMISSIBLE RANGE OF UPT
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_LIST_ALL_UPT
         ( SELECT UPC ,
                        UPT ,
                        NULL ,
                        NULL 
              FROM idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_FINAL  )'; EXECUTE IMMEDIATE V_SQL_CMD;

        v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_LIST_ALL_UPT
         ( SELECT UPC ,
                        UPT ,
                        NULL ,
                        NULL 
              FROM idssc_hist_read_uod.' || v_category || '_uod_CURR_UPT  )'; EXECUTE IMMEDIATE V_SQL_CMD;
              
       --INSERTING DISTINCT UPTS FROM ABOVE TABLE - idssc_hist_read_uod.' || v_category || '_uod_LIST_ALL_UPT
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC
         ( SELECT DISTINCT UPC ,
                                         UPT 
              FROM idssc_hist_read_uod.' || v_category || '_uod_LIST_ALL_UPT  )'; EXECUTE IMMEDIATE V_SQL_CMD;
                                  
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC
       WHERE UPT = 1'; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC
       WHERE UPT IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;
       

COMMIT;

                   
                   
--table for Article_no-UPC mapping for SP calculation
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_article_upc'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_article_upc(
select distinct cast(article_no as int),
                cast(intl_article_no as int)
                from IDSSC_HIST.hist_assort_ean 
                where uom=''EA'' and site_no=''Z200'')'; EXECUTE IMMEDIATE V_SQL_CMD;

--selecting required records and mapping UPC
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_SP_UPC'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_sp_upc
(select cast(a.article_no as int),
        b.upc,
        a.interface_run_date_time,
        a.site_no,
        a.uom,
        a.valid_from_date,
        a.amount,
        rank() over (partition by a.article_no,b.upc,a.site_no,a.uom,a.valid_from_date order by   a.interface_run_date_time desc, amount asc)
        from  IDSSC_HIST.hist_ASSORT_UOM_COND_VALUE a right join idssc_hist_read_uod.' || v_category || '_uod_article_upc b on cast(a.article_no as int)=cast(b.article_no as int)
        where a.uom=''EA'' and a.site_no=''Z200'' )'; EXECUTE IMMEDIATE V_SQL_CMD;


--RANKING THE SP DATA
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_SP_LATEST'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_sp_latest(
select upc,
        SP,
        rank() over (partition by upc order by valid_from_date desc)
        from idssc_hist_read_uod.' || v_category || '_uod_sp_upc where rank_dt=1)'; EXECUTE IMMEDIATE V_SQL_CMD;
        
--SELECTING THE FINAL SP DATA INTO THE TABLE
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_SP_FINAL'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_sp_final(
select upc, sp from idssc_hist_read_uod.' || v_category || '_uod_sp_latest where rank_sp=1)'; EXECUTE IMMEDIATE V_SQL_CMD;

--QC OF SP FINAL TABLE

v_sql_cmd := 'select count(distinct UPC) from idssc_hist_read_uod.' || v_category || '_uod_sp_final where SP IS NOT NULL';
EXECUTE IMMEDIATE V_SQL_CMD INTO V_C1;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
VALUES(''SELLING PRICE'',''SELLING PRICE FOR UK(Z200) AND UOM - EA PRESENT FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;


v_sql_cmd := 'select count(*) from (SELECT DISTINCT UPC, COUNT(*) FROM idssc_hist_read_uod.' || v_category || '_uod_sp_final 
GROUP BY UPC HAVING COUNT(*)>1)';
EXECUTE IMMEDIATE V_SQL_CMD INTO V_C1;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
VALUES(''SELLING PRICE'',(case when (:a>0) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD USING V_C1; 
 COMMIT;


--Selecting the latest CP data for UPCs based on CP in GB

      v_sql_cmd :=  'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_cost_date_int'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_cost_date_int
         ( SELECT intnl_article_no,
                           SUPPLIER_CODE,
                        LOCN_CODE,
                        INTO_LOCN_START_DATE,
                        UNITS_PER_TRAY,
                        TRAY_COST_PRICE/UNITS_PER_TRAY,
                        INTERFACE_RUN_DATE_TIME
              FROM IDSSC_HIST.HIST_COST_DETAIL  WHERE LOCN_CODE=''GB'' and uom=''EA''
              and intnl_article_no<>'' '')'; EXECUTE IMMEDIATE V_SQL_CMD;



              v_sql_cmd :=  'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_cost_date'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_cost_date
         ( SELECT A.intnl_article_no,
                           A.SUPPLIER_CODE,
                        A.LOCN_CODE,
                        A.INTO_LOCN_START_DATE,
                        A.UNITS_PER_TRAY,
                        A.TRAY_COST_PRICE,
                        A.INTERFACE_RUN_DATE_TIME,
                        RANK() OVER ( PARTITION BY A.intnl_article_no, A.SUPPLIER_CODE,A.LOCN_CODE,A.INTO_LOCN_START_DATE,A.UNITS_PER_TRAY ORDER BY A.INTERFACE_RUN_DATE_TIME DESC  ) 
              FROM idssc_hist_read_uod.' || v_category || '_uod_cost_date_int A)'; EXECUTE IMMEDIATE V_SQL_CMD;
    

       --SELECTING VENDOR SUPPLYING AT CURRENT UPT FROM CP DATA BASED ON VENDOR AND UPT MAPPING FOR A UPC
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_COST'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_COST
         ( SELECT C.UPC ,
                        C.VENDOR ,
                        C.CP_START_DT ,
                        C.CP ,
                        D.UPT ,
                        C.UPT ,
                        C.SOURCE_ID 
              FROM ( SELECT A.UPC ,
                                    A.VENDOR ,
                                    A.UPT ,
                                    B.SOURCE_ID ,
                                    A.CP_START_DT ,
                                    A.CP,
									A.RANK_DT
									FROM idssc_hist_read_uod.' || v_category || '_uod_coST_DATE A
                                    LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_UPC_VENDOR B
                                    ON A.UPC = B.UPC AND A.VENDOR = B.SOURCE_ID ) C
                        LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_curr_upt D
                           ON C.UPC = D.UPC
                        AND C.UPT = D.UPT
         WHERE C.RANK_DT=1)'; EXECUTE IMMEDIATE V_SQL_CMD;

-- DELETING THE COST DETAIL WHERE VENOR AND UPT DOESNT MATCH WITH THE VENDOR AND UPT IN NETWORK SCHEDULE
      
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_COST
       WHERE NS_VENDOR IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

        
             --RANKING ALL MATCHING CP BASED ON CP BEGIN DATE
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_COST_1'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_COST_1
         SELECT UPC,
COST_VENDOR,
START_,
CP,
CURRENT_UPT,
COST_UPT,
NS_VENDOR ,
                     RANK() OVER ( PARTITION BY UPC ORDER BY START_ DESC, CP DESC  ) 
              FROM idssc_hist_read_uod.' || v_category || '_uod_COST where current_upt is not null'; EXECUTE IMMEDIATE V_SQL_CMD;
                                  
       --REMOVING ENTRIES WITH OLD CP START DATE
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_COST_1
       WHERE DATE_RANK > 1'; EXECUTE IMMEDIATE V_SQL_CMD;
                   
                           v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_COST_1_1'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_COST_1_1
         SELECT UPC,
COST_VENDOR,
START_,
CP,
CURRENT_UPT,
COST_UPT,
NS_VENDOR ,
                     RANK() OVER ( PARTITION BY UPC ORDER BY START_ DESC, CP DESC  ) 
              FROM idssc_hist_read_uod.' || v_category || '_uod_COST where current_upt is null'; EXECUTE IMMEDIATE V_SQL_CMD;
                                                  
                                                  v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_COST_1_1
       WHERE DATE_RANK > 1'; EXECUTE IMMEDIATE V_SQL_CMD;
                                                  
                                                  v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_COST_1_1
       WHERE upc in (select distinct upc from idssc_hist_read_uod.' || v_category || '_uod_COST_1)'; EXECUTE IMMEDIATE V_SQL_CMD;

                    v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_COST_1
         SELECT * from '|| v_category || '_uod_COST_1_1'; EXECUTE IMMEDIATE V_SQL_CMD;
                   
                   
                   
       --RANKING BASED ON CP VALUES FOR SELECTING HIGHEST CP
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_COST_2'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_COST_2
         SELECT UPC,
COST_VENDOR,
START_,
CP,
CURRENT_UPT,
COST_UPT,
NS_VENDOR ,
DATE_RANK,
           RANK() OVER ( PARTITION BY UPC ORDER BY CP DESC  ) 
              FROM idssc_hist_read_uod.' || v_category || '_uod_COST_1' ; EXECUTE IMMEDIATE V_SQL_CMD;
       --SELECTING HIGHEST CP FOR A UPC
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_COST_2
       WHERE CP_RANK > 1'; EXECUTE IMMEDIATE V_SQL_CMD;
     
       
       
        --SELECTING FINAL CP FROM PREVIOUS TABLE AND SP FROM TABLE CONTAING SP AND CALCULATION OF MARGIN
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_COST_FINAL'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_COST_FINAL
         ( SELECT DISTINCT UPC ,
                                         max(CP) ,
                                         CURRENT_UPT ,
                                         NULL ,
                                         NULL 
              FROM idssc_hist_read_uod.' || v_category || '_uod_COST_2 
                GROUP BY UPC,CURRENT_UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;



-- UPDATING THE SELLING PRICE IN THE CP TABLE FROM FINAL SP TABLE
      
       v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_COST_FINAL
       USING (SELECT DISTINCT * FROM idssc_hist_read_uod.' || v_category || '_uod_sp_final) ' || v_category || '_uod_sp_final 
       ON ( idssc_hist_read_uod.' || v_category || '_uod_COST_FINAL.UPC = ' || v_category || '_uod_sp_final.upc )
       WHEN MATCHED THEN UPDATE SET SP = ' || v_category || '_uod_sp_final.SP'; EXECUTE IMMEDIATE V_SQL_CMD;

       --CALCULATING THE MARGIN OF A PRODUCT FROM SP AND CP
       
        v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_COST_final
       WHERE CP is null'; EXECUTE IMMEDIATE V_SQL_CMD;
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_COST_final
       WHERE sp is null'; EXECUTE IMMEDIATE V_SQL_CMD;
       
        v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_COST_final
       WHERE sp =0'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_COST_FINAL
          SET MARGIN = (SP - CP) / SP'; EXECUTE IMMEDIATE V_SQL_CMD;
          
          --UPDATING MARGIN TO 25% WHERE LESS THAN 25%
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_COST_FINAL
          SET MARGIN = 0.25
          WHERE MARGIN < 0.25'; EXECUTE IMMEDIATE V_SQL_CMD;

--QC FOR CP FINAL TABLE
   v_sql_cmd := 'select count(distinct UPC) from idssc_hist_read_uod.' || v_category || '_uod_COST_final where CP IS NOT NULL';
   EXECUTE IMMEDIATE V_SQL_CMD into v_c1;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
VALUES(''COST PRICE'',''COST PRICE (WITH MATCHING VENDOR AND UPT) PRESENT FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;


v_sql_cmd := 'select count(*) from (SELECT DISTINCT UPC, COUNT(*) FROM idssc_hist_read_uod.' || v_category || '_uod_COST_final 
GROUP BY UPC HAVING COUNT(*)>1)';
EXECUTE IMMEDIATE V_SQL_CMD into v_c1;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
VALUES(''COST PRICE'',(case when (:a>0) then ''DUPLICATES IN CP FINAL TABLE'' else ''CP FINAL TABLE CREATED'' end),SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD using v_c1;
COMMIT;

                                  
                                  
                
                   --CONVERTING NUMBER OF SRP UNITS TO UNITS FOR SRPS
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET HALF_2IN_MAX_UPT = HALF_2IN_MAX_UPT * SRP_TOTAL
          WHERE IS_SRP = ''YES'''; EXECUTE IMMEDIATE V_SQL_CMD;
        
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
         SET HALF_5IN_MAX_UPT = HALF_5IN_MAX_UPT * SRP_TOTAL
          WHERE IS_SRP = ''YES'''; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET HALF_7IN_MAX_UPT = HALF_7IN_MAX_UPT * SRP_TOTAL
          WHERE IS_SRP = ''YES'''; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET METRIC_2IN_MAX_UPT = METRIC_2IN_MAX_UPT * SRP_TOTAL
          WHERE IS_SRP = ''YES'''; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET METRIC_5IN_MAX_UPT = METRIC_5IN_MAX_UPT * SRP_TOTAL
          WHERE IS_SRP = ''YES'''; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET METRIC_7IN_MAX_UPT = METRIC_7IN_MAX_UPT * SRP_TOTAL
          WHERE IS_SRP = ''YES'''; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET CARDBOARD = CARDBOARD * SRP_TOTAL
          WHERE IS_SRP = ''YES'''; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET BROWN_TRAY = BROWN_TRAY * SRP_TOTAL
          WHERE IS_SRP = ''YES'''; EXECUTE IMMEDIATE V_SQL_CMD;
         
                
                                              
       --CAPPING MAX UPT TO CURRENT UPT WHERE CURRENT UPT IS GREATER THAN MAX FOR CORRESPONDING TRAY TYPE
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET MAX_UPT_FEASIBLE = (CASE WHEN ( METRIC_7IN_MAX_UPT < CURRENT_UPT ) THEN CURRENT_UPT
                                         ELSE METRIC_7IN_MAX_UPT
                                            END)'; EXECUTE IMMEDIATE V_SQL_CMD;
              
              
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET METRIC_7IN_MAX_UPT = MAX_UPT_FEASIBLE'; EXECUTE IMMEDIATE V_SQL_CMD;
        
          
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET CARDBOARD = MAX_UPT_FEASIBLE'; EXECUTE IMMEDIATE V_SQL_CMD;
          
          
        
        v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET MAX_UPT_FEASIBLE = (CASE WHEN CURRENT_TRAY LIKE ''H%'' and HALF_7IN_MAX_UPT < CURRENT_UPT THEN CURRENT_UPT
                                         ELSE HALF_7IN_MAX_UPT
                                            END)'; EXECUTE IMMEDIATE V_SQL_CMD;

              
              v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET HALF_7IN_MAX_UPT = MAX_UPT_FEASIBLE'; EXECUTE IMMEDIATE V_SQL_CMD;
          
          
          v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET MAX_UPT_FEASIBLE = (CASE WHEN CURRENT_TRAY LIKE ''B%'' and BROWN_TRAY < CURRENT_UPT THEN CURRENT_UPT
                                         ELSE Brown_Tray
                                            END)'; EXECUTE IMMEDIATE V_SQL_CMD;

              
             v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET BROWN_TRAY = MAX_UPT_FEASIBLE'; EXECUTE IMMEDIATE V_SQL_CMD; 
          
                --capping to 72    
                                  
		v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET HALF_2IN_MAX_UPT  =72 where (half_2in_max_upt>72 and current_upt<72)'; EXECUTE IMMEDIATE V_SQL_CMD;
        
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET HALF_5IN_MAX_UPT =72 where (half_5in_max_upt>72 and current_upt<72)'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET HALF_7IN_MAX_UPT =72 where (half_7in_max_upt>72 and current_upt<72)'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET METRIC_2IN_MAX_UPT = 72 where (metric_2in_max_upt>72 and current_upt<72)'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET METRIC_5IN_MAX_UPT = 72 where (metric_5in_max_upt>72 and current_upt<72)'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET METRIC_7IN_MAX_UPT = 72 where (metric_7in_max_upt>72 and current_upt<72)'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET CARDBOARD = 72 where (cardboard>72 and current_upt<72)'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET BROWN_TRAY = 72 where (brown_tray>72 and current_upt<72)'; EXECUTE IMMEDIATE V_SQL_CMD;
                                  
                                     v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot
          SET BROWN_TRAY = 0 where current_tray not like ''B%'''; EXECUTE IMMEDIATE V_SQL_CMD; 
                                  
         
        --CALLING FUNCTION MULTIPLE TIMES WITH DIFFERENT TRAY TYPES TO GET THE FINAL TABLE OF ALL POSSIBLE UPC-UPT-TRAY COMBINATIONS
               v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC'; EXECUTE IMMEDIATE V_SQL_CMD;
              
              v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC
         ( SELECT DISTINCT UPC 
              FROM idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot  )'; EXECUTE IMMEDIATE V_SQL_CMD;  
                                  
               v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_3'; EXECUTE IMMEDIATE V_SQL_CMD;
          
           BEGIN
           idssc_hist_read_uod.uod_PROC_ROW_WISE_upt('HALF_TRAY_2',v_category);
           idssc_hist_read_uod.uod_PROC_ROW_WISE_upt('HALF_TRAY_5',v_category); 
           idssc_hist_read_uod.uod_PROC_ROW_WISE_upt('HALF_TRAY_7',v_category); 
           idssc_hist_read_uod.uod_PROC_ROW_WISE_upt('METRIC_TRAY_2',v_category);
           idssc_hist_read_uod.uod_PROC_ROW_WISE_upt('METRIC_TRAY_5',v_category);
           idssc_hist_read_uod.uod_PROC_ROW_WISE_upt('METRIC_TRAY_7',v_category);
           idssc_hist_read_uod.uod_PROC_ROW_WISE_upt('CARDBOARD',v_category); 
           idssc_hist_read_uod.uod_PROC_ROW_WISE_upt('BROWN_TRAY',v_category);
           END;   
          
          v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_3
       WHERE UPT = 1'; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_3
       WHERE UPT IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;
       

          
       --JOINING THE UPC-UPT- TRAY COMBINATION WITH THE COSTS
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_prod_TRAY'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_prod_TRAY
         ( SELECT A.* ,
                        D.SP ,
                        D.CP ,
                        C.UPT 
              FROM idssc_hist_read_uod.' || v_category || '_uod_LIST_UPC_3 A
                        LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_CURR_UPT_MAX C
                           ON A.UPC = C.UPC
                        LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_COST_FINAL D
                                                                     ON A.UPC = D.UPC)'; EXECUTE IMMEDIATE V_SQL_CMD;

        v_sql_cmd:= 'delete idssc_hist_read_uod.' || V_category || '_uod_prod_tray where upc in (select upc from idssc_hist_read_uod.' || V_category || '_uod_upc_vendor group by upc having count(*)>1)';
          execute immediate v_sql_cmd; 

       --JOINING TRAY SPECIFIC COST FOR DIFFERENT TRAY TYPES
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_prod_TRAY_COST'; EXECUTE IMMEDIATE V_SQL_CMD;
        
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_prod_TRAY_COST
         ( SELECT A.* ,
                        B.PRIMARY_TRANSPORT_COSTS ,
                        B.TRAY_HIRE ,
                        B.DEPOT_RHD_PER_TRAY ,
                        B.STORE_RECEIVING_PER_TRAY ,
                        B.STORE_HANDLING_PER_TRAY ,
                        B.TRAY_LENDING_PER_TRAY ,
                        (A.CP - (B.TRAY_HIRE / A.UPT) - (B.PRIMARY_TRANSPORT_COSTS / A.UPT)) EX_WORKS  
              FROM idssc_hist_read_uod.' || v_category || '_uod_prod_TRAY A
                        LEFT JOIN IDSSC_HIST.MAN_TRAY_COST B
                           ON A.TRAY_TYPE = B.TRAY_TYPE )'; EXECUTE IMMEDIATE V_SQL_CMD;

       --JOINING PRODUCT-UPT-TRAY COMBINATION WITH CURRENT TRAY
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_1'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_prod_descr_1
         ( SELECT A.* ,
                        B.IS_SRP ,
                        B.SRP_TOTAL ,
                        NULL 
              FROM idssc_hist_read_uod.' || v_category || '_uod_prod_TRAY_COST A
                        LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_upt_permis_pivot B
                           ON A.UPC = B.UPC )'; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_1
       WHERE UPT = 1'; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_prod_descr_1 
       USING (SELECT DISTINCT * FROM idssc_hist_read_uod.' || v_category || '_uod_UPT_PERMIS_PIVOT) ' || v_category || '_uod_UPT_PERMIS_pivot 
       ON ( idssc_hist_read_uod.' || v_category || '_uod_prod_descr_1.UPC = ' || v_category || '_uod_UPT_PERMIS_PIVOT.UPC )
      WHEN MATCHED THEN UPDATE SET CURRENT_TRAY_TYPE = ' || v_category || '_uod_UPT_PERMIS_PIVOT.CURRENT_TRAY'; EXECUTE IMMEDIATE V_SQL_CMD;


       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_1
          SET CURRENT_TRAY_TYPE = (CASE 
                                                               WHEN CURRENT_TRAY_TYPE LIKE ''M%'' THEN ''METRIC_TRAY''
                                                              WHEN CURRENT_TRAY_TYPE LIKE ''B%'' THEN ''BROWN_TRAY''
                                                              WHEN CURRENT_TRAY_TYPE LIKE ''H%'' THEN ''HALF_TRAY''
                                                              WHEN CURRENT_TRAY_TYPE LIKE ''C%'' THEN ''CARDBOARD''
                 ELSE ''METRIC_TRAY''
                       END)'; EXECUTE IMMEDIATE V_SQL_CMD;                                          
                                                                
                                                                                         
       --CREATION OF COLUMN SKELETON TO FIND TRAY HEIGHT
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2
         ( SELECT A.* ,
                        NULL ,
                        NULL ,
                        NULL 
              FROM idssc_hist_read_uod.' || v_category || '_uod_prod_descr_1 A )'; EXECUTE IMMEDIATE V_SQL_CMD;
                                  
       --CALCULATION OF TRAY HEIGHT FOR CURRENT TRAY BASED ON MAX UPT IN EACH TRAY
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP4'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP4
         ( SELECT DISTINCT UPC ,
                                         MAX(UPT) ,
                                         TRAY_TYPE ,
                                         CURRENT_UPT ,
                                         CURRENT_TRAY_TYPE ,
                                         NULL ,
                                         NULL ,
                                        NULL 
              FROM idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2 
                GROUP BY UPC,TRAY_TYPE,CURRENT_UPT,CURRENT_TRAY_TYPE )'; EXECUTE IMMEDIATE V_SQL_CMD;
                                    
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_TEMP4
       WHERE CURRENT_TRAY = ''METRIC_TRAY''
                     AND TRAY NOT LIKE ''METRIC%'''; EXECUTE IMMEDIATE V_SQL_CMD;
                                                              
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_TEMP4
       WHERE CURRENT_TRAY = ''HALF_TRAY''
                     AND TRAY NOT LIKE ''HALF%'''; EXECUTE IMMEDIATE V_SQL_CMD;
                                                              
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_TEMP4
       WHERE CURRENT_TRAY = ''CARDBOARD''
                     AND TRAY NOT LIKE ''CARDBOARD'''; EXECUTE IMMEDIATE V_SQL_CMD;
                                                              
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_TEMP4
       WHERE CURRENT_TRAY = ''BROWN_TRAY''
                     AND TRAY NOT LIKE ''BROWN%'''; EXECUTE IMMEDIATE V_SQL_CMD;
                                                              
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP4
          SET H2 = (CASE CURRENT_TRAY
                                                         WHEN ''METRIC_TRAY'' THEN UPT
                 ELSE 0
                       END)
          WHERE TRAY = ''METRIC_TRAY_2'''; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP4
          SET H5 = (CASE CURRENT_TRAY
                                                         WHEN ''METRIC_TRAY'' THEN UPT
                 ELSE 0
                       END)
          WHERE TRAY = ''METRIC_TRAY_5'''; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP4
          SET H7 = (CASE CURRENT_TRAY
                                                         WHEN ''METRIC_TRAY'' THEN UPT
                 ELSE 0
                       END)
          WHERE TRAY = ''METRIC_TRAY_7'''; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP4
          SET H2 = (CASE CURRENT_TRAY
                                                         WHEN ''HALF_TRAY'' THEN UPT
                 ELSE 0
                       END)
          WHERE TRAY = ''HALF_TRAY_2'''; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP4
          SET H5 = (CASE CURRENT_TRAY
                                                         WHEN ''HALF_TRAY'' THEN UPT
                 ELSE 0
                       END)
          WHERE TRAY = ''HALF_TRAY_5'''; EXECUTE IMMEDIATE V_SQL_CMD;

       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP4
          SET H7 = (CASE CURRENT_TRAY
                                                         WHEN ''HALF_TRAY'' THEN UPT
                 ELSE 0
                       END)
          WHERE TRAY = ''HALF_TRAY_7'''; EXECUTE IMMEDIATE V_SQL_CMD;
          


           v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP5'; EXECUTE IMMEDIATE V_SQL_CMD;
          
          
          v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP5
         ( SELECT DISTINCT UPC ,
                                         CURRENT_UPT ,
                                         CURRENT_TRAY ,
                                         MAX(H2) ,
                                         MAX(H5) ,
                                         MAX(H7) 
              FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP4
                GROUP BY UPC,CURRENT_UPT,CURRENT_TRAY )'; EXECUTE IMMEDIATE V_SQL_CMD;
                                   
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP5
          SET H2 = 0
          WHERE H2 IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;
        
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP5
          SET H5 = 0
          WHERE H5 IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP5
          SET H7 = 0
          WHERE H7 IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

          
          
        
        v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP5
          SET CURRENT_TRAY = (CASE 
                                                       WHEN CURRENT_TRAY = ''METRIC_TRAY''
                                                         AND CURRENT_UPT <= H2 THEN ''METRIC_TRAY_2''

                                                       WHEN CURRENT_TRAY = ''METRIC_TRAY''
                                                         AND CURRENT_UPT > H2
                                                         AND CURRENT_UPT <= H5 THEN ''METRIC_TRAY_5''

                                                       WHEN CURRENT_TRAY = ''METRIC_TRAY''
                                                         AND CURRENT_UPT > H5 THEN ''METRIC_TRAY_7''

                                                       WHEN CURRENT_TRAY = ''HALF_TRAY''
                                                         AND CURRENT_UPT <= H2 THEN ''HALF_TRAY_2''

                                                       WHEN CURRENT_TRAY = ''HALF_TRAY''
                                                       AND CURRENT_UPT > H2
                                                         AND CURRENT_UPT <= H5 THEN ''HALF_TRAY_5''

                                                       WHEN CURRENT_TRAY = ''HALF_TRAY''
                                                         AND CURRENT_UPT > H5 THEN ''HALF_TRAY_7''
                 ELSE NULL
                       END)'; EXECUTE IMMEDIATE V_SQL_CMD;
                                                                
                                                                
       v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2 
       USING (SELECT DISTINCT * FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP5) ' || v_category || '_uod_TEMP5 
       ON ( idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2.UPC = ' || v_category || '_uod_TEMP5.UPC )
       WHEN MATCHED THEN UPDATE SET CURRENT_T = ' || v_category || '_uod_TEMP5.CURRENT_TRAY'; EXECUTE IMMEDIATE V_SQL_CMD;

       --UPDATING THE CURRENT TRAY TYPE WITH BAR HEIGHTS
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2
          SET CURRENT_T = ''CARDBOARD''
          WHERE CURRENT_TRAY_TYPE = ''CARDBOARD'''; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2
          SET CURRENT_T = ''BROWN_TRAY''
          WHERE CURRENT_TRAY_TYPE = ''BROWN_TRAY'''; EXECUTE IMMEDIATE V_SQL_CMD;
          
        --REPLACING TRAY TYPES WITH TRAY TYPE AND BAR HEIGHT  
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2
          SET CURRENT_TRAY_TYPE = CURRENT_T'; EXECUTE IMMEDIATE V_SQL_CMD;
          
          
       
       v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2 
       USING (SELECT DISTINCT * FROM idssc_hist_read_uod.' || v_category || '_uod_CURR_upt) ' || v_category || '_uod_CURR_upt 
       ON ( idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2.UPC = ' || v_category || '_uod_CURR_upt.UPC )
       WHEN MATCHED THEN UPDATE SET CURRENT_U = ' || v_category || '_uod_CURR_upt.UPT'; EXECUTE IMMEDIATE V_SQL_CMD;  

       --REPLACING THE MAX CURRENT UPT FOR WHICH BAR HEIGHT HAS BEEN CALCULATED BY THE MOST OCCURING CURRENT UPT
       
       v_sql_cmd := 'update idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2 
       set current_upt=current_u'; EXECUTE IMMEDIATE V_SQL_CMD;

          
        --CALCULATION OF TRANSPORT COST FOR CARDBOARDS BASED ON PRODUCT DIMENSIONS
        v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_3 '; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_prod_descr_3 
         ( SELECT A.UPC ,
                        A.UPT ,
                        A.TRAY_TYPE ,
                        A.SP ,
                        A.CP ,
                        A.CURRENT_UPT ,
                        A.PRIMARY_TRANS ,
                        A.TRAY_HIRE ,
                        A.DEPOT_RHD ,
                        A.STORE_REC ,
                        A.STORE_HANDLING ,
                        A.TRAY_LENDING,
                        A.EX_WORKS ,
                        A.IS_SRP ,
                        A.SRP_TOTAL ,
                        A.CURRENT_TRAY_TYPE ,
                        A.PRODUCT_COST ,
                        B.WIDTH ,
                        B.HEIGHT ,
                        B.DEPTH ,
                        :a ,
                        :b,
                        A.PRIMARY_TRANS 
              FROM idssc_hist_read_uod.' || v_category || '_uod_prod_descr_2  A
                        LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_prod_dim  B
                           ON A.UPC = B.UPC )'; 
              EXECUTE IMMEDIATE V_SQL_CMD
              USING V_DOLLY_VOLUME, V_DOLLY_COST ;
                                                                                         
                                                                                         
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_3 
          SET PRIMARY_TRANS_COST = PRIMARY_TRANS'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_3 
          SET PRIMARY_TRANS_COST = (:a) / ( :b/ (WIDTH * DEPTH * HEIGHT * UPT))
          WHERE TRAY_TYPE = ''CARDBOARD'''; 
          EXECUTE IMMEDIATE V_SQL_CMD
          USING V_DOLLY_COST, V_DOLLY_VOLUME;  
          
           --JOINING TRAY DIMENSIONS FOR CALCULATION OF NUMBER OF LAYERS OF STACKING IN TRAYS

v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_prod_descr '; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_prod_descr 
  ( SELECT A.* ,
           B.TRAY_WIDTH ,
           B.TRAY_DEPTH ,
           B.TRAY_HEIGHT ,
           NULL ,
           NULL ,
           NULL ,
           NULL 
    FROM idssc_hist_read_uod.' || v_category || '_uod_prod_descr_3  A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_DIM_TRAY  B
            ON A.TRAY_TYPE = B.TRAY_TYPE )'; EXECUTE IMMEDIATE V_SQL_CMD;


v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr 
   SET FIT_WW = FLOOR(TRAY_WIDTH / WIDTH) * FLOOR(TRAY_DEPTH / DEPTH)'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr 
   SET FIT_WD = FLOOR(TRAY_WIDTH / DEPTH) * FLOOR(TRAY_DEPTH / WIDTH)'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr 
   SET FIT_WW = FLOOR(54.9 / WIDTH) * FLOOR(35.4 / DEPTH)
   WHERE TRAY_TYPE = ''CARDBOARD'''; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr 
   SET FIT_WD = FLOOR(54.9 / DEPTH) * FLOOR(35.4 / WIDTH)
   WHERE TRAY_TYPE = ''CARDBOARD'''; EXECUTE IMMEDIATE V_SQL_CMD;
   

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr 
   SET UNIT_LAYER = (CASE WHEN FIT_WW > FIT_WD THEN FIT_WW
   ELSE FIT_WD
   END)'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr 
   SET UNIT_LAYER =1 where unit_layer=0'; EXECUTE IMMEDIATE V_SQL_CMD;


v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_prod_descr 
   SET LAYERS = CEIL(UPT / UNIT_LAYER)'; EXECUTE IMMEDIATE V_SQL_CMD;


--Calculating the tray volume by supplier to calculate haulage rates
  
  v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TRAY_VOLUME_FINAL '; EXECUTE IMMEDIATE V_SQL_CMD;
  
  v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TRAY_VOLUME_FINAL 
  (
       SELECT substr(a.vendor_no,3,8),b.depot_corp_code,b.depot_code, SUM(a.PO_GOOD_RECEIPT_QTY) 
       FROM IDSSC_HIST.MAN_TRAY_VOLUME a left join 
       IDSSC_HIST.hist_depot_corp b on a.site_id=b.depot_corp_code
       GROUP BY substr(a.vendor_no,3,8),b.depot_corp_code, B.DEPOT_CODE)'; EXECUTE IMMEDIATE V_SQL_CMD;

  --MAPPING DEPOT TO THE HAULAGE DATA

v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_PRIMARY_RATES '; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_PRIMARY_RATES 
       (SELECT 
       B.BATCH_ID        ,
       B.INTERFACE_RUN_DATE_TIME               ,
       B.SUPPLIER_NUMBER   ,
       B.SUPPLIER_SITE              ,
       B.DEPOT_CODE2              ,
       B.TRANSPORT_UNIT      ,
       B.RATE_APPLICABLE_FROM       ,
       B.HAULIER_RATE             ,
       A.TRAY_VOLUME   ,
       B.SUPPLIER_RATE            ,
       B.BASE_FUEL_RATE        ,
       B.FUEL_SURCHARGE      ,
       B.USER_ID          ,
       B.DSTAMP          ,
       B.DIFFERENT_UNITS       ,
       B.RETENDERING_SUPPLIER_RATE            ,
       B.RETENDERING_HAULIER_RATE              ,
       B.RETENDERING_BASE_FUEL_RATE        ,
       B.RETENDERING_FUEL_SURCHARGE      ,
       B.PREVIOUS_BATCH_ID
       FROM idssc_hist_read_uod.' || v_category || '_uod_TRAY_VOLUME_FINAL  A LEFT JOIN 
       IDSSC_HIST.hist_PRIMARY_RATES B 
       ON A.SUPPLIER_NUMBER = B.SUPPLIER_NUMBER
       AND A.DEPOT = B.DEPOT_CODE2)'; EXECUTE IMMEDIATE V_SQL_CMD;

--SELECTING THE LATEST HAULAGE DATA
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_TEMP1 '; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_TEMP1 
  SELECT DISTINCT SUPPLIER_NUMBER ,
                  DEPOT_CODE ,
                  TRANSPORT_UNIT ,
                  HAULIER_RATE ,
                  TRAY_VOLUME ,
                  RATE_APPLICABLE_FROM ,
                  RANK() OVER ( PARTITION BY SUPPLIER_NUMBER ORDER BY RATE_APPLICABLE_FROM DESC  ) 
    FROM idssc_hist_read_uod.' || v_category || '_uod_PRIMARY_RATES ' ; EXECUTE IMMEDIATE V_SQL_CMD;
       

v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_TEMP1 
WHERE RANKA > 1'; EXECUTE IMMEDIATE V_SQL_CMD;


v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_TEMP1 
WHERE DEPOT_CODE IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;


--HAULAGE RATE AT SUPPLIER TRANSPORT UNIT LEVEL
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPPLIER '; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPPLIER 
  ( SELECT SUPPLIER_NUMBER ,
           TRANSPORT_UNIT ,
           SUM(HAULIER_RATE * TRAY_VOLUME) / SUM(TRAY_VOLUME) 
    FROM idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_TEMP1  
      GROUP BY SUPPLIER_NUMBER,TRANSPORT_UNIT )'; EXECUTE IMMEDIATE V_SQL_CMD;
         
         
--HAULAGE RATE AT TRANSPORT LEVEL
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_OVERALL '; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_OVERALL 
  ( SELECT TRANSPORT_UNIT ,
           SUM(HAULIER_RATE * TRAY_VOLUME) / SUM(TRAY_VOLUME) 
    FROM idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_TEMP1  
      GROUP BY TRANSPORT_UNIT )'; EXECUTE IMMEDIATE V_SQL_CMD;
         

--CALCULATING THE DOLLY AND PALLET RATE
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPP_TRANS '; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPP_TRANS 
  ( SELECT DISTINCT SUPPLIER_ID ,
                    NULL ,
                    NULL 
    FROM idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPPLIER   )'; EXECUTE IMMEDIATE V_SQL_CMD;
    

v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPP_TRANS  
USING (SELECT DISTINCT * FROM idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPPLIER ) ' || v_category || '_uod_HAULAGE_SUPPLIER  
ON ( ' || v_category || '_uod_HAULAGE_SUPPLIER .SUPPLIER_ID = idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPP_TRANS .SUPPLIER_ID
  AND ' || v_category || '_uod_HAULAGE_SUPPLIER .TRANSPORT_UNIT = ''DOLLY'' )
WHEN MATCHED THEN UPDATE SET DOLLY_RATE = ' || v_category || '_uod_HAULAGE_SUPPLIER .HAULAGE_RATE'; EXECUTE IMMEDIATE V_SQL_CMD;


v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPP_TRANS 
USING (SELECT * FROM idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPPLIER ) ' || v_category || '_uod_HAULAGE_SUPPLIER  
ON ( ' || v_category || '_uod_HAULAGE_SUPPLIER .SUPPLIER_ID = idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPP_TRANS .SUPPLIER_ID
  AND ' || v_category || '_uod_HAULAGE_SUPPLIER .TRANSPORT_UNIT = ''PALLET'' )
WHEN MATCHED THEN UPDATE SET PALLET_RATE = ' || v_category || '_uod_HAULAGE_SUPPLIER .HAULAGE_RATE'; EXECUTE IMMEDIATE V_SQL_CMD;
-------------------------------------------------

--TABLE FOR NUMBER OF TRAYS PER TRANSPORT UNIT
v_sql_cmd := ' TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TRAYS_HAULIER '; EXECUTE IMMEDIATE V_SQL_CMD;
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_TRAYS_HAULIER        Values(''HALF_TRAY_5'',               52           )'; EXECUTE IMMEDIATE V_SQL_CMD;
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_TRAYS_HAULIER        Values(''HALF_TRAY_7'',               36           )'; EXECUTE IMMEDIATE V_SQL_CMD;
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_TRAYS_HAULIER        Values(''HALF_TRAY_2'',               88           )'; EXECUTE IMMEDIATE V_SQL_CMD;
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_TRAYS_HAULIER        Values(''METRIC_TRAY_2'',          44           )'; EXECUTE IMMEDIATE V_SQL_CMD;
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_TRAYS_HAULIER        Values(''METRIC_TRAY_5'',          26           )'; EXECUTE IMMEDIATE V_SQL_CMD;
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_TRAYS_HAULIER        Values(''METRIC_TRAY_7'',          18           )'; EXECUTE IMMEDIATE V_SQL_CMD;
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_TRAYS_HAULIER        Values(''BROWN_TRAY'',              18           )'; EXECUTE IMMEDIATE V_SQL_CMD;




--ADDING HAULAGE DETAILS TO DESCRIPTION TABLE
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
  ( SELECT A.* ,
           B.Source_id ,
           C.DOLLY_RATE ,
           C.PALLET_RATE ,
           NULL ,
           D.TRAY_PER_HAULIER ,
          NULL,
                 NULL,
                 NULL
    FROM idssc_hist_read_uod.' || v_category || '_uod_prod_descr A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_upc_vendor B
            ON A.UPC = B.upc
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_SUPP_TRANS C
            ON B.Source_id = C.SUPPLIER_ID
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_TRAYS_HAULIER D
            ON A.TRAY_TYPE = D.TRAY_TYPE )'; EXECUTE IMMEDIATE V_SQL_CMD;


v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all 
USING (SELECT DISTINCT * FROM idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_OVERALL) ' || v_category || '_uod_HAULAGE_OVERALL 
ON ( ' || v_category || '_uod_HAULAGE_OVERALL.TRANSPORT_UNIT = ''DOLLY'')
WHEN MATCHED THEN UPDATE SET DOLLY_RATE = ' || v_category || '_uod_HAULAGE_OVERALL.HAULAGE_RATE
WHERE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all.DOLLY_RATE IS NULL '; EXECUTE IMMEDIATE V_SQL_CMD;


v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all 
USING (SELECT * FROM idssc_hist_read_uod.' || v_category || '_uod_HAULAGE_OVERALL) ' || v_category || '_uod_HAULAGE_OVERALL 
ON ( ' || v_category || '_uod_HAULAGE_OVERALL.TRANSPORT_UNIT = ''PALLET'')
  WHEN MATCHED THEN UPDATE SET PALLET_RATE = ' || v_category || '_uod_HAULAGE_OVERALL.HAULAGE_RATE 
  WHERE  idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all.PALLET_RATE IS NULL '; EXECUTE IMMEDIATE V_SQL_CMD;

--SELECT THE REQUIRED HAULAGE RATE BASED ON THE TRAY TYPE

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
   SET HAULIER_RATE = DOLLY_RATE
   WHERE TRAY_TYPE <> ''CARDBOARD'''; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
   SET HAULIER_RATE = PALLET_RATE
   WHERE TRAY_TYPE = ''CARDBOARD'''; EXECUTE IMMEDIATE V_SQL_CMD;


--CALCULATING THE NUMBER OF CARDBOARD IN PALLET

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
   SET TRAYS_PER_HAULIER = FLOOR((FLOOR((:a * :b) / (WIDTH * DEPTH)) * FLOOR(:c / HEIGHT)) / UPT)
   WHERE TRAY_TYPE = ''CARDBOARD'''; 
   EXECUTE IMMEDIATE V_SQL_CMD
   USING v_pallet_width,v_pallet_depth,v_pallet_height;

   --CALCULATING THE FINAL SUPPLIER SPECIFIC TRANSPORT COST FOR ALL UPC BASED ON UPT AND TRAY TYPE

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
   SET RATE_PER_TRAY = HAULIER_RATE / TRAYS_PER_HAULIER'; EXECUTE IMMEDIATE V_SQL_CMD;
   
   --CALCULATING THE TRANSPORT COST CORRESPONDING TO THE CURRENT UPT-TRAY FOR A UPC
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_CURR_trans'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_CURR_trans
  ( SELECT UPC ,
           RATE_PER_TRAY 
    FROM idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
     WHERE TRAY_TYPE = CURRENT_TRAY_TYPE
             AND UPT = CURRENT_UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;


v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all 
USING (SELECT * FROM idssc_hist_read_uod.' || v_category || '_uod_CURR_trans) ' || v_category || '_uod_CURR_trans 
ON ( idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all.UPC = ' || v_category || '_uod_CURR_trans.UPC )
WHEN MATCHED THEN UPDATE SET TRANS = ' || v_category || '_uod_CURR_trans.COST'; EXECUTE IMMEDIATE V_SQL_CMD;

--CALCULATING THE TRAY HIRE COST CORRESPONDING TO THE CURRENT UPT-TRAY FOR A UPC
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_CURR_HIRE'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_CURR_HIRE
  ( SELECT UPC ,
           TRAY_HIRE 
    FROM idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all 
     WHERE TRAY_TYPE = CURRENT_TRAY_TYPE
             AND UPT = CURRENT_UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;


v_sql_cmd := 'MERGE INTO idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
USING (SELECT * FROM idssc_hist_read_uod.' || v_category || '_uod_CURR_HIRE) ' || v_category || '_uod_CURR_HIRE 
ON ( idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all.UPC = ' || v_category || '_uod_CURR_HIRE.UPC )
WHEN MATCHED THEN UPDATE SET HIRE = ' || v_category || '_uod_CURR_HIRE.COST'; EXECUTE IMMEDIATE V_SQL_CMD;

--CALCULATING THE EX WORKS COST FOR A UPC

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
   SET EX_WORKS = CP - (TRANS / CURRENT_UPT) - (HIRE / CURRENT_UPT)'; EXECUTE IMMEDIATE V_SQL_CMD;
         
--CALCULATION OF COST FOR ALL UPT-TRAY COMBINATION FOR A UPC

v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
   SET PRODUCT_COST = (RATE_PER_TRAY / UPT) + (TRAY_HIRE / UPT) + EX_WORKS'; EXECUTE IMMEDIATE V_SQL_CMD;

--REMOVING UPCS WITH MISSING DATA
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
       WHERE CURRENT_TRAY_TYPE IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
       WHERE CURRENT_UPT IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;
       
                   v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
       WHERE UPT > 72'; EXECUTE IMMEDIATE V_SQL_CMD;
       
        v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
       WHERE current_UPT =1'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
       WHERE CP IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
       WHERE CP<=0'; EXECUTE IMMEDIATE V_SQL_CMD;
       
       
                   v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
       WHERE TRAY_TYPE = ''BROWN_TRAY'' AND CURRENT_TRAY_TYPE <> ''BROWN_TRAY'''; EXECUTE IMMEDIATE V_SQL_CMD;
	   
	      v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
       WHERE CURRENT_TRAY_TYPE = ''BROWN_TRAY'' AND TRAY_TYPE <> ''BROWN_TRAY'''; EXECUTE IMMEDIATE V_SQL_CMD;
	   
	   v_sql_cmd := 'DELETE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
       WHERE TRAY_TYPE = ''HALF_TRAY_5'''; EXECUTE IMMEDIATE V_SQL_CMD;
	   
	   v_sql_cmd := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all
   SET CURRENT_TRAY_TYPE = ''HALF_TRAY_7'' WHERE CURRENT_TRAY_TYPE = ''HALF_TRAY_5'''; EXECUTE IMMEDIATE V_SQL_CMD;
  
   v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_MAX_LIFE'; EXECUTE IMMEDIATE V_SQL_CMD;
   
   v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_MAX_LIFE
  ( SELECT 
    UPC       ,
       MAX(LIFE)
    FROM idssc_hist_read_uod.' || v_category || '_uod_PRODUCTLIFE GROUP BY UPC)'; EXECUTE IMMEDIATE V_SQL_CMD;
   
   
  --FINAL TABLE FOR KPI CALCULATION
  v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_LATEST'; EXECUTE IMMEDIATE V_SQL_CMD;
  
  v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_prod_descr_LATEST
  ( SELECT 
    UPC       ,
       UPT    ,
       tray_type     ,
       SP     ,
       CP     ,
       Current_UPT   ,
       Rate_per_tray ,
       Tray_hire     ,
       Depot_RHD     ,
       Store_rec     ,
       Store_handling       ,
       Tray_lending  ,
       ex_works      ,
       is_srp ,
       SRP_total     ,
       current_tray_type    ,
       product_cost 

    FROM idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_all WHERE UPC IN 
	(SELECT DISTINCT UPC FROM idssc_hist_read_uod.' || v_category || '_uod_MAX_LIFE WHERE max_LIFE < 42))'; EXECUTE IMMEDIATE V_SQL_CMD;
  
  --QC OF PRODUCT DESC TABLE
v_sql_cmd := 'select count(distinct UPC) from idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_LATEST';
EXECUTE IMMEDIATE V_SQL_CMD INTO V_C1;

v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
VALUES(''PRODUCT DESC TABLE'',''TABLE CREATED WITH ' || V_C1 || ' UPCS'',SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD;
COMMIT;


   v_sql_cmd := 'select count(*) from (SELECT DISTINCT UPC,UPT,TRAY_TYPE, COUNT(*) FROM idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_LATEST
GROUP BY UPC,UPT,TRAY_TYPE HAVING COUNT(*)>1)';
EXECUTE IMMEDIATE V_SQL_CMD INTO V_C1;

  v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
VALUES(''PRODUCT DESC'',(case when (:a>0) then ''DUPLICATES RECORDS'' else ''CORRECT RECORDS'' end),SYSTIMESTAMP)';
EXECUTE IMMEDIATE V_SQL_CMD USING V_C1;
COMMIT;

   
begin
if (v_c1>0) then raise EXC_PROD_DESC; end if;
end;
  
  v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_prod_descr_current'; EXECUTE IMMEDIATE V_SQL_CMD;
  
  v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_prod_descr_current
  ( SELECT * FROM idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_LATEST WHERE 
  UPT = CURRENT_UPT AND TRAY_TYPE = CURRENT_TRAY_TYPE)'; EXECUTE IMMEDIATE V_SQL_CMD;
  
     --repository with time stamp

    
    EXCEPTION
    WHEN EXC_PROD_DESC THEN
    RAISE_APPLICATION_ERROR(-20099,'ERROR IN PRODUCT DESCRIPTION',TRUE);
    RAISE;
END;




create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_APPEND_WEEKLY
(
  V_MYDYNAMICCOLUMN IN VARCHAR2 DEFAULT NULL ,
  V_COUNT IN NUMBER DEFAULT NULL,
  V_CATEGORY IN VARCHAR2
)
AS 
 
BEGIN
EXECUTE IMMEDIATE 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_DAILY_DEMAND
  ( SELECT /*+PARALLEL(4)*/ A.UPC ,
           a.STORE ,
           A.DEPOT ,' || 
           V_MYDYNAMICCOLUMN || ' * PROFILE AS ABC  ,
           (( ' ||V_COUNT || '  - 1) * 7 + A.DAY_NUM - 1) + start_dt,
           A.STG ,
       MODEL_CODE ,
       c1 ,
       c2 ,
       c3 ,
       SP ,
       CP ,
       MARGIN ,
       WASTE_PCT ,
       WASTE_CONSTRAINT ,
       LAUNCH_DATE ,
       excess_flag ,
       LIFE ,
       B.DAY_SCHEDULE ,
       C.RCPT ,
       D.RCPT, NULL
   FROM idssc_hist_read_uod.' || v_category || '_uod_WEEKLY_DEMAND A
   LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_TEMP1 B
       ON A.store = B.STORECODE
       AND A.DAY_NUM = B.DAY_NUM
   LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_TEMP2 C
       ON A.UPC = C.PRODUCT_ID
       AND A.DEPOT = SUBSTR(C.SINK_ID, 8, 5)
       AND A.DAY_NUM = C.DAY_NUM
   LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_TEMP3 D
       ON A.UPC = D.PRODUCT_ID
       AND A.store = CAST(SUBSTR(D.SINK_ID, 2, 8) AS NUMBER(10,0))
       AND A.DAY_NUM = D.DAY_NUM ) ';
       
       COMMIT;
END;




create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_APPEND_TRANSFORM
(
	V_CATEGORY IN VARCHAR2
) 
AS
   V_COUNT NUMBER(10,0);
   V_COL NVARCHAR2(20);
   V_DATEFF DATE;
   V_DATEF DATE;
   V_SQL_CMD VARCHAR2(10000);
 
BEGIN
   V_COUNT := 1 ;
   V_SQL_CMD := 'SELECT min(START_dt) FROM idssc_hist_read_uod.' || v_category || '_uod_WEEKLY_DEMAND';
   EXECUTE IMMEDIATE V_SQL_CMD INTO V_DATEFF;
   
   WHILE V_COUNT < 32
   LOOP 
      
      BEGIN
         V_DATEF :=  ((V_COUNT - 1) * 7)+ V_DATEFF ;
         EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP1 ';
         V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP1
           ( SELECT * 
             FROM idssc_hist_read_uod.uod_STORE_SCHEDULE_FINAL 
              WHERE BEGIN_DATE <= :a
                      AND END_DATE > :b )';
		 EXECUTE IMMEDIATE V_SQL_CMD USING V_DATEF, V_DATEF;
         EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP2 ';
         V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP2
           ( SELECT * 
             FROM idssc_hist_read_uod.' || v_category || '_uod_NTW_SCHD_FINAL 
              WHERE EFFECTIVE_BEGIN_DT <= :a
                      AND END_DATE > :b
                      AND SINK_ID LIKE ''M%'' )';
		EXECUTE IMMEDIATE V_SQL_CMD USING V_DATEF, V_DATEF;
         EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP3 ';
         V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP3
           ( SELECT * 
             FROM idssc_hist_read_uod.' || v_category || '_uod_NTW_SCHD_FINAL 
              WHERE EFFECTIVE_BEGIN_DT <= :a
                      AND END_DATE > :b
                      AND SINK_ID LIKE ''S%'' )';
		EXECUTE IMMEDIATE V_SQL_CMD USING V_DATEF, V_DATEF;
         V_COL := 'UNITS_W' || CAST(V_COUNT AS NVARCHAR2) ;
         idssc_hist_read_uod.uod_PROC_APPEND_WEEKLY(V_COL, V_COUNT, V_CATEGORY);
         V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
         VALUES(''DAILY DEMAND'',''WEEK ' || V_COUNT || ' DONE'',SYSTIMESTAMP)'; EXECUTE IMMEDIATE V_SQL_CMD;
         V_COUNT := V_COUNT + 1 ;
      END;
   END LOOP;
END;




create or replace
FUNCTION idssc_hist_read_uod.uod_FUNCTION_TARGET_INVEN_CAL
(
  V_STORECODE IN float,
  V_UPC IN float,
  V_DATE IN date,
  V_MODEL IN float,
  V_MODEL1 IN float,
  V_CATEGORY IN VARCHAR2
)
RETURN FLOAT
AS
   -- EXTRA DAYS OF COVER IS GENERALLY AN FRACTION , EG 3.5, RET STORES EXTRA DAYS OF COVER FOR ITS INTEGRAL PART
   --RET1 STORES COVER FOR DECIMAL PART
   V_RET FLOAT(53);
   V_RET1 FLOAT(53);
   V_SQL_CMD VARCHAR2(10000);
   V_FDATE1 DATE := V_DATE + V_MODEL - 1;
   V_FDATE2 DATE := V_DATE + V_MODEL;

BEGIN
   V_SQL_CMD := 'SELECT SUM(DEMAND) 
     FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_DEMAND P
    WHERE P.UPC = :a
            AND P.STORECODE = :b
            AND FDATE BETWEEN :c AND :d';
	EXECUTE IMMEDIATE V_SQL_CMD INTO V_RET USING V_UPC, V_STORECODE, V_DATE, V_FDATE1;
   
   IF V_MODEL1 <> 0 THEN
   
   BEGIN
      V_SQL_CMD := 'SELECT trunc(SUM(DEMAND) * :a,2)
        FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_DEMAND P
       WHERE P.UPC = :b
               AND P.STORECODE = :c
               AND FDATE = :d';
		EXECUTE IMMEDIATE V_SQL_CMD INTO V_RET1 USING V_MODEL1, v_upc, V_STORECODE, V_FDATE2;
   END;
   END IF;
   V_RET := COALESCE(V_RET, 0) + COALESCE(V_RET1, 0) ;
   RETURN V_RET;
END;




create or replace
FUNCTION idssc_hist_read_uod.uod_FUN_DEMAND_SHELF_LIFE_CAL (
  V_STORECODE IN float,
  V_UPC IN float,
  V_DATE IN date,
  V_LIFE IN number,
  V_CATEGORY IN VARCHAR2
)
RETURN FLOAT
AS
   V_RET FLOAT(53);
   V_SQL_CMD VARCHAR2(1000);
	V_FDATE DATE := V_DATE + V_LIFE - 1;
BEGIN
   V_SQL_CMD := 'SELECT SUM(DEMAND)
     FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_DEMAND P
    WHERE P.UPC = :a
            AND P.STORECODE = :b
            AND FDATE BETWEEN :c AND :d';
	EXECUTE IMMEDIATE V_SQL_CMD INTO V_RET USING V_UPC, V_STORECODE, V_DATE, V_FDATE;
   IF ( V_RET IS NULL ) THEN
      V_RET := 0 ;
   END IF;
   RETURN V_RET;
END;




create or replace
FUNCTION IDSSC_HIST_READ_UOD.uod_FUNCTION_ORDERS_CAL
(
  IV_ON_HAND IN number,
  V_DEMAND IN float,
  V_MARGIN IN float,
  V_UPT IN number,
  V_DATE IN DATE,
  V_CP IN float,
  V_SP IN float,
  V_LAUNCH_DATE IN date,
  IV_WC IN float,
  V_DEMAND_L IN float,
  V_TARGET_INVENTORY IN float,
  V_EXCESS IN varchar2
)
RETURN NUMBER
AS
   V_ON_HAND FLOAT(53) := IV_ON_HAND;
   V_WC FLOAT(53) := IV_WC;
   V_EXTRA FLOAT(53);
   V_FLAG NUMBER(10,0);
   V_N3 NUMBER(10,0);
   V_N1 NUMBER(10,0);
   V_N2 NUMBER(10,0);
   V_WASTE FLOAT(53);
   V_PROFIT FLOAT(53);
   V_DAYS FLOAT;

BEGIN
-- ORDERING TO PREVENT LOST SALES
-- ORDER TRAYS IF ON_HAND < DEMAND < TARGET INVENTORY TO PREVENT LOST SALES. 
   IF V_DEMAND > V_ON_HAND
     AND V_ON_HAND < (V_TARGET_INVENTORY-0.01)
     AND V_DEMAND <= (V_TARGET_INVENTORY-0.01) THEN
   
   BEGIN
      V_N1 := FLOOR((V_DEMAND - V_ON_HAND) / V_UPT) ;
      V_ON_HAND := V_ON_HAND + (V_N1 * V_UPT) ;
   END;
   END IF;
-- ORDER TRAYS IF ON_HAND < TARGET INVENTORY < DEMAND TILL YOU REACH TARGET INVENTORY, NOT EXCEEDING IT COVERING PART OF LOST SALES
   IF V_DEMAND > V_ON_HAND
     AND V_ON_HAND < V_TARGET_INVENTORY
     AND V_DEMAND > V_TARGET_INVENTORY THEN
   
   BEGIN
      V_N1 := FLOOR((V_TARGET_INVENTORY - V_ON_HAND) / V_UPT) ;
      V_ON_HAND := V_ON_HAND + (V_N1 * V_UPT) ;
   END;
   END IF;
-- V_N1 INDICATES ANY TRAYS ORDERED IN ABOVE SCENARIOS TO COVER LOST SALES PARTIALLY
   IF ( V_N1 IS NULL ) THEN
   
   BEGIN
      V_N1 := 0 ;
   END;
   END IF;
   
 -- EITHER YOUR DEMAND IS FULFILLED OR YOU HAVE EXCEEDED TARGET INVENTORY STOP ORDERING FOR LOST SALES 
 -- WE WILL ORDER TRAYS IF THEY ARE PROFITABLE OR EXCEEDING TARGET INVENTORY IS ALLOWED 
   IF V_TARGET_INVENTORY <= V_ON_HAND
     OR V_DEMAND <= V_ON_HAND THEN
   
   BEGIN
      V_N2 := 0 ;
   END;
   ELSE
  -- ORDER 1 EXTRA TRAY IF ITS PROFITABLE / CAN BE SOLD OVER ITS SHELF LIFE ( DUE TO V_N1 WE CAN BE AT MOST 1 TRAY AWAY TO PREVENT ALL LOST SALES) 
   BEGIN
      V_EXTRA := V_DEMAND_L - V_ON_HAND ;
      IF V_EXTRA >= V_UPT THEN
   -- ORDER 1 TRAY IF IT CAN BE SOLD COMPLETELY , I.E. NO WASTAGE   
      BEGIN
         V_N2 := 1 ;
      END;
      ELSE
   --CALCULATE WASTED UNITS IF WE SEND EXTRA TRAY AND CALCULATE PROFITABILITY OF THE TRAY  
      BEGIN
         V_WASTE := V_UPT - V_EXTRA ;
         V_PROFIT := V_EXTRA * V_MARGIN * V_SP - V_WASTE * V_CP ;
         IF V_PROFIT > 0 THEN
    --IF TRAY IS PROFITABLE SEND IT ELSE CHECK IF UPC IS NEWLY LAUNCHED   
         BEGIN
            V_N2 := 1 ;
         END;
         ELSE
         
         BEGIN
            IF V_LAUNCH_DATE IS NOT NULL THEN
        -- IF UPC IS NEWLY LAUNCHED SEND 1 TRAY  ELSE CHECK IF IT IS NOT BREACHING WASTE CONSTRAINT  
            BEGIN
               V_DAYS := V_DATE - V_LAUNCH_DATE ;
               IF V_DAYS <= 21 THEN
               
               BEGIN
                  V_N2 := 1 ;
               END;
               ELSE
               
               BEGIN
                  IF V_WC IS NULL THEN
                  
                  BEGIN
                     V_WC := 0 ;-- DEFAULT WASTE CONSTRAINT
                  END;
                  END IF;
                  IF V_WASTE <= V_WC * V_UPT THEN
                  --SENDING ONE TRAY IF WASTE CONSTRAINT IS NOT BREACHED
                  BEGIN
                     V_N2 := 1 ;
                  END;
                  ELSE
                 
                  BEGIN
                     V_N2 := 0 ;
                  END;
                  END IF;
               END;
               END IF;
            END;
            ELSE
            
            BEGIN
               IF V_WC IS NULL THEN
               
               BEGIN
                  V_WC := 0 ;
               END;
               END IF;
               IF V_WASTE <= V_WC * V_UPT THEN
               
               BEGIN
                  V_N2 := 1 ;
               END;
               ELSE
               
               BEGIN
                  V_N2 := 0 ;
               END;
               END IF;
            END;
            END IF;
         END;
         END IF;
      END;
      END IF;
   END;
   END IF;
   
   --AT THIS POINT WE HAVE ORDERED TO PREVENT LOST SALES IF TRAYS ARE PROFITABLE
   IF ( V_N2 IS NULL ) THEN
   
   BEGIN
      V_N2 := 0 ;
   END;
   END IF;
   --UPDATED ON HAND STOCK INCLUDING ORDERS TO PREVENT LOST SALES
   V_ON_HAND := V_ON_HAND + (V_N2 * V_UPT) ;
   
   --ORDERING TO ENSURE TARGET INVENTORY IF WE HAVE NOT EXCEEDED TARGET INVENTORY YET
   IF V_TARGET_INVENTORY > V_ON_HAND THEN
   
   BEGIN
      V_N3 := FLOOR((V_TARGET_INVENTORY - V_ON_HAND) / V_UPT) ;
      V_ON_HAND := V_ON_HAND + (V_N3 * V_UPT) ;
                  -- EXCEEDING TARGET INVENTORY BY 1 TRAY IF IT IS ALLOWED, EXCESS FLAG SET TO 'Y' AND IT CAN BE SOLD OVER ITS SHELF LIFE
      IF V_EXCESS = 'Y'
        AND V_TARGET_INVENTORY > V_ON_HAND THEN
      
      BEGIN
         IF V_DEMAND_L - V_ON_HAND >= V_UPT THEN
         
         BEGIN
            V_FLAG := 1 ;
         END;
         ELSE
         
         BEGIN
            V_FLAG := 0 ;
         END;
         END IF;
      END;
      ELSE
      
      BEGIN
         V_FLAG := 0 ;
      END;
      END IF;
   END;
   ELSE
   
   BEGIN
      V_N3 := 0 ;
      V_FLAG := 0 ;
   END;
   END IF;
   -- RETURNING TOTAL TRAYS TO BE ORDERED
   V_FLAG := V_FLAG + V_N3 + V_N2 + V_N1 ;
   RETURN V_FLAG;
END;




create or replace
FUNCTION idssc_hist_read_uod.uod_FUNCTION_EOD_CAL
(
  v_upc IN float,
  v_storecode IN float,
  v_fdate IN date,
  v_upt IN number,
  v_life IN number,
  V_CATEGORY IN VARCHAR2
)
RETURN FLOAT
AS
   v_waste FLOAT;
   V_SQL_CMD VARCHAR2(10000);
   V_DATE DATE := V_FDATE - V_LIFE + 1;

BEGIN
	
   V_SQL_CMD := 'SELECT waste
    FROM idssc_hist_read_uod.' || v_category || '_uod_daily_store_orders
    WHERE fdate =   :a
           AND upc = :b
           AND storecode = :c
             AND upt = :d
            ';
                EXECUTE IMMEDIATE V_SQL_CMD INTO V_WASTE USING v_date, v_upc, v_storecode, v_upt;
IF  v_waste IS NULL  THEN
  v_waste := 0 ;
   END IF;  
      
   RETURN v_waste;
END;




create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_ORDER_PLAN_GENE_DAY1
(v_date date,
V_CATEGORY VARCHAR2)
AS
V_SQL_CMD clob;
BEGIN
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_qc_inter_tables
values(''ORDER PLAN'',''STARTING'',SYSTIMESTAMP)';
execute immediate v_sql_cmd;

--SUBSET DATA FOR A DAY AND CALCULATE TARGET INVENTORY
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_1';
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_1
SELECT /*+PARALLEL (6) */ A.UPC,A.STORECODE,A.DEPOT,A.DEMAND,A.FDATE,A.STG,A.MODEL_CODE,A.C1,A.C2,A.C3,A.SP,A.CP,A.MARGIN,
A.WASTE_PCT,A.WASTE_CONSTRAINT,A.LAUNCH_DATE,A.EXCESS_FLAG,A.LIFE,A.FLAG1,A.FLAG2, round(round(CASE MODEL_CODE
WHEN ''COM'' THEN greatest ( (C3*DEMAND) , (idssc_hist_read_uod.UOD_FUNCTION_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2, :a)))
WHEN ''MUL'' THEN (C3*DEMAND)
WHEN ''DOS'' THEN idssc_hist_read_uod.uod_FUNCTION_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2, :b)
ELSE 0
END,2 ) * COALESCE (1 + round(C.TOTAL_UPLIFT,2),1),2) AS TARGET_INVENTORY ,
idssc_hist_read_uod.UOD_FUN_DEMAND_SHELF_LIFE_CAL( STORECODE,A.UPC,  FDATE,LIFE, :c) AS DEMAND_L
FROM idssc_hist_read_uod.' || v_category || '_uod_daily_demand A 
LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_nde  C
ON A.UPC = C.PRODUCT_ID  AND A.STORECODE= SUBSTR (C.LOCATION_ID, 2, 8) AND A.FDATE = C.uplift_dt
WHERE A.FDATE = :d'; 
EXECUTE IMMEDIATE V_SQL_CMD USING V_CATEGORY, V_CATEGORY, V_CATEGORY, v_date;

  
--CALCULATE ORDERS AND JOIN PREVIOUS DAY EOD STOCK FOR EACH UPC
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_temp';
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_temp   
select /*+PARALLEL(6)*/ Z.* , C.UPT , 0 as on_hand, 
CASE WHEN (COALESCE (FLAG1,1) + COALESCE (FLAG2,1)) = 2 
THEN idssc_hist_read_uod.uod_FUNCTION_ORDERS_CAL ( 0 , DEMAND , MARGIN , C . UPT , fdate , CP , SP , 
LAUNCH_DATE , WASTE_CONSTRAINT , DEMAND_L , TARGET_INVENTORY , EXCESS_FLAG ) ELSE 0  END AS ORDERS, null as eod, Z.LIFE AS LIFE_W
FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_1 Z LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC C ON Z.UPC = C.UPC';
EXECUTE IMMEDIATE V_SQL_CMD;


v_sql_cmd := 'update /*+parallel(6)*/ idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_TEMP
set eod = (ORDERS*UPT)*(1-COALESCE(WASTE_PCT, 0)) - COALESCE(DEMAND,0)';
execute immediate v_sql_cmd;

v_sql_cmd := 'update /*+parallel(6)*/ idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_TEMP
SET EOD = CASE WHEN EOD<0 THEN 0 ELSE EOD END';
execute immediate v_sql_cmd;

 
 --CALCULATING SOLD UNITS, WASTE AND STORING IT IN MASTER TABLE   
 v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_daily_store_orders
(SELECT /*+PARALLEL(4)*/ UPC, STORECODE,DEPOT, DEMAND, FDATE, DEMAND_L, ON_HAND, ORDERS, UPT,
CASE WHEN ORDERS = 0 THEN 0 ELSE (CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND_L) > 0 THEN ((ORDERS*UPT)+ON_HAND-DEMAND_L) ELSE 0 END) END AS WASTE, 1 AS WASTE_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN 0 ELSE 1 END AS AVAILABILITY_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN (ORDERS*UPT+ON_HAND) ELSE DEMAND END AS SOLD_UNITS, life_w,life FROM 
idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_temp)';
execute immediate v_sql_cmd;

v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_qc_inter_tables
values(''ORDER PLAN'','' ' || V_DATE || ' DONE!'',SYSTIMESTAMP)';
execute immediate v_sql_cmd;

END;




create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_ORDER_PLAN_GENE
(v_date date,
V_CATEGORY VARCHAR2)
AS
V_SQL_CMD clob;
BEGIN


--SUBSET DATA FOR A DAY AND CALCULATE TARGET INVENTORY
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_1';
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_1
SELECT /*+PARALLEL (6) */ A.UPC,A.STORECODE,A.DEPOT,A.DEMAND,A.FDATE,A.STG,A.MODEL_CODE,A.C1,A.C2,A.C3,A.SP,A.CP,A.MARGIN,
A.WASTE_PCT,A.WASTE_CONSTRAINT,A.LAUNCH_DATE,A.EXCESS_FLAG,A.LIFE,A.FLAG1,A.FLAG2, round(round(CASE MODEL_CODE
WHEN ''COM'' THEN greatest ( (C3*DEMAND) , (idssc_hist_read_uod.UOD_FUNCTION_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2, :a)))
WHEN ''MUL'' THEN C3*DEMAND
WHEN ''DOS'' THEN idssc_hist_read_uod.uod_FUNCTION_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2, :b)
ELSE 0
END,2 ) * COALESCE (1 + round(C.TOTAL_UPLIFT,2),1),2) AS TARGET_INVENTORY ,
idssc_hist_read_uod.UOD_FUN_DEMAND_SHELF_LIFE_CAL( STORECODE,A.UPC,  FDATE,LIFE, :c) AS DEMAND_L
FROM idssc_hist_read_uod.' || v_category || '_uod_daily_demand A 
LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_nde  C
ON A.UPC = C.PRODUCT_ID  AND A.STORECODE= SUBSTR (C.LOCATION_ID, 2, 8) AND A.FDATE = C.uplift_dt
WHERE A.FDATE = :d'; 
EXECUTE IMMEDIATE V_SQL_CMD USING V_CATEGORY, V_CATEGORY, V_CATEGORY, v_date;

--CALCULATE ORDERS AND JOIN PREVIOUS DAY EOD STOCK FOR EACH UPC


v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_TEMP     
select /*+PARALLEL(4)*/ Z.* , D.UPT , COALESCE(D.eod, 0) as on_hand, 
CASE WHEN (COALESCE (z.FLAG1,1) + COALESCE (z.FLAG2,1)) = 2 
THEN idssc_hist_read_uod.uod_FUNCTION_ORDERS_CAL ( COALESCE ( D.eod , 0 ) , z.DEMAND , z.MARGIN , D.UPT , z.fdate , z.CP , z.SP , 
z.LAUNCH_DATE , z.WASTE_CONSTRAINT , z.DEMAND_L , z.TARGET_INVENTORY , z.EXCESS_FLAG ) ELSE 0  END AS ORDERS, null as eod, d.LIFE_w AS LIFE_W
FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_1 Z 
LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_TEMP D ON Z.UPC = D.UPC AND Z.STORECODE = D.STORECODE AND Z.FDATE =  (1 + D.FDATE)';
EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_TEMP where fdate = :a-1';
EXECUTE IMMEDIATE V_SQL_CMD USING V_DATE;


v_sql_cmd := 'update /*+PARALLEL(4)*/ idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_TEMP
set eod = ((ON_HAND + (ORDERS * UPT)) * (1 - COALESCE(WASTE_PCT, 0)) - COALESCE(DEMAND,0)- COALESCE(idssc_hist_read_uod.UOD_FUNCTION_EOD_CAL(UPC,STORECODE,FDATE,UPT,LIFE_w,:a),0))';
execute immediate v_sql_cmd USING v_category;

v_sql_cmd := 'update idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_TEMP
set life_w = life where orders<>0';
EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'update /*+PARALLEL(4)*/ idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_TEMP
set eod = case when eod<0 then 0 else eod end';
execute immediate v_sql_cmd;

     
v_sql_cmd := 'UPDATE /*+PARALLEL(4)*/ idssc_hist_read_uod.' || v_category || '_uod_daily_store_orders
SET WASTE_FLAG=0 WHERE FDATE = :a-life_w+1';
execute immediate v_sql_cmd using v_date;

 
 --CALCULATING SOLD UNITS, WASTE AND STORING IT IN MASTER TABLE   
 v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_daily_store_orders
(SELECT /*+PARALLEL(4)*/ UPC, STORECODE,DEPOT, DEMAND, FDATE, DEMAND_L, ON_HAND, ORDERS, UPT,
CASE WHEN ORDERS = 0 THEN 0 ELSE (CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND_L) > 0 THEN ((ORDERS*UPT)+ON_HAND-DEMAND_L) ELSE 0 END) END AS WASTE, 1 AS WASTE_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN 0 ELSE 1 END AS AVAILABILITY_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN (ORDERS*UPT+ON_HAND) ELSE DEMAND END AS SOLD_UNITS, life_w,life FROM 
idssc_hist_read_uod.' || v_category || '_uod_ORDER_PLAN_TEMP)';
execute immediate v_sql_cmd;


v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_qc_inter_tables
values(''ORDER PLAN'','' ' || V_DATE || ' DONE!'',SYSTIMESTAMP)';
execute immediate v_sql_cmd;

commit;

END;




create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_ORDER_PLAN_GENE_ALL
( V_DATE_START IN DATE, V_DATE_END IN DATE, V_CATEGORY IN VARCHAR2)
AS
V_DATE DATE;
V_SQL_CMD VARCHAR2(10000);
BEGIN

V_DATE :=  V_DATE_START+1;
   WHILE V_DATE < V_DATE_END+1
   LOOP 
      
      BEGIN
         idssc_hist_read_uod.uod_PROC_ORDER_PLAN_GENE(V_DATE, V_CATEGORY);
         V_DATE := 1+ V_DATE ;
      END;
   END LOOP;

end;




create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_ORDER_PLAN
(
   V_END_DATE IN DATE,
   V_START_DATE IN DATE,
   V_CATEGORY in NVARCHAR2
)
AS
exc_WD exception;
exc_DD exception;
exc_DSO exception;
exc_loc_sched exception;
EXC_XS EXCEPTION;
v_c1 int;
V_c2 int;
v_sql_cmd clob;

BEGIN


--v_sql_cmd := 'select count(distinct product_id) from IDSSC_HIST.HIST_weekly_forecast 
--where product_id in (select distinct upc from IDSSC_HIST.man_product_dimension where category_id=:a) 
--and start_date=(select max(start_date) from IDSSC_HIST.HIST_weekly_forecast)'; 
--execute immediate v_sql_cmd INTO V_C1 USING V_CATEGORY;
--
--      v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
--      VALUES(''HIST_WEEKLY FORECAST'',''LATEST FORECAST PRESENT FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)'; execute immediate v_sql_cmd;
--      COMMIT;
      

v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
       VALUES(''ORDER PLAN'',''ORDER PLAN PROCEDURE STRATED'',SYSTIMESTAMP)'; execute immediate v_sql_cmd;
       COMMIT;
       

--Ranking forecast data from the forecast file
v_sql_cmd := 'truncate TABLE idssc_hist_read_uod.' || v_category || '_uod_weekly_forecast_ltst'; execute immediate v_sql_cmd;  
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_weekly_forecast_ltst
(select PRODUCT_ID   ,
substr(LOCATION_ID,2,8)    ,
START_DATE    ,
WEEK1_UNITS_F ,
WEEK2_UNITS_F ,
WEEK3_UNITS_F ,
WEEK4_UNITS_F ,
WEEK5_UNITS_F ,
WEEK6_UNITS_F ,
WEEK7_UNITS_F ,
WEEK8_UNITS_F ,
WEEK9_UNITS_F ,
WEEK10_UNITS_F       ,
WEEK11_UNITS_F       ,
WEEK12_UNITS_F       ,
WEEK13_UNITS_F       ,
WEEK14_UNITS_F       ,
WEEK15_UNITS_F       ,
WEEK16_UNITS_F       ,
WEEK17_UNITS_F       ,
WEEK18_UNITS_F       ,
WEEK19_UNITS_F       ,
WEEK20_UNITS_F       ,
WEEK21_UNITS_F       ,
WEEK22_UNITS_F       ,
WEEK23_UNITS_F       ,
WEEK24_UNITS_F       ,
WEEK25_UNITS_F       ,
WEEK26_UNITS_F       ,
WEEK27_UNITS_F       ,
WEEK28_UNITS_F       ,
WEEK29_UNITS_F       ,
WEEK30_UNITS_F       ,
WEEK31_UNITS_F       ,
rank() over (order by start_date desc)
from IDSSC_HIST.HIST_weekly_forecast where 
cast(product_id as int) in (select distinct upc from IDSSC_HIST.man_product_dimension where category_id=:a) and
cast(product_id as int) in (select distinct upc from idssc_hist_read_uod.' || v_category || '_uod_prod_descr_latest))'; 
execute immediate v_sql_cmd using v_category;


--selecting the latest forecast data

v_sql_cmd := 'truncate TABLE idssc_hist_read_uod.' || v_category || '_uod_weekly_forecast_final'; execute immediate v_sql_cmd;  
v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_weekly_forecast_final
(select upc   ,
location_id   ,
START_DATE    ,
WEEK1_UNITS_F ,
WEEK2_UNITS_F ,
WEEK3_UNITS_F ,
WEEK4_UNITS_F ,
WEEK5_UNITS_F ,
WEEK6_UNITS_F ,
WEEK7_UNITS_F ,
WEEK8_UNITS_F ,
WEEK9_UNITS_F ,
WEEK10_UNITS_F       ,
WEEK11_UNITS_F       ,
WEEK12_UNITS_F       ,
WEEK13_UNITS_F       ,
WEEK14_UNITS_F       ,
WEEK15_UNITS_F       ,
WEEK16_UNITS_F       ,
WEEK17_UNITS_F       ,
WEEK18_UNITS_F       ,
WEEK19_UNITS_F       ,
WEEK20_UNITS_F       ,
WEEK21_UNITS_F       ,
WEEK22_UNITS_F       ,
WEEK23_UNITS_F       ,
WEEK24_UNITS_F       ,
WEEK25_UNITS_F       ,
WEEK26_UNITS_F       ,
WEEK27_UNITS_F       ,
WEEK28_UNITS_F       ,
WEEK29_UNITS_F       ,
WEEK30_UNITS_F       ,
WEEK31_UNITS_F       
from idssc_hist_read_uod.' || v_category || '_uod_weekly_forecast_ltst where rank_dt=1)'; execute immediate v_sql_cmd;

    v_sql_cmd := 'select count(distinct UPC) from idssc_hist_read_uod.' || v_category || '_uod_weekly_forecast_FINAL'; execute immediate v_sql_cmd INTO V_C1;
       
	   v_sql_cmd := 'insert INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
       VALUES(''FORECAST'',''MODEL WOULD BE RUN FOR ' || V_C1 || ' UPCS'',SYSTIMESTAMP)'; execute immediate v_sql_cmd;
       COMMIT;
       
              
       v_sql_cmd := 'select count(*) from idssc_hist_read_uod.' || v_category || '_uod_weekly_forecast_FINAL'; execute immediate v_sql_cmd INTO V_C1;
       v_sql_cmd := 'insert INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
       VALUES(''FORECAST'',''MODEL WOULD BE RUN FOR ' || V_C1 || ' UPC-STORE COMBINATIONS'',SYSTIMESTAMP)'; execute immediate v_sql_cmd;
       COMMIT;
       
                   
                    V_SQL_CMD := 'SELECT COUNT(*) from idssc_hist_read_uod.uod_STORE_SCHEDULE_FINAL'; EXECUTE IMMEDIATE V_SQL_CMD into v_c1;
                                  
                    V_SQL_CMD := 'SELECT COUNT(*)*7 from idssc_hist_read_uod.uod_LOCATION_SCHEDULE_3'; EXECUTE IMMEDIATE V_SQL_CMD into v_c2;
               
                                  
                             
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                values(''LOCATION SCHEDULE'',(case when (:a<>:b) then ''TRANSFORMATION INCORRECT'' else ''TRANSFORMATION CORRECT'' end),systimestamp)'; 
                                                                EXECUTE IMMEDIATE V_SQL_CMD using v_c1, v_c2;

commit;


begin
if (v_c1<>V_C2) then raise EXC_LOC_SCHED; end if;
end;
                                  
                                  
V_SQL_CMD := 'SELECT COUNT(*) from (SELECT STORECODE, BEGIN_DATE,DAY_NUM FROM idssc_hist_read_uod.uod_STORE_SCHEDULE_FINAL 
GROUP BY STORECODE, BEGIN_DATE,DAY_NUM HAVING COUNT(*)>1)'; EXECUTE IMMEDIATE V_SQL_CMD INTO V_C1;
    
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                values(''LOCATION SCHEDULE'',(case when (:a>0) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),systimestamp)'; 
                EXECUTE IMMEDIATE V_SQL_CMD using v_c1;

commit;


begin
if (v_c1>0) then raise EXC_LOC_SCHED; end if;
end;

            V_SQL_CMD := 'SELECT COUNT(*) from (SELECT CATEGORY_CODE,SITE_CODE 
                FROM idssc_hist_read_uod.uod_store_excess GROUP BY CATEGORY_CODE,SITE_CODE HAVING COUNT(*)>1)'; EXECUTE IMMEDIATE V_SQL_CMD into v_c1;
    
                V_SQL_CMD := 'INSERT into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                values(''STORE EXCESS FLAG'',(case when (:a>0) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),systimestamp)'; 
                                                                EXECUTE IMMEDIATE V_SQL_CMD using v_c1;

commit;


begin
if (v_c1>0) then raise EXC_XS; end if;
end;
                
               
         --APPLYING VARIOUS JOINS TO GET LIFE, INVENTORY MODEL, WASTE CONSTARINTS, DOW PROFILES ETC TO CREATE A MASTER DATASET--
       v_sql_cmd := 'truncate TABLE idssc_hist_read_uod.' || v_category || '_uod_WEEKLY_DEMAND'; execute immediate v_sql_cmd;  
       v_sql_cmd := 'insert INTO idssc_hist_read_uod.' || v_category || '_uod_WEEKLY_DEMAND 
         ( SELECT Z.* ,
                        F.LIFE 
              FROM ( SELECT C.* ,
                                    E.MODEL ,
                                    E.DAY_FULL ,
                                    E.DAY_PART ,
                                    E.MULT ,
                                   G.SP ,
                                    G.CP ,
                                    G.MARGIN ,
                                    0,
                                  0.99,
                                   -- D.value_number  ,
                                    E.ON_RANGE_DT ,
                                    I.xs_flag ,
                                    W.DOW ,
                                    W.PROFILE ,
                                    L.DEPOT_CODE 
                        FROM ( SELECT A.* ,
                                                B.STORE_STG ,
                                              :a
                                    FROM idssc_hist_read_uod.' || v_category || '_uod_weekly_forecast_final  A
                                                LEFT JOIN IDSSC_HIST.HIST_STORE_REF B
                                                  ON A.LOCATION_ID = SUBSTR(B.SITE_CODE, 2, 8) ) C
                                    LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_TI_MODEL E
                                     ON C.UPC = E.PRODUCT_ID
                                    AND C.LOCATION_ID = SUBSTR(E.LOCATION_ID, 2, 8)
                                    LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_COST_FINAL G
                                     ON G.upc = C.UPC
                                  --   LEFT JOIN IDSSC_HIST.HIST_WASTE_CONSTRAINTS D
                                 --    ON D.PRODUCT_ID=C.UPC
                                  --   AND D.LOCATION_ID=C.location_id
                                    LEFT JOIN idssc_hist_read_uod.uod_store_excess I
                                     ON C.LOCATION_ID = i.site_code
                                    LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_DOW W
                                     ON C.UPC = W.UPC
                                    AND C.STORE_STG = W.STG
                                    LEFT JOIN IDSSC_HIST.HIST_STORE_REF L
                                     ON C.LOCATION_ID = SUBSTR(L.SITE_CODE, 2, 4) where ltrim(i.category_code)=:b) Z
                        LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_PRODUCTLIFE F
                           ON Z.UPC = F.UPC
                        AND Z.DEPOT_CODE = F.DEPOT
                        AND Z.DOW = F.FDAY 
                        where Z.UPC IN (SELECT DISTINCT UPC FROM IDSSC_HIST.MAN_PRODUCT_DIMENSION WHERE CATEGORY_id= :c) 
AND Z.UPC IN (SELECT DISTINCT UPC FROM idssc_hist_read_uod.' || v_category || '_uod_prod_descr_all))'; 
execute immediate v_sql_cmd using V_START_DATE,v_category,v_category;
                     
					 
       v_sql_cmd := 'select count(*)/7 from idssc_hist_read_uod.' || v_category || '_uod_weekly_DEMAND WHERE LIFE IS NULL'; execute immediate v_sql_cmd INTO V_C1;
       v_sql_cmd := 'insert INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
       VALUES(''WEEKLY DEMAND'',''LIFE IS NULL FOR ' || V_C1 || ' UPC-STORE COMBINATIONS'',SYSTIMESTAMP)'; execute immediate v_sql_cmd;
       COMMIT;
      

       v_sql_cmd := 'select count(*)/7 from idssc_hist_read_uod.' || v_category || '_uod_weekly_DEMAND WHERE model_code IS NULL'; execute immediate v_sql_cmd INTO V_C1;
       v_sql_cmd := 'insert INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
       VALUES(''WEEKLY DEMAND'',''INVENTORY MODEL IS NULL FOR ' || V_C1 || ' UPC-STORE COMBINATIONS'',SYSTIMESTAMP)'; 
                   execute immediate v_sql_cmd;
       COMMIT;
       

       v_sql_cmd := 'select count(*) from idssc_hist_read_uod.' || v_category || '_uod_weekly_DEMAND WHERE PROFILE IS NULL'; execute immediate v_sql_cmd INTO V_C1;
       v_sql_cmd := 'insert INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
       VALUES(''WEEKLY DEMAND'',''DOW PROFILE IS NULL FOR ' || V_C1 || ' UPC-STORE COMBINATIONS'',SYSTIMESTAMP)'; execute immediate v_sql_cmd;
       COMMIT;
       
       
                                  
         --DELETING RECORDS WITH NULLS
         v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_WEEKLY_DEMAND 
         WHERE STG IS NULL'; execute immediate v_sql_cmd;
         
         v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_WEEKLY_DEMAND 
         WHERE LIFE IS NULL'; execute immediate v_sql_cmd;
         
         v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_WEEKLY_DEMAND
         WHERE MODEL_CODE IS NULL'; execute immediate v_sql_cmd;
              
               
       v_sql_cmd := 'select count(*) from (SELECT UPC,STORE,DAY_NUM
       FROM idssc_hist_read_uod.' || v_category || '_uod_WEEKLY_DEMAND GROUP BY UPC,STORE,DAY_NUM HAVING COUNT(*)>1)'; execute immediate v_sql_cmd into v_c1;
    
       v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
       values('' WEEKLY DEMAND'',(case when (:a>0) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),systimestamp)'; 
                   execute immediate v_sql_cmd using v_c1;

       commit;
       

              begin
              if (v_c1>0) then raise EXC_WD; END IF;
              end;
               
          --THIS CALL THE PROCEDURE TO TRANSFORM IDSSC_HIST_READ_UOD.f09a_WEEKLY_FORECAST  FROM COLUMNS INTO ROWS AND v_sql_cmd := 'insert IN DEMAND ROW
       
       v_sql_cmd := 'truncate TABLE idssc_hist_read_uod.' || v_category || '_uod_daily_demand'; execute immediate v_sql_cmd;  
                             
       BEGIN
          idssc_hist_read_uod.uod_PROC_APPEND_TRANSFORM(V_CATEGORY);
       END;

       --UPDATING DEMAND ROW TO v_sql_cmd := 'update NETWORK SCHEDULE AND STORE SCHEDULE FLAGS--
       v_sql_cmd := 'update idssc_hist_read_uod.' || v_category || '_uod_DAILY_DEMAND
          SET FLAG4 = (CASE 
                                          WHEN FLAG3 IS NULL THEN FLAG2
                 ELSE FLAG3
                       END)'; execute immediate v_sql_cmd;
                                                                
       v_sql_cmd := 'update idssc_hist_read_uod.' || v_category || '_uod_DAILY_DEMAND
          SET FLAG2 = FLAG4'; execute immediate v_sql_cmd;

       v_sql_cmd := 'select count(*) from idssc_hist_read_uod.' || v_category || '_uod_DAILY_DEMAND'; execute immediate v_sql_cmd INTO V_C1;
       
       v_sql_cmd := 'select count(*)*31 from idssc_hist_read_uod.' || v_category || '_uod_WEEKLY_DEMAND'; execute immediate v_sql_cmd INTO V_C2;
       
       v_sql_cmd := 'insert INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
       VALUES(''DAILY DEMAND'',(case when (:a<>:b) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),SYSTIMESTAMP)'; 
                   execute immediate v_sql_cmd using v_c1, v_c2;
       COMMIT;
       
                
              begin
              if (v_c1<>v_c2) then raise EXC_DD; end if;
              end;
                
                
                v_sql_cmd := 'truncate table idssc_hist_read_uod.' || v_category || '_uod_nde'; execute immediate v_sql_cmd;               
   v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_uod_nde
   (select product_id,
   location_id,
   uplift_dt,
   total_uplift
   from idssc_hist_read_uod.uod_nde where product_id in (select distinct upc from idssc_hist_read_uod.' || v_category || '_uod_daily_demand))'; execute immediate v_sql_cmd; 
                                                              
      
	  v_sql_cmd := 'truncate TABLE idssc_hist_read_uod.' || v_category || '_uod_daily_store_orders'; execute immediate v_sql_cmd;                      
           
           
     v_sql_cmd := 'insert into idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
       VALUES(''ORDER PLAN'',''ORDER PLAN DAY 1 STARTING'',SYSTIMESTAMP)'; execute immediate v_sql_cmd;
       COMMIT;
            
           
                           
       --RUN ORDER PLAN
       BEGIN
       idssc_hist_read_uod.uod_PROC_ORDER_PLAN_GENE_DAY1 (V_START_DATE, V_CATEGORY);
       END;
                   
       BEGIN
       idssc_hist_read_uod.uod_PROC_ORDER_PLAN_GENE_ALL (V_START_DATE,V_END_DATE, V_CATEGORY);
       END;
          
       v_sql_cmd := 'select max(A.B) from (select distinct fdate,count(*) B from idssc_hist_read_uod.' || v_category || '_uod_daily_store_orders group by fdate)a'; 
                   execute immediate v_sql_cmd INTO V_C1;
       v_sql_cmd := 'select min(A.B) from (select distinct fdate,count(*) B from idssc_hist_read_uod.' || v_category || '_uod_daily_store_orders group by fdate)a'; 
                   execute immediate v_sql_cmd INTO V_C2;
       
       v_sql_cmd := 'insert INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
       VALUES(''DAILY STORE ORDERS'',(case when (:a<>:b) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),SYSTIMESTAMP)'; 
       execute immediate v_sql_cmd using v_c1, v_c2;
       COMMIT;
       
                
              begin
              if (v_c1<>v_c2) then raise EXC_DSO; end if;
              end;


exception

when EXC_XS then 
       raise_application_error (-20025,'ERROR IN STORE EXCESS TRANSFORMATION',TRUE);
raise;
                                
when exc_loc_sched then 
       raise_application_error (-20024,'ERROR IN LOCATION SCHEDULE TRANSFORMATION',TRUE);
raise;

when exc_WD then 
       raise_application_error (-20021,'ERROR IN CREATION OF WEEKLY_DEMAND TABLE',TRUE);
raise;

when exc_DD then 
       raise_application_error (-20022,'ERROR IN CREATION OF DAILY_DEMAND TABLE',TRUE);
raise;

when exc_DSO then 
       raise_application_error (-20023,'ERROR IN CREATION OF DAILY_STORE_ORDERS TABLE ',TRUE);
raise;
 
END;




create or replace
PROCEDURE idssc_hist_read_uod.uod_PROC_KPI_CAL
(
   V_END_DATE IN DATE,
   V_START_DATE IN DATE,
   V_CATEGORY NVARCHAR2
)
AS
v_c1 int;
V_c2 int;
V_SQL_CMD VARCHAR2(10000);
 
BEGIN

--TABLE FOR KPIS AT 3 LEVEL-ALL,ONLY MAYLAND,ALL EXCEPT MAYLAND--  
   
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3_DEPOT
  ( SELECT UPC ,
           UPT ,
           DEPOT ,
           SUM(DEMAND) DEMAND  ,
           SUM(ON_HAND) ON_HAND  ,
           SUM(ORDERS) ORDERS  ,
           SUM(CASE ORDERS
                          WHEN 0 THEN 0
               ELSE WASTE
                  END) WASTE  ,
           SUM(SOLD_UNITS) SOLD_UNITS  
    FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_STORE_ORDERS 
     WHERE FDATE BETWEEN :A AND :B
    GROUP BY UPC,UPT,DEPOT )'; EXECUTE IMMEDIATE V_SQL_CMD USING V_START_DATE, V_END_DATE;

       
       

       V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3
  ( SELECT UPC ,
           UPT ,
           SUM(DEMAND) DEMAND  ,
           SUM(ON_HAND) ON_HAND  ,
           SUM(ORDERS) ORDERS  ,
           SUM(WASTE) WASTE  ,
           SUM(SOLD_UNITS) SOLD_UNITS  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3_DEPOT 
      GROUP BY UPC,UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;


V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4
  ( SELECT A.UPC ,
           A.UPT ,
           B.IS_SRP ,
           B.TRAY_TYPE ,
           B.CURRENT_TRAY_TYPE ,
           B.CURRENT_UPT ,
           B.SP ,
           B.PRODUCT_COST ,
           A.DEMAND ,
           A.ORDERS ,
           A.WASTE ,
           A.SOLD_UNITS ,
           (A.DEMAND - A.SOLD_UNITS) LOST_SALES  ,
           A.SOLD_UNITS * B.primary_trans / A.UPT PRIMARY_TRANSPORT  ,
           A.SOLD_UNITS * B.TRAY_HIRE / A.UPT TRAY_HIRE_COST  ,
           A.SOLD_UNITS * B.DEPOT_RHD / A.UPT DEPOT_RHD_COST  ,
           A.SOLD_UNITS * B.TRAY_LENDING / A.UPT TRAY_LENDING_COST  ,
           A.SOLD_UNITS * B.STORE_HANDLING / A.UPT STORE_HANDLING_COST  ,
           A.SOLD_UNITS * B.EX_WORKS EX_WORKS_COST  ,
           A.SOLD_UNITS * B.SP SALES_REVENUE  ,
           A.SOLD_UNITS * B.PRODUCT_COST COST_OF_SOLD  ,
           A.WASTE * B.PRODUCT_COST * 0.6 WASTE_RECOVERY  ,
           A.WASTE / A.UPT * (B.primary_trans + B.TRAY_HIRE + B.DEPOT_RHD - B.TRAY_LENDING + B.STORE_HANDLING + (B.EX_WORKS * A.UPT)) COST_OF_WASTE  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3 A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_LATEST B
            ON A.UPC = B.UPC
           AND A.UPT = B.UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;
--===============================

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4_DEPOT
  ( SELECT A.UPC ,
           A.UPT ,
           A.DEPOT ,
           B.IS_SRP ,
           B.TRAY_TYPE ,
           B.CURRENT_TRAY_TYPE ,
           COALESCE(C.UPT, B.CURRENT_UPT) ,
           B.SP ,
           B.PRODUCT_COST ,
           A.DEMAND ,
           A.ORDERS ,
           A.WASTE ,
           A.SOLD_UNITS ,
           (A.DEMAND - A.SOLD_UNITS) LOST_SALES  ,
           A.SOLD_UNITS * B.primary_trans / A.UPT PRIMARY_TRANSPORT  ,
           A.SOLD_UNITS * B.TRAY_HIRE / A.UPT TRAY_HIRE_COST  ,
           A.SOLD_UNITS * B.DEPOT_RHD / A.UPT DEPOT_RHD_COST  ,
           A.SOLD_UNITS * B.TRAY_LENDING / A.UPT TRAY_LENDING_COST  ,
           A.SOLD_UNITS * B.STORE_HANDLING / A.UPT STORE_HANDLING_COST  ,
           A.SOLD_UNITS * B.EX_WORKS EX_WORKS_COST  ,
           A.SOLD_UNITS * B.SP SALES_REVENUE  ,
           A.SOLD_UNITS * B.PRODUCT_COST COST_OF_SOLD  ,
           A.WASTE * B.PRODUCT_COST * 0.6 WASTE_RECOVERY  ,
          A.WASTE / A.UPT * (B.primary_trans + B.TRAY_HIRE + B.DEPOT_RHD - B.TRAY_LENDING + B.STORE_HANDLING + (B.EX_WORKS * A.UPT)) COST_OF_WASTE  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3_DEPOT A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_UPT_UPC_DEPOT_FINAL C
            ON A.UPC = C.UPC
           AND A.DEPOT = C.DEPOT
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_LATEST B
            ON A.UPC = B.UPC
           AND A.UPT = B.UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;

                 
                 

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5_DEPOT
SELECT UPC, 
          UPT,
                DEPOT,
          IS_SRP,
          TRAY_TYPE,
          CURRENT_TRAY_TYPE, 
                (CASE TRAY_TYPE
                           WHEN ''BROWN_TRAY'' THEN 8
                          WHEN ''HALF_TRAY_2'' THEN 7
                          WHEN ''HALF_TRAY_5'' THEN 6
                          WHEN ''HALF_TRAY_7'' THEN 5
                          WHEN ''METRIC_TRAY_2'' THEN 4
                          WHEN ''METRIC_TRAY_5'' THEN 3
                          WHEN ( CASE CURRENT_TRAY_TYPE
                                    WHEN ''METRIC_TRAY_7'' THEN ''CARDBOARD''
                                    ELSE ''METRIC_TRAY_7''
                            END ) THEN 2
           ELSE 1
           END),
          CURRENT_UPT,
          SP,
          PRODUCT_COST,
          DEMAND,
         ORDERS,
          WASTE,
          SOLD_UNITS,
          LOST_SALES,
          PRIMARY_TRANSPORT,
          TRAY_HIRE_COST,
          DEPOT_RHD_COST,
          TRAY_LENDING_COST,
          STORE_HANDLING_COST,
          EX_WORKS_COST,
          SALES_REVENUE,
          COST_OF_SOLD,
          WASTE_RECOVERY,
          COST_OF_WASTE,

                 (PRIMARY_TRANSPORT + TRAY_HIRE_COST + DEPOT_RHD_COST  + STORE_HANDLING_COST + EX_WORKS_COST + COST_OF_WASTE) AS E2E_COST,
          (SALES_REVENUE+ TRAY_LENDING_COST ) AS E2E_REVENUE,
          (SALES_REVENUE + (TRAY_LENDING_COST-TRAY_HIRE_COST) - PRIMARY_TRANSPORT - DEPOT_RHD_COST  - STORE_HANDLING_COST - EX_WORKS_COST -  COST_OF_WASTE) AS E2E_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) AS GROSS_SELLING_MARGIN,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY AS GROSS_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY- DEPOT_RHD_COST - STORE_HANDLING_COST AS NET_PROFIT
FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5_DEPOT
WHERE TRAY_TYPE IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete from idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5_DEPOT 
where tray_type = ''CARDBOARD'' and CURRENT_TRAY_TYPE2 <> ''CARDBOARD'''; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5_DEPOT
WHERE E2E_PROFIT IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6_DEPOT
  SELECT UPC ,
         UPT ,
         DEPOT ,
         IS_SRP ,
         TRAY_TYPE ,
         CURRENT_TRAY_TYPE2 ,
         TRAY_PRIOIRTY ,
         CURRENT_UPT ,
         SP ,
         PRODUCT_COST ,
         DEMAND ,
         ORDERS ,
         WASTE ,
         SOLD_UNITS ,
         LOST_SALES ,
         PRIMARY_TRANSPORT ,
         TRAY_HIRE_COST ,
         DEPOT_RHD_COST ,
         TRAY_LENDING_COST ,
         STORE_HANDLING_COST ,
         EX_WORKS_COST ,
         SALES_REVENUE ,
         COST_OF_SOLD ,
         WASTE_RECOVERY ,
         COST_OF_WASTE ,
         E2E_COST ,
         E2E_REVENUE ,
         E2E_PROFIT ,
         GROSS_SELLING_MARGIN ,
         GROSS_PROFIT ,
         NET_PROFIT ,
         RANK() OVER ( PARTITION BY UPC,depot ORDER BY E2E_PROFIT DESC, TRAY_PRIOIRTY DESC  ) PROFIT_RANK  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5_DEPOT '; EXECUTE IMMEDIATE V_SQL_CMD;
       

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_temp_table_7_curr_dpt'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_temp_table_7_curr_dpt
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           DEPOT ,
           UPT CURRENT_UPT  ,
           TRAY_TYPE CURRENT_TRAY_TYPE  ,
           ORDERS CURRENT_ORDERS  ,
           WASTE CURRENT_WASTE  ,
           SOLD_UNITS CURRENT_SOLD_UNITS  ,
           LOST_SALES CURRENT_LOST_SALES  ,
           PRIMARY_TRANSPORT CURRENT_PRIMARY_TRANSPORT  ,
           TRAY_HIRE_COST CURRENT_TRAY_HIRE_COST  ,
           DEPOT_RHD_COST CURRENT_DEPOT_RHD_COST  ,
           TRAY_LENDING_COST CURRENT_TRAY_LENDING_COST  ,
           STORE_HANDLING_COST CURRENT_STORE_HANDLING_COST  ,
           EX_WORKS_COST CURRENT_EX_WORKS_COST  ,
           SALES_REVENUE CURRENT_SALES_REVENUE  ,
           COST_OF_SOLD CURRENT_COST_OF_SOLD  ,
           WASTE_RECOVERY CURRENT_WASTE_RECOVERY  ,
           COST_OF_WASTE CURRENT_COST_OF_WASTE  ,
           E2E_COST CURRENT_E2E_COST  ,
           E2E_REVENUE CURRENT_E2E_REVENUE  ,
           E2E_PROFIT CURRENT_E2E_PROFIT  ,
           GROSS_SELLING_MARGIN CURRENT_GROSS_SELLING_MARGIN  ,
           GROSS_PROFIT CURRENT_GROSS_PROFIT  ,
           NET_PROFIT CURRENT_NET_PROFIT  ,
           PROFIT_RANK CURRENT_PROFIT_RANK  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6_DEPOT 
     WHERE CURRENT_TRAY_TYPE2 = TRAY_TYPE
             AND CURRENT_UPT = UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;
                     
                      
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_CURRENT'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_CURRENT
  ( SELECT A.UPC ,
           MAX(SP) ,
           AVG(PRODUCT_COST) ,
           SUM(DEMAND) ,
           B.IS_SRP ,
           B.CURRENT_UPT ,
           B.CURRENT_TRAY_TYPE ,
           SUM(CURRENT_ORDERS) ,
           SUM(CURRENT_WASTE) ,
           SUM(CURRENT_SOLD_UNITS) ,
           SUM(CURRENT_LOST_SALES) ,
           SUM(CURRENT_PRIMARY_TRANSPORT) ,
           SUM(CURRENT_TRAY_HIRE_COST) ,
           SUM(CURRENT_DEPOT_RHD_COST) ,
           SUM(CURRENT_TRAY_LENDING_COST) ,
           SUM(CURRENT_STORE_HANDLING_COST) ,
           SUM(CURRENT_EX_WORKS_COST) ,
           SUM(CURRENT_SALES_REVENUE) ,
           SUM(CURRENT_COST_OF_SOLD) ,
           SUM(CURRENT_WASTE_RECOVERY) ,
           SUM(CURRENT_COST_OF_WASTE) ,
           SUM(CURRENT_E2E_COST) ,
           SUM(CURRENT_E2E_REVENUE) ,
           SUM(CURRENT_E2E_PROFIT) ,
           SUM(CURRENT_GROSS_SELLING_MARGIN) ,
           SUM(CURRENT_GROSS_PROFIT) ,
           SUM(CURRENT_NET_PROFIT) ,
           99 
    FROM idssc_hist_read_uod.' || v_category || '_uod_temp_table_7_curr_dpt A
           LEFT JOIN ( SELECT DISTINCT UPC ,
                                       CURRENT_UPT ,
                                       CURRENT_TRAY_TYPE ,
                                       IS_SRP 
                       FROM idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_LATEST  ) B
            ON A.UPC = B.UPC
      GROUP BY A.UPC,B.CURRENT_UPT,B.CURRENT_TRAY_TYPE,B.IS_SRP )'; EXECUTE IMMEDIATE V_SQL_CMD;

         
         
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
SELECT UPC, 
          UPT,
          IS_SRP,
          TRAY_TYPE,
                CURRENT_TRAY_TYPE,
                CASE TRAY_TYPE
                           WHEN ''BROWN_TRAY'' THEN 8
                WHEN ''HALF_TRAY_2'' THEN 7
          WHEN ''HALF_TRAY_5'' THEN 6
          WHEN ''HALF_TRAY_7'' THEN 5
          WHEN ''METRIC_TRAY_2'' THEN 4
          WHEN ''METRIC_TRAY_5'' THEN 3
          WHEN (CASE  CURRENT_TRAY_TYPE   WHEN ''METRIC_TRAY_7'' THEN ''CARDBOARD''
                         ELSE ''METRIC_TRAY_7''
                            END ) THEN 2
           ELSE 1
          
                END,
                     
          CURRENT_UPT,
          SP,
          PRODUCT_COST,
          DEMAND,
          ORDERS,
          WASTE,
         SOLD_UNITS,
          LOST_SALES,
          PRIMARY_TRANSPORT,
          TRAY_HIRE_COST,
          DEPOT_RHD_COST,
          TRAY_LENDING_COST,
          STORE_HANDLING_COST,
          EX_WORKS_COST,
          SALES_REVENUE,
          COST_OF_SOLD,
          WASTE_RECOVERY,
          COST_OF_WASTE ,
          (PRIMARY_TRANSPORT + TRAY_HIRE_COST + DEPOT_RHD_COST  + STORE_HANDLING_COST + EX_WORKS_COST + COST_OF_WASTE) AS E2E_COST,
          (SALES_REVENUE+ TRAY_LENDING_COST ) AS E2E_REVENUE,
          (SALES_REVENUE + (TRAY_LENDING_COST-TRAY_HIRE_COST) - PRIMARY_TRANSPORT - DEPOT_RHD_COST  - STORE_HANDLING_COST - EX_WORKS_COST -  COST_OF_WASTE) AS E2E_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) AS GROSS_SELLING_MARGIN,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY AS GROSS_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY- DEPOT_RHD_COST - STORE_HANDLING_COST AS NET_PROFIT
FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
WHERE TRAY_TYPE IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
WHERE E2E_PROFIT IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
WHERE DEMAND = 0'; EXECUTE IMMEDIATE V_SQL_CMD;


V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.uod_recommendation_rank
  SELECT UPC ,
         UPT ,
         IS_SRP ,
         TRAY_TYPE ,
         CURRENT_TRAY_TYPE2 ,
         TRAY_PRIOIRTY ,
         CURRENT_UPT ,
         SP ,
         PRODUCT_COST ,
         DEMAND ,
         ORDERS ,
         WASTE ,
         SOLD_UNITS ,
         LOST_SALES ,
         PRIMARY_TRANSPORT ,
         TRAY_HIRE_COST ,
         DEPOT_RHD_COST ,
         TRAY_LENDING_COST ,
         STORE_HANDLING_COST ,
         EX_WORKS_COST ,
         SALES_REVENUE ,
         COST_OF_SOLD ,
         WASTE_RECOVERY ,
         COST_OF_WASTE ,
         E2E_COST ,
         E2E_REVENUE ,
         E2E_PROFIT ,
         GROSS_SELLING_MARGIN ,
         GROSS_PROFIT ,
         NET_PROFIT ,
         rank() over(partition by upc order by e2e_profit)
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
WHERE tray_type=''CARDBOARD'' and current_tray_type2 <>''CARDBOARD'''; EXECUTE IMMEDIATE V_SQL_CMD;

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6
  SELECT UPC ,
         UPT ,
         IS_SRP ,
         TRAY_TYPE ,
         CURRENT_TRAY_TYPE2 ,
         TRAY_PRIOIRTY ,
         CURRENT_UPT ,
         SP ,
         PRODUCT_COST ,
         DEMAND ,
         ORDERS ,
         WASTE ,
         SOLD_UNITS ,
         LOST_SALES ,
         PRIMARY_TRANSPORT ,
         TRAY_HIRE_COST ,
         DEPOT_RHD_COST ,
         TRAY_LENDING_COST ,
         STORE_HANDLING_COST ,
         EX_WORKS_COST ,
         SALES_REVENUE ,
         COST_OF_SOLD ,
         WASTE_RECOVERY ,
         COST_OF_WASTE ,
         E2E_COST ,
         E2E_REVENUE ,
         E2E_PROFIT ,
         GROSS_SELLING_MARGIN ,
         GROSS_PROFIT ,
         NET_PROFIT ,
         RANK() OVER ( PARTITION BY UPC ORDER BY E2E_PROFIT DESC, TRAY_PRIOIRTY DESC  ) PROFIT_RANK  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5 '; EXECUTE IMMEDIATE V_SQL_CMD;
	
	
		
--V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.uod_recommendation_upc
--  SELECT DISTINCT UPC FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6'; EXECUTE IMMEDIATE V_SQL_CMD;


V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTIMAL'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTIMAL
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           UPT OPTIMAL_UPT  ,
           TRAY_TYPE OPTIMAL_TRAY_TYPE  ,
           ORDERS OPTIMAL_ORDERS  ,
           WASTE OPTIMAL_WASTE  ,
           SOLD_UNITS OPTIMAL_SOLD_UNITS  ,
           LOST_SALES OPTIMAL_LOST_SALES  ,
           PRIMARY_TRANSPORT OPTIMAL_PRIMARY_TRANSPORT  ,
           TRAY_HIRE_COST OPTIMAL_TRAY_HIRE_COST  ,
           DEPOT_RHD_COST OPTIMAL_DEPOT_RHD_COST  ,
           TRAY_LENDING_COST OPTIMAL_TRAY_LENDING_COST  ,
           STORE_HANDLING_COST OPTIMAL_STORE_HANDLING_COST  ,
           EX_WORKS_COST OPTIMAL_EX_WORKS_COST  ,
           SALES_REVENUE OPTIMAL_SALES_REVENUE  ,
           COST_OF_SOLD OPTIMAL_COST_OF_SOLD  ,
           WASTE_RECOVERY OPTIMAL_WASTE_RECOVERY  ,
           COST_OF_WASTE OPTIMAL_COST_OF_WASTE  ,
           E2E_COST OPTIMAL_E2E_COST  ,
           E2E_REVENUE OPTIMAL_E2E_REVENUE  ,
           E2E_PROFIT OPTIMAL_E2E_PROFIT  ,
           GROSS_SELLING_MARGIN OPTIMAL_GROSS_SELLING_MARGIN  ,
           GROSS_PROFIT OPTIMAL_GROSS_PROFIT  ,
           NET_PROFIT OPTIMAL_NET_PROFIT  ,
           PROFIT_RANK OPTIMAL_PROFIT_RANK  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6 
     WHERE PROFIT_RANK = 1 )'; EXECUTE IMMEDIATE V_SQL_CMD;

       
        
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8
  ( SELECT A.UPC ,
           A.SP ,
           A.PRODUCT_COST ,
           A.DEMAND ,
           A.IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
          CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
           OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK 
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTIMAL A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_CURRENT B
            ON A.UPC = B.UPC )'; EXECUTE IMMEDIATE V_SQL_CMD;

                     
V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8
SET OPTIMAL_WASTE_RECOVERY = CASE WHEN OPTIMAL_WASTE>CURRENT_WASTE THEN (2*OPTIMAL_WASTE_RECOVERY)/3 ELSE OPTIMAL_WASTE_RECOVERY END '; EXECUTE IMMEDIATE V_SQL_CMD;
                     
                     
v_sql_cmd := 'delete FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8
WHERE DEMAND = 0'; EXECUTE IMMEDIATE V_SQL_CMD;

--ADDITION OF WASTE % AND AVAILABILITY%
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8_1'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8_1
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
           CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           CURRENT_WASTE / DEMAND ,
           CURRENT_SOLD_UNITS / DEMAND ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
           OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK ,
           OPTIMAL_WASTE / DEMAND ,
           OPTIMAL_SOLD_UNITS / DEMAND ,
           3 
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8  )'; EXECUTE IMMEDIATE V_SQL_CMD;
       


--CALCULATION OF RECOMMENDATIONS FOR mAYLAND STORES

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3
  ( SELECT UPC ,
           UPT ,
           SUM(DEMAND) DEMAND  ,
           SUM(ON_HAND) ON_HAND  ,
           SUM(ORDERS) ORDERS  ,
           SUM(WASTE) WASTE  ,
           SUM(SOLD_UNITS) SOLD_UNITS  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3_DEPOT 
     WHERE DEPOT = ''BY''
      GROUP BY UPC,UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;
        
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4
  ( SELECT A.UPC ,
           A.UPT ,
           B.IS_SRP ,
           B.TRAY_TYPE ,
           B.CURRENT_TRAY_TYPE ,
           B.CURRENT_UPT ,
           B.SP ,
           B.PRODUCT_COST ,
           A.DEMAND ,
           A.ORDERS ,
           A.WASTE ,
           A.SOLD_UNITS ,
           (A.DEMAND - A.SOLD_UNITS) LOST_SALES  ,
           A.SOLD_UNITS * B.primary_trans / A.UPT PRIMARY_TRANSPORT  ,
           A.SOLD_UNITS * B.TRAY_HIRE / A.UPT TRAY_HIRE_COST  ,
           A.SOLD_UNITS * B.DEPOT_RHD / A.UPT DEPOT_RHD_COST  ,
           A.SOLD_UNITS * B.TRAY_LENDING / A.UPT TRAY_LENDING_COST  ,
           A.SOLD_UNITS * B.STORE_HANDLING / A.UPT STORE_HANDLING_COST  ,
           A.SOLD_UNITS * B.EX_WORKS EX_WORKS_COST  ,
           A.SOLD_UNITS * B.SP SALES_REVENUE  ,
           A.SOLD_UNITS * B.PRODUCT_COST COST_OF_SOLD  ,
           A.WASTE * B.PRODUCT_COST * 0.6 WASTE_RECOVERY  ,
           A.WASTE / A.UPT * (B.primary_trans + B.TRAY_HIRE + B.DEPOT_RHD - B.TRAY_LENDING + B.STORE_HANDLING + (B.EX_WORKS * A.UPT)) COST_OF_WASTE  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3 A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_LATEST B
            ON A.UPC = B.UPC
           AND A.UPT = B.UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;
---------------------------STEP 2 --------------------------------------------
--=============================================================================================================
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_CURRENT'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_CURRENT
  ( SELECT A.UPC ,
           MAX(SP) ,
           AVG(PRODUCT_COST) ,
           SUM(DEMAND) ,
           B.IS_SRP ,
           B.CURRENT_UPT ,
           B.CURRENT_TRAY_TYPE ,
           SUM(CURRENT_ORDERS) ,
           SUM(CURRENT_WASTE) ,
           SUM(CURRENT_SOLD_UNITS) ,
           SUM(CURRENT_LOST_SALES) ,
           SUM(CURRENT_PRIMARY_TRANSPORT) ,
           SUM(CURRENT_TRAY_HIRE_COST) ,
           SUM(CURRENT_DEPOT_RHD_COST) ,
           SUM(CURRENT_TRAY_LENDING_COST) ,
           SUM(CURRENT_STORE_HANDLING_COST) ,
           SUM(CURRENT_EX_WORKS_COST) ,
           SUM(CURRENT_SALES_REVENUE) ,
           SUM(CURRENT_COST_OF_SOLD) ,
           SUM(CURRENT_WASTE_RECOVERY) ,
           SUM(CURRENT_COST_OF_WASTE) ,
           SUM(CURRENT_E2E_COST) ,
           SUM(CURRENT_E2E_REVENUE) ,
           SUM(CURRENT_E2E_PROFIT) ,
           SUM(CURRENT_GROSS_SELLING_MARGIN) ,
           SUM(CURRENT_GROSS_PROFIT) ,
           SUM(CURRENT_NET_PROFIT) ,
           99 
    FROM idssc_hist_read_uod.' || v_category || '_uod_temp_table_7_curr_dpt A
           LEFT JOIN ( SELECT DISTINCT UPC ,
                                       CURRENT_UPT ,
                                       CURRENT_TRAY_TYPE ,
                                       IS_SRP 
                       FROM idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_LATEST  ) B
            ON A.UPC = B.UPC
     WHERE DEPOT = ''BY''
      GROUP BY A.UPC,B.CURRENT_UPT,B.CURRENT_TRAY_TYPE,B.IS_SRP )'; EXECUTE IMMEDIATE V_SQL_CMD;

         
         
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
SELECT UPC, 
          UPT,
          IS_SRP,
          TRAY_TYPE,
                CURRENT_TRAY_TYPE,
                CASE TRAY_TYPE
                           WHEN ''BROWN_TRAY'' THEN 8
                WHEN ''HALF_TRAY_2'' THEN 7
          WHEN ''HALF_TRAY_5'' THEN 6
          WHEN ''HALF_TRAY_7'' THEN 5
          WHEN ''METRIC_TRAY_2'' THEN 4
          WHEN ''METRIC_TRAY_5'' THEN 3
          WHEN ( CASE CURRENT_TRAY_TYPE WHEN ''METRIC_TRAY_7'' THEN ''CARDBOARD'' ELSE ''METRIC_TRAY_7''  END ) THEN 2
          ELSE 1
                END,
          CURRENT_UPT,
          SP,
          PRODUCT_COST,
          DEMAND,
          ORDERS,
          WASTE,
          SOLD_UNITS,
          LOST_SALES,
          PRIMARY_TRANSPORT,
          TRAY_HIRE_COST,
          DEPOT_RHD_COST,
          TRAY_LENDING_COST,
          STORE_HANDLING_COST,
          EX_WORKS_COST,
          SALES_REVENUE,
          COST_OF_SOLD,
          WASTE_RECOVERY,
          COST_OF_WASTE ,
          (PRIMARY_TRANSPORT + TRAY_HIRE_COST + DEPOT_RHD_COST  + STORE_HANDLING_COST + EX_WORKS_COST + COST_OF_WASTE) AS E2E_COST,
          (SALES_REVENUE+ TRAY_LENDING_COST ) AS E2E_REVENUE,
          (SALES_REVENUE + (TRAY_LENDING_COST-TRAY_HIRE_COST) - PRIMARY_TRANSPORT - DEPOT_RHD_COST  - STORE_HANDLING_COST - EX_WORKS_COST -  COST_OF_WASTE) AS E2E_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) AS GROSS_SELLING_MARGIN,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY AS GROSS_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY- DEPOT_RHD_COST - STORE_HANDLING_COST AS NET_PROFIT
FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
WHERE TRAY_TYPE IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
WHERE E2E_PROFIT IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
WHERE tray_type=''CARDBOARD'' and current_tray_type2 <>''CARDBOARD'''; EXECUTE IMMEDIATE V_SQL_CMD;

V_SQL_CMD := 'TRUNCATE TABLE  idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6
  SELECT UPC ,
         UPT ,
         IS_SRP ,
         TRAY_TYPE ,
         CURRENT_TRAY_TYPE2 ,
         TRAY_PRIOIRTY ,
         CURRENT_UPT ,
         SP ,
         PRODUCT_COST ,
         DEMAND ,
         ORDERS ,
         WASTE ,
         SOLD_UNITS ,
         LOST_SALES ,
         PRIMARY_TRANSPORT ,
         TRAY_HIRE_COST ,
         DEPOT_RHD_COST ,
         TRAY_LENDING_COST ,
         STORE_HANDLING_COST ,
         EX_WORKS_COST ,
         SALES_REVENUE ,
         COST_OF_SOLD ,
         WASTE_RECOVERY ,
         COST_OF_WASTE ,
         E2E_COST ,
         E2E_REVENUE ,
         E2E_PROFIT ,
         GROSS_SELLING_MARGIN ,
         GROSS_PROFIT ,
         NET_PROFIT ,
         RANK() OVER ( PARTITION BY UPC ORDER BY E2E_PROFIT DESC, TRAY_PRIOIRTY DESC  ) PROFIT_RANK  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5 '; EXECUTE IMMEDIATE V_SQL_CMD;
       



V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTIMAL'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTIMAL
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           UPT OPTIMAL_UPT  ,
           TRAY_TYPE OPTIMAL_TRAY_TYPE  ,
           ORDERS OPTIMAL_ORDERS  ,
           WASTE OPTIMAL_WASTE  ,
           SOLD_UNITS OPTIMAL_SOLD_UNITS  ,
           LOST_SALES OPTIMAL_LOST_SALES  ,
           PRIMARY_TRANSPORT OPTIMAL_PRIMARY_TRANSPORT  ,
           TRAY_HIRE_COST OPTIMAL_TRAY_HIRE_COST  ,
           DEPOT_RHD_COST OPTIMAL_DEPOT_RHD_COST  ,
           TRAY_LENDING_COST OPTIMAL_TRAY_LENDING_COST  ,
           STORE_HANDLING_COST OPTIMAL_STORE_HANDLING_COST  ,
           EX_WORKS_COST OPTIMAL_EX_WORKS_COST  ,
           SALES_REVENUE OPTIMAL_SALES_REVENUE  ,
           COST_OF_SOLD OPTIMAL_COST_OF_SOLD  ,
           WASTE_RECOVERY OPTIMAL_WASTE_RECOVERY  ,
           COST_OF_WASTE OPTIMAL_COST_OF_WASTE  ,
           E2E_COST OPTIMAL_E2E_COST  ,
           E2E_REVENUE OPTIMAL_E2E_REVENUE  ,
           E2E_PROFIT OPTIMAL_E2E_PROFIT  ,
           GROSS_SELLING_MARGIN OPTIMAL_GROSS_SELLING_MARGIN  ,
           GROSS_PROFIT OPTIMAL_GROSS_PROFIT  ,
           NET_PROFIT OPTIMAL_NET_PROFIT  ,
           PROFIT_RANK OPTIMAL_PROFIT_RANK  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6 
     WHERE PROFIT_RANK = 1 )'; EXECUTE IMMEDIATE V_SQL_CMD;
       
        
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8'; EXECUTE IMMEDIATE V_SQL_CMD;

V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8
  ( SELECT A.UPC ,
           A.SP ,
           A.PRODUCT_COST ,
           A.DEMAND ,
           A.IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
           CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
           OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK 
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTIMAL A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_CURRENT B
            ON A.UPC = B.UPC )'; EXECUTE IMMEDIATE V_SQL_CMD;

                     
V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8
SET OPTIMAL_WASTE_RECOVERY = CASE WHEN OPTIMAL_WASTE>CURRENT_WASTE THEN (2*OPTIMAL_WASTE_RECOVERY)/3 ELSE OPTIMAL_WASTE_RECOVERY END '; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8
where demand=0'; EXECUTE IMMEDIATE V_SQL_CMD;

V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8_1
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
           CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           CURRENT_WASTE / DEMAND ,
           CURRENT_SOLD_UNITS / DEMAND ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
         OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK ,
           OPTIMAL_WASTE / DEMAND ,
           OPTIMAL_SOLD_UNITS / DEMAND ,
           1 
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8  )'; EXECUTE IMMEDIATE V_SQL_CMD;
       

--CALCULATION OF KPIS FOR NON MAYLAND STORES
       
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3
  ( SELECT UPC ,
           UPT ,
           SUM(DEMAND) DEMAND  ,
           SUM(ON_HAND) ON_HAND  ,
           SUM(ORDERS) ORDERS  ,
           SUM(WASTE) WASTE  ,
           SUM(SOLD_UNITS) SOLD_UNITS  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3_DEPOT 
     WHERE DEPOT <> ''BY''
      GROUP BY UPC,UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;
         
         
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4
  ( SELECT A.UPC ,
           A.UPT ,
           B.IS_SRP ,
           B.TRAY_TYPE ,
           B.CURRENT_TRAY_TYPE ,
           B.CURRENT_UPT ,
           B.SP ,
           B.PRODUCT_COST ,
           A.DEMAND ,
           A.ORDERS ,
           A.WASTE ,
           A.SOLD_UNITS ,
           (A.DEMAND - A.SOLD_UNITS) LOST_SALES  ,
           A.SOLD_UNITS * B.primary_trans / A.UPT PRIMARY_TRANSPORT  ,
           A.SOLD_UNITS * B.TRAY_HIRE / A.UPT TRAY_HIRE_COST  ,
          A.SOLD_UNITS * B.DEPOT_RHD / A.UPT DEPOT_RHD_COST  ,
           A.SOLD_UNITS * B.TRAY_LENDING / A.UPT TRAY_LENDING_COST  ,
           A.SOLD_UNITS * B.STORE_HANDLING / A.UPT STORE_HANDLING_COST  ,
           A.SOLD_UNITS * B.EX_WORKS EX_WORKS_COST  ,
           A.SOLD_UNITS * B.SP SALES_REVENUE  ,
           A.SOLD_UNITS * B.PRODUCT_COST COST_OF_SOLD  ,
           A.WASTE * B.PRODUCT_COST * 0.6 WASTE_RECOVERY  ,
           A.WASTE / A.UPT * (B.primary_trans + B.TRAY_HIRE + B.DEPOT_RHD - B.TRAY_LENDING + B.STORE_HANDLING + (B.EX_WORKS * A.UPT)) COST_OF_WASTE  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_3 A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_LATEST B
            ON A.UPC = B.UPC
           AND A.UPT = B.UPT )'; EXECUTE IMMEDIATE V_SQL_CMD;
-------------------------------- STEP 3 -------------------------------------
--=============================================================================================================
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_CURRENT'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_CURRENT
  ( SELECT A.UPC ,
           MAX(SP) ,
           AVG(PRODUCT_COST) ,
           SUM(DEMAND) ,
           B.IS_SRP ,
           B.CURRENT_UPT ,
           B.CURRENT_TRAY_TYPE ,
           SUM(CURRENT_ORDERS) ,
           SUM(CURRENT_WASTE) ,
           SUM(CURRENT_SOLD_UNITS) ,
           SUM(CURRENT_LOST_SALES) ,
           SUM(CURRENT_PRIMARY_TRANSPORT) ,
           SUM(CURRENT_TRAY_HIRE_COST) ,
           SUM(CURRENT_DEPOT_RHD_COST) ,
           SUM(CURRENT_TRAY_LENDING_COST) ,
           SUM(CURRENT_STORE_HANDLING_COST) ,
           SUM(CURRENT_EX_WORKS_COST) ,
           SUM(CURRENT_SALES_REVENUE) ,
           SUM(CURRENT_COST_OF_SOLD) ,
           SUM(CURRENT_WASTE_RECOVERY) ,
           SUM(CURRENT_COST_OF_WASTE) ,
           SUM(CURRENT_E2E_COST) ,
           SUM(CURRENT_E2E_REVENUE) ,
           SUM(CURRENT_E2E_PROFIT) ,
           SUM(CURRENT_GROSS_SELLING_MARGIN) ,
           SUM(CURRENT_GROSS_PROFIT) ,
           SUM(CURRENT_NET_PROFIT) ,
           99 
    FROM idssc_hist_read_uod.' || v_category || '_uod_temp_table_7_curr_dpt A
           LEFT JOIN ( SELECT DISTINCT UPC ,
                                       CURRENT_UPT ,
                                       CURRENT_TRAY_TYPE ,
                                       IS_SRP 
                       FROM idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_LATEST  ) B
            ON A.UPC = B.UPC
     WHERE DEPOT <> ''BY''
      GROUP BY A.UPC,B.CURRENT_UPT,B.CURRENT_TRAY_TYPE,B.IS_SRP )'; EXECUTE IMMEDIATE V_SQL_CMD;
                     
                     


V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
SELECT UPC, 
          UPT,
          IS_SRP,
          TRAY_TYPE,
        CURRENT_TRAY_TYPE,
                CASE TRAY_TYPE
                           WHEN ''BROWN_TRAY'' THEN 8
                WHEN ''HALF_TRAY_2'' THEN 7
          WHEN ''HALF_TRAY_5'' THEN 6
          WHEN ''HALF_TRAY_7'' THEN 5
          WHEN ''METRIC_TRAY_2'' THEN 4
          WHEN ''METRIC_TRAY_5'' THEN 3
          WHEN (CASE CURRENT_TRAY_TYPE WHEN ''METRIC_TRAY_7'' THEN ''CARDBOARD'' ELSE ''METRIC_TRAY_7'' END) THEN 2
          ELSE 1
               END,
          CURRENT_UPT,
          SP,
          PRODUCT_COST,
          DEMAND,
          ORDERS,
          WASTE,
          SOLD_UNITS,
          LOST_SALES,
          PRIMARY_TRANSPORT,
          TRAY_HIRE_COST,
          DEPOT_RHD_COST,
          TRAY_LENDING_COST,
          STORE_HANDLING_COST,
          EX_WORKS_COST,
          SALES_REVENUE,
          COST_OF_SOLD,
          WASTE_RECOVERY,
          COST_OF_WASTE ,
          (PRIMARY_TRANSPORT + TRAY_HIRE_COST + DEPOT_RHD_COST  + STORE_HANDLING_COST + EX_WORKS_COST + COST_OF_WASTE) AS E2E_COST,
          (SALES_REVENUE+ TRAY_LENDING_COST ) AS E2E_REVENUE,
          (SALES_REVENUE + (TRAY_LENDING_COST-TRAY_HIRE_COST) - PRIMARY_TRANSPORT - DEPOT_RHD_COST  - STORE_HANDLING_COST - EX_WORKS_COST -  COST_OF_WASTE) AS E2E_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) AS GROSS_SELLING_MARGIN,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY AS GROSS_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY- DEPOT_RHD_COST - STORE_HANDLING_COST AS NET_PROFIT
FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_4'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
WHERE TRAY_TYPE IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
WHERE E2E_PROFIT IS NULL'; EXECUTE IMMEDIATE V_SQL_CMD;

v_sql_cmd := 'delete FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5
WHERE tray_type=''CARDBOARD'' and current_tray_type2 <>''CARDBOARD'''; EXECUTE IMMEDIATE V_SQL_CMD;

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6
  SELECT UPC ,
         UPT ,
         IS_SRP ,
         TRAY_TYPE ,
         CURRENT_TRAY_TYPE2 ,
         TRAY_PRIOIRTY ,
         CURRENT_UPT ,
         SP ,
         PRODUCT_COST ,
         DEMAND ,
         ORDERS ,
         WASTE ,
         SOLD_UNITS ,
         LOST_SALES ,
         PRIMARY_TRANSPORT ,
         TRAY_HIRE_COST ,
         DEPOT_RHD_COST ,
         TRAY_LENDING_COST ,
         STORE_HANDLING_COST ,
         EX_WORKS_COST ,
         SALES_REVENUE ,
         COST_OF_SOLD ,
         WASTE_RECOVERY ,
         COST_OF_WASTE ,
         E2E_COST ,
         E2E_REVENUE ,
         E2E_PROFIT ,
         GROSS_SELLING_MARGIN ,
         GROSS_PROFIT ,
         NET_PROFIT ,
         RANK() OVER ( PARTITION BY UPC ORDER BY E2E_PROFIT DESC, TRAY_PRIOIRTY DESC  ) PROFIT_RANK  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_5 '; EXECUTE IMMEDIATE V_SQL_CMD;
       


v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTIMAL';  execute immediate v_sql_cmd;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTIMAL
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           UPT OPTIMAL_UPT  ,
           TRAY_TYPE OPTIMAL_TRAY_TYPE  ,
           ORDERS OPTIMAL_ORDERS  ,
           WASTE OPTIMAL_WASTE  ,
           SOLD_UNITS OPTIMAL_SOLD_UNITS  ,
           LOST_SALES OPTIMAL_LOST_SALES  ,
           PRIMARY_TRANSPORT OPTIMAL_PRIMARY_TRANSPORT  ,
           TRAY_HIRE_COST OPTIMAL_TRAY_HIRE_COST  ,
           DEPOT_RHD_COST OPTIMAL_DEPOT_RHD_COST  ,
           TRAY_LENDING_COST OPTIMAL_TRAY_LENDING_COST  ,
           STORE_HANDLING_COST OPTIMAL_STORE_HANDLING_COST  ,
           EX_WORKS_COST OPTIMAL_EX_WORKS_COST  ,
           SALES_REVENUE OPTIMAL_SALES_REVENUE  ,
           COST_OF_SOLD OPTIMAL_COST_OF_SOLD  ,
           WASTE_RECOVERY OPTIMAL_WASTE_RECOVERY  ,
           COST_OF_WASTE OPTIMAL_COST_OF_WASTE  ,
           E2E_COST OPTIMAL_E2E_COST  ,
           E2E_REVENUE OPTIMAL_E2E_REVENUE  ,
           E2E_PROFIT OPTIMAL_E2E_PROFIT  ,
           GROSS_SELLING_MARGIN OPTIMAL_GROSS_SELLING_MARGIN  ,
           GROSS_PROFIT OPTIMAL_GROSS_PROFIT  ,
           NET_PROFIT OPTIMAL_NET_PROFIT  ,
           PROFIT_RANK OPTIMAL_PROFIT_RANK  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6 
     WHERE PROFIT_RANK = 1 )'; EXECUTE IMMEDIATE V_SQL_CMD;
       
        
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8
  ( SELECT A.UPC ,
           A.SP ,
           A.PRODUCT_COST ,
           A.DEMAND ,
           A.IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
          CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
           OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK 
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTIMAL A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_CURRENT B
            ON A.UPC = B.UPC )'; EXECUTE IMMEDIATE V_SQL_CMD;

                     
              
V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8
SET OPTIMAL_WASTE_RECOVERY = CASE WHEN OPTIMAL_WASTE>CURRENT_WASTE THEN (2*OPTIMAL_WASTE_RECOVERY)/3 ELSE OPTIMAL_WASTE_RECOVERY END '; EXECUTE IMMEDIATE V_SQL_CMD;


v_sql_cmd := 'delete FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8 WHERE DEMAND = 0'; EXECUTE IMMEDIATE V_SQL_CMD;



V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8_1
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
           CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           CURRENT_WASTE / DEMAND ,
           CURRENT_SOLD_UNITS / DEMAND ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
           OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK ,
           OPTIMAL_WASTE / DEMAND ,
           OPTIMAL_SOLD_UNITS / DEMAND ,
           2 
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8  )'; EXECUTE IMMEDIATE V_SQL_CMD;


--CALCULATION OF STOCKING POINT--

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_STOCKING_POINT'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_STOCKING_POINT    
(         
SELECT /*+parallel(6)*/ C.* , F.TOTAL, F.STOCKING_POINTS AS CURRENT_S, E.STOCKING_POINTS AS OPTIMAL_S FROM 
(SELECT UPC, OPTIMAL_UPT,CURRENT_UPT FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8_1 WHERE MAYLAND = 3)C
LEFT JOIN 
(SELECT D.UPC, D.UPT, COUNT(*) AS TOTAL, SUM(FLAG) AS STOCKING_POINTS
FROM 
(SELECT A.UPC, A.STORECODE, A.UPT , (CASE WHEN (1 - (COALESCE (B.ABC, 0)/ A.ABC1 )) > = 0.8 THEN 1 ELSE 0 END) AS FLAG
FROM 
(SELECT UPC, STORECODE, UPT,COUNT(*) AS ABC1  FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_STORE_ORDERS WHERE DEMAND > 0  GROUP BY UPC, STORECODE, UPT)A
LEFT JOIN 
(SELECT UPC, STORECODE, UPT,COUNT(*) AS ABC  FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_STORE_ORDERS WHERE ON_HAND < DEMAND AND ORDERS = 0 GROUP BY UPC, STORECODE, UPT)B
ON A.UPC = B.UPC AND A.STORECODE= B.STORECODE AND A.UPT = B.UPT
) D 
GROUP BY D.UPC, D.UPT)F
ON C.UPC= F.UPC AND C.CURRENT_UPT = F.UPT
LEFT JOIN 
(SELECT G.UPC, G.UPT, COUNT(*) AS TOTAL, SUM(FLAG) AS STOCKING_POINTS
FROM 
(SELECT H.UPC, H.STORECODE, H.UPT , (CASE WHEN (1 - (COALESCE (I.ABC, 0)/ H.ABC1 )) > 0.8 THEN 1 ELSE 0 end) AS FLAG
FROM 
(SELECT UPC, STORECODE, UPT,COUNT(*) AS ABC1  FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_STORE_ORDERS WHERE DEMAND > 0  GROUP BY UPC, STORECODE, UPT)H
LEFT JOIN 
(SELECT UPC, STORECODE, UPT,COUNT(*) AS ABC  FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_STORE_ORDERS WHERE ON_HAND < DEMAND AND ORDERS = 0 GROUP BY UPC, STORECODE, UPT)I
ON H.UPC = I.UPC AND H.STORECODE= I.STORECODE AND H.UPT = I.UPT
) G
GROUP BY G.UPC, G.UPT)E
ON C.UPC= E.UPC AND C.OPTIMAL_UPT = E.UPT)'; EXECUTE IMMEDIATE V_SQL_CMD;

commit;

--FINAL TABLE AT UPC LEVEL FOR 3 SCENARIOS WITH STOCKING POINT--

--recommendation table for spotfire 
--contains all categories
--truncated once before the model run
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_reco_latest'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_reco_latest
  ( SELECT /*+parallel(4)*/
       A.*, B.OPTIMAL_STOCKING_PT/b.total,B.B.CURRENT_STOCKING_PT/b.total, :a,:b,:c-:d+1
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_8_1 A left join idssc_hist_read_uod.' || v_category || '_uod_STOCKING_POINT B ON A.UPC=B.UPC )'; 
                EXECUTE IMMEDIATE V_SQL_CMD USING V_START_DATE, V_END_DATE, V_END_DATE, V_START_DATE;

commit;


--repository with timestamp
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.uod_recommendations_final_cat
  ( SELECT a.*, systimestamp from idssc_hist_read_uod.' || v_category || '_uod_reco_latest a)';
                EXECUTE IMMEDIATE V_SQL_CMD;


V_SQL_CMD := 'SELECT count(distinct upc) from idssc_hist_read_uod.' || v_category || '_uod_reco_latest';
                EXECUTE IMMEDIATE V_SQL_CMD INTO V_C1;
                
                V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                VALUES(''MODEL OUTPUT'',''MODEL RESULTS HAVE BEEN CALCULATED FOR ' || V_C1 || ' UPCs'',SYSTIMESTAMP)'; EXECUTE IMMEDIATE V_SQL_CMD;
                COMMIT; 
                 

----------------------------------------------------   

   
 V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTI_DPT'; EXECUTE IMMEDIATE V_SQL_CMD;

V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTI_DPT
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           DEPOT ,
           UPT CURRENT_UPT  ,
           TRAY_TYPE CURRENT_TRAY_TYPE  ,
           ORDERS CURRENT_ORDERS  ,
           WASTE CURRENT_WASTE  ,
           SOLD_UNITS CURRENT_SOLD_UNITS  ,
           LOST_SALES CURRENT_LOST_SALES  ,
           PRIMARY_TRANSPORT CURRENT_PRIMARY_TRANSPORT  ,
           TRAY_HIRE_COST CURRENT_TRAY_HIRE_COST  ,
           DEPOT_RHD_COST CURRENT_DEPOT_RHD_COST  ,
           TRAY_LENDING_COST CURRENT_TRAY_LENDING_COST  ,
           STORE_HANDLING_COST CURRENT_STORE_HANDLING_COST  ,
           EX_WORKS_COST CURRENT_EX_WORKS_COST  ,
           SALES_REVENUE CURRENT_SALES_REVENUE  ,
           COST_OF_SOLD CURRENT_COST_OF_SOLD  ,
           WASTE_RECOVERY CURRENT_WASTE_RECOVERY  ,
           COST_OF_WASTE CURRENT_COST_OF_WASTE  ,
           E2E_COST CURRENT_E2E_COST  ,
           E2E_REVENUE CURRENT_E2E_REVENUE  ,
           E2E_PROFIT CURRENT_E2E_PROFIT  ,
           GROSS_SELLING_MARGIN CURRENT_GROSS_SELLING_MARGIN  ,
           GROSS_PROFIT CURRENT_GROSS_PROFIT  ,
           NET_PROFIT CURRENT_NET_PROFIT  ,
           PROFIT_RANK CURRENT_PROFIT_RANK  
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_6_DEPOT 
     WHERE PROFIT_RANK = 1 )'; EXECUTE IMMEDIATE V_SQL_CMD;
       
v_sql_cmd := 'delete idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTI_DPT WHERE DEMAND = 0'; EXECUTE IMMEDIATE V_SQL_CMD;

--repository of depot level recommendations with time stamp
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.uod_rec_depot_cat
  ( SELECT A.UPC ,
           A.SP ,
           A.PRODUCT_COST ,
           A.DEPOT ,
           A.DEMAND ,
           A.IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
           CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           CURRENT_WASTE / A.DEMAND ,
           CURRENT_SOLD_UNITS / A.DEMAND ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
           OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK ,
           OPTIMAL_WASTE / A.DEMAND ,
           OPTIMAL_SOLD_UNITS / A.DEMAND ,
           3,
                                   systimestamp
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTI_DPT A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_temp_table_7_curr_dpt B
            ON A.UPC = B.UPC
           AND A.DEPOT = B.DEPOT )'; EXECUTE IMMEDIATE V_SQL_CMD;
                 
                 
V_SQL_CMD := 'UPDATE idssc_hist_read_uod.uod_rec_depot_cat
SET OPTIMAL_WASTE_RECOVERY = CASE WHEN OPTIMAL_WASTE>CURRENT_WASTE THEN (2*OPTIMAL_WASTE_RECOVERY)/3 ELSE OPTIMAL_WASTE_RECOVERY END '; EXECUTE IMMEDIATE V_SQL_CMD;

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_rec_depot';
EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_rec_depot
  ( SELECT A.UPC ,
           A.SP ,
           A.PRODUCT_COST ,
           A.DEPOT ,
           A.DEMAND ,
           A.IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
           CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           CURRENT_WASTE / A.DEMAND ,
           CURRENT_SOLD_UNITS / A.DEMAND ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
           OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK ,
           OPTIMAL_WASTE / A.DEMAND ,
           OPTIMAL_SOLD_UNITS / A.DEMAND ,
           3
                                   
    FROM idssc_hist_read_uod.' || v_category || '_uod_TEMP_TABLE_7_OPTI_DPT A
           LEFT JOIN idssc_hist_read_uod.' || v_category || '_uod_temp_table_7_curr_dpt B
            ON A.UPC = B.UPC
           AND A.DEPOT = B.DEPOT )'; EXECUTE IMMEDIATE V_SQL_CMD;
                 
                 
V_SQL_CMD := 'UPDATE idssc_hist_read_uod.' || v_category || '_uod_rec_depot
SET OPTIMAL_WASTE_RECOVERY = CASE WHEN OPTIMAL_WASTE>CURRENT_WASTE THEN (2*OPTIMAL_WASTE_RECOVERY)/3 ELSE OPTIMAL_WASTE_RECOVERY END '; EXECUTE IMMEDIATE V_SQL_CMD;


  -----------------------------------------------------
  --ROLLUP DATA for repository with timestamp--

  --rollup data to referred by spotfire
--all categories will insert to this table
--will be truncated once before the model runs
  V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_daily_orders';
EXECUTE IMMEDIATE V_SQL_CMD;                              
  V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_daily_orders
  ( SELECT UPC ,
           UPT ,
           SUM(DEMAND) DEMAND  ,
           SUM(ON_HAND) ON_HAND  ,
           SUM(ORDERS) ORDERS  ,
           SUM(CASE ORDERS
                          WHEN 0 THEN 0
               ELSE WASTE
                  END) WASTE  ,
           SUM(SOLD_UNITS) SOLD_UNITS  ,
           FDATE
    FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_STORE_ORDERS 
     WHERE FDATE >= :a
             AND FDATE <= :b      
    GROUP BY UPC,UPT,FDATE )'; EXECUTE IMMEDIATE V_SQL_CMD using V_START_DATE, V_END_DATE;
         
         V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.uod_daily_orders_cat
  ( SELECT a.*, systimestamp
    FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_ORDERS a)'; EXECUTE IMMEDIATE V_SQL_CMD;


V_SQL_CMD := 'select count(distinct upc) from idssc_hist_read_uod.' || v_category || '_uod_DAILY_ORDERS'; 
EXECUTE IMMEDIATE V_SQL_CMD INTO V_C1 ;
                
                V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                VALUES(''MODEL OUTPUT'',''ROLLUP DATA HAVE BEEN PREPARED FOR ' || V_C1 || ' UPCs'',SYSTIMESTAMP)'; EXECUTE IMMEDIATE V_SQL_CMD;
                COMMIT;
				

--=============================================================================================================				
				
V_SQL_CMD := 'truncate table idssc_hist_read_uod.' || v_category || '_uod_temp_table_3_date'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'insert into idssc_hist_read_uod.' || v_category || '_uod_temp_table_3_date
   select UPC, 
          upt, 
          fdate,
          sum(demand) AS demand,
          sum(on_hand) AS on_hand, 
          sum(orders) AS orders,
          sum(case orders when 0 then 0 else Waste end) AS Waste,
          sum(Sold_Units) AS Sold_Units
from idssc_hist_read_uod.' || v_category || '_uod_DAILY_ORDERS
group by UPC, 
          upt, 
          fdate'; EXECUTE IMMEDIATE V_SQL_CMD;
         

V_SQL_CMD := 'truncate table idssc_hist_read_uod.' || v_category || '_uod_temp_table_4_date'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'insert into idssc_hist_read_uod.' || v_category || '_uod_temp_table_4_date
select    a.UPC, 
          a.upt,
          a.fdate,
          b.is_srp,
          b.tray_type,
          b.Current_tray_type,
         b.current_upt,
          b.sp,
          b.Product_Cost,
          a.demand,
          a.orders,
          a.Waste,
          a.Sold_Units,
         (a.demand-a.Sold_Units) as lost_sales,
          a.Sold_Units*b.primary_Trans/a.upt AS Primary_transport,
          a.Sold_Units*b.Tray_hire/a.upt AS Tray_hire_cost,
          a.Sold_Units*b.Depot_RHD/a.upt AS Depot_RHD_cost,
          a.Sold_Units*b.Tray_lending/a.upt AS Tray_lending_cost,
          a.Sold_Units*b.Store_handling/a.upt AS Store_handling_cost,
          a.Sold_Units*b.ex_works AS ex_works_cost,
          a.Sold_Units*b.sp as Sales_Revenue,
          a.Sold_Units*b.Product_cost as Cost_of_sold,
          a.Waste*b.Product_Cost*0.6 as Waste_Recovery,
          a.Waste/a.upt *(b.primary_Trans+b.Tray_hire+b.Depot_RHD-b.Tray_lending + b.Store_handling + (b.ex_works*a.upt)) as Cost_of_waste
from idssc_hist_read_uod.' || v_category || '_uod_temp_table_3_date a 

right join idssc_hist_read_uod.' || v_category || '_uod_prod_descr_current b
on a.UPC = b.UPC
and a.upt = b.upt'; EXECUTE IMMEDIATE V_SQL_CMD;


V_SQL_CMD := 'truncate table idssc_hist_read_uod.' || v_category || '_uod_temp_table_5_date'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'insert into idssc_hist_read_uod.' || v_category || '_uod_temp_table_5_date
select UPC, 
          upt,
                fdate,
          is_srp,
          tray_type,
          Current_tray_type,
          case tray_type
                           when ''BROWN_TRAY'' then 8
                when ''HALF_TRAY_2'' then 7
          when ''HALF_TRAY_5'' then 6
          when ''HALF_TRAY_7'' then 5
          when ''METRIC_TRAY_2'' then 4
          when ''METRIC_TRAY_5'' then 3
          when case Current_tray_type when ''METRIC_TRAY_7'' then ''CARDBOARD'' else ''METRIC_TRAY_7'' END then 2
          else 1
               end,
          Current_UPT,
          sp,
          Product_Cost,
          demand,
         orders,
          Waste,
          Sold_Units,
          lost_sales,
          Primary_transport,
          Tray_hire_cost,
          Depot_RHD_cost,
          Tray_lending_cost,
          Store_handling_cost,
          ex_works_cost,
          Sales_Revenue,
          Cost_of_sold,
          Waste_Recovery,
          Cost_of_waste,

                 (Primary_transport + Tray_hire_cost + Depot_RHD_cost  + Store_handling_cost + ex_works_cost + cost_of_waste) as E2E_Cost,
          (Sales_Revenue+ Tray_lending_cost ) as E2E_revenue,
          (Sales_Revenue + (Tray_lending_cost-Tray_hire_cost) - Primary_transport - Depot_RHD_cost  - Store_handling_cost - ex_works_cost -  cost_of_waste) as E2E_Profit,
          (Sales_Revenue-Cost_of_sold) as Gross_selling_margin,
          (Sales_Revenue-Cost_of_sold) + Waste_Recovery as Gross_profit,
          (Sales_Revenue-Cost_of_sold) + Waste_Recovery- Depot_RHD_cost - Store_handling_cost as Net_profit
from idssc_hist_read_uod.' || v_category || '_uod_temp_table_4_date'; EXECUTE IMMEDIATE V_SQL_CMD;


V_SQL_CMD := 'truncate table idssc_hist_read_uod.uod_current_upt_data'; EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'insert into idssc_hist_read_uod.uod_current_upt_data(
select UPC          ,
DEMAND             ,
FDATE   ,
UPT        ,
TRAY_TYPE         ,
ORDERS                ,
WASTE  ,
SOLD_UNITS      ,
PRIMARY_TRANSPORT  ,
TRAY_HIRE_COST            ,
DEPOT_RHD_COST          ,
TRAY_LENDING_COST   ,
STORE_HANDLING_COST             ,
EX_WORKS_COST            ,
SALES_REVENUE              ,
WASTE_RECOVERY          ,
COST_OF_WASTE            ,
E2E_PROFIT        ,
systimestamp
from idssc_hist_read_uod.' || v_category || '_uod_temp_table_5_date)'; EXECUTE IMMEDIATE V_SQL_CMD;

--------------------------------------------------------------------------------------------------------------------------
v_sql_cmd := 'INSERT INTO idssc_hist_read_uod.uod_prod_descr_FINAL_cat
  ( SELECT 
   a.*, systimestamp
    FROM idssc_hist_read_uod.' || v_category || '_uod_PROD_DESCR_latest a)'; EXECUTE IMMEDIATE V_SQL_CMD;
    commit;
    
    
--Product attribute table
--repository with timestamp for all categories
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.' || v_category || '_uod_PRODUCT_ATTRIBUTE';
EXECUTE IMMEDIATE V_SQL_CMD;
V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_uod_PRODUCT_ATTRIBUTE
(SELECT /*+parallel(4)*/
A.UPC,
B.NAME,
CONCAT(B.CATEGORY_ID,CONCAT(''-'',B.CATEGORY)),
B.SPR_GRP_CODE       ,
B.SPR_GRP_NAME       ,
B.PRD_GRP_CODE       ,
B.PRD_GRP_NAME       ,
C.VENDOR,
CONCAT(A.UPC,CONCAT(''-'',B.NAME)),
D.SP,
D.CP,
0,
E.MAX_LIFE,
G.RANGEDSTORES, 
G.ROS_STORE_DAY,
G.ROS_DAY,     
(SELECT COUNT(DISTINCT STORECODE) FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_STORE_ORDERS WHERE DEPOT = ''BY'' AND UPC=A.UPC),
A.product_cost,
(CASE WHEN A.product_cost < D.CP 
      THEN (A.product_cost + ((CASE WHEN (A.optimal_e2e_profit-a.current_e2e_profit)<0 THEN 0 ELSE (A.optimal_e2e_profit-a.current_e2e_profit) END)/(A.OPTIMAL_SOLD_UNITS + A.OPTIMAL_WASTE)))
      ELSE A.product_cost END) AS CRITICAL_CP
FROM (SELECT * FROM idssc_hist_read_uod.' || v_category || '_uod_RECO_latest WHERE MAYLAND=3) A LEFT JOIN
idssc_hist.MAN_PRODUCT_DIMENSION B ON A.UPC=B.UPC LEFT JOIN
(SELECT DISTINCT Y.UPC, COALESCE(Z.VENDOR_NAME, TO_CHAR(Y.source_id)) AS VENDOR FROM idssc_hist_read_uod.' || v_category || '_UOD_UPC_VENDOR Y LEFT JOIN IDSSC_HIST.MAN_TRAY_VOLUME Z ON Y.SOURCE_ID = SUBSTR(Z.VENDOR_NO,3,4)) C ON A.UPC=C.UPC LEFT JOIN
idssc_hist_read_uod.' || v_category || '_uod_COST_FINAL D ON A.UPC=D.UPC LEFT JOIN
idssc_hist_read_uod.' || v_category || '_uod_MAX_LIFE E ON A.UPC=E.UPC left join
(SELECT UPC, COUNT(DISTINCT STORECODE) AS RANGEDSTORES ,SUM(DEMAND)/COUNT(DISTINCT STORECODE)/COUNT(DISTINCT FDATE) AS ROS_STORE_DAY,
SUM(DEMAND)/COUNT(DISTINCT FDATE) AS ROS_DAY FROM idssc_hist_read_uod.' || v_category || '_uod_DAILY_STORE_ORDERS GROUP BY UPC) G ON A.UPC=G.UPC)';
EXECUTE IMMEDIATE V_SQL_CMD;

commit;



--product attribute to referred by spotfire
--all categories will insert to this table
--will be truncated once before the model runs

V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.uod_PRODUCT_ATTRIBUTE_cat
(SELECT
UPC,
NAME,
CATEGORY,
SG_CODE,
SG_NAME,
PG_CODE,
PG_NAME,
SUPPLIER,
UPCNAME,
SELLING_PRICE,
COST_PRICE,
WEIGHT,
SHELFLIFE,
RANGEDSTORES,
ROS_STORE_DAY,
ROS_DAY,
MAYLAND_STORES,
OPTIMAL_CP,
CRITICAL_CP,
systimestamp
from idssc_hist_read_uod.' || v_category || '_uod_PRODUCT_ATTRIBUTE)';
EXECUTE IMMEDIATE V_SQL_CMD;

commit;


V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.' || v_category || '_qc_INTER_TABLES
                VALUES(''MODEL OUTPUT'',''MODEL E2E EXECUTION COMPLETED'',SYSTIMESTAMP)'; EXECUTE IMMEDIATE V_SQL_CMD;
                COMMIT;
                

END;




create or replace
PROCEDURE idssc_hist_read_uod.UOD_MODEL_E2E
(
   V_START_DATE IN DATE,
   V_END_DATE IN DATE,
   v_CATEGORY IN NVARCHAR2
)
AS
---------------------------------------------------------------
-- Procedure for transformation of IDS feeds to required schema
BEGIN
idssc_hist_read_uod.UOD_PROC_TRANSFORMATIONS(V_END_DATE,V_CATEGORY);

---------------------------------------------------------------

--Procedure for calculation of product_description (all UPC-UPT-Tray combination with tray costs)

--Procedure UOD_PROC_PROD_DESC_CAL starts with the calculation of the maximum permissible UPT for each UPC based on the product and tray dimensions(line 121-361). 
--Once this is done, the current tray type for each UPC is calculated (line 365-435).
--The Max UPT is capped with maximum observable UPT from the historical data for a UPC where the former is lesser than the later (line 468- 508).
--Once this is done, the exhaustive list of all possible UPT value for all products is created(using the procedure- UOD_PROC_ROW_WISE_UPT- line 25)
--The above table is used in the order plan simulation part
--This procedure also includes the calculation of the most occuring current UPT across the chain, current upt in a depot (line 530-676), SP(line 716-747) and CP(line 758-852) from corresponding base table which has the historical data as well.
--The next step in this procedure calculates the exhaustive list of UPC - UPT - Tray type combination from the maximum UPT table (using the procedure- UOD_PROC_ROW_WISE_UPT)
--Once this is done, the tray specific costs are added to the above table for KPI calculations, and various other UPC and tray specific attributes are added to the table
--The final table is called UOD_PRODUCT_DESCRIPTION_FINAL


idssc_hist_read_uod.UOD_PROC_PROD_DESC_CAL(V_END_DATE,V_START_DATE,V_CATEGORY);
-----------------------------------------------------------------------------------------------------------------------------------------


--Procedure for creation of order plan at UPC-Store-date-upt level

--1. This is the simulation part of the model
--2. The procedure is used in creating the order plan using the weekly forecast data and other data feeds like product/store attributes, etc

--3. The order plan procedure calls a number of sub-procedures, functions. Each of these procedures and functions have specific functionalities.

--4. The procedure begins at line 649. The codes above that are the sub-procedures, functions called by the order plan procedure.

--5. The first step is to select the latest forecast data based on the forecast begin date (line 662-740)

--6. once we have the latest forecast data, we join various UPC and store attributes to the forecast data.(Line 744-796) 

--7. The next step is to convert the forecast data at upc-store-level(weekly forecast in columns) to daily forecast ast UPC-Store_date level using the DOW Profiles. 
--    For this, the Procedure UOD_PROC_APPEND_TRANSFORM is called. This procedure( called in line 795,defined in line 49), in turn calls the 
--    Procedure UOD_PROC_APPEND_WEEKLY(called in line 86, defined in line 2). The final output after execution of these two sub-procedure is the daily demand table at UPC-store-date level.

--8. Once the daily demand table with product/store attributes are created, the order plan is run (Using the EOD stock for previous day).

--9. The procedure UOD_PROC_ORDER_PLAN_GENE_DAY1 creates the order plan for 1st day and UOD_PROC_ORDER_PLAN_GENE_ALL runs the order plan for remaining number of days.

--10.Both of the above procedures call multiple functions for the calculation of target inventory, Demand over life, Orders, Waste etc.

--11. Section 5 of the design document has the high level flow of the procedures and function calls along with the description of each

idssc_hist_read_uod.UOD_PROC_ORDER_PLAN(V_END_DATE,V_START_DATE,V_CATEGORY);


--Procedure for calculation of KPIs and Optimal UPT

idssc_hist_read_uod.UOD_PROC_KPI_CAL(V_END_DATE,V_START_DATE,V_CATEGORY);
END;




create or replace
procedure idssc_hist_read_uod.uod_proc_collate
AS
v_sql_cmd varchar2(10000);

BEGIN

--PROCEDURE TO COLLATE RESULTS FROM ALL CATEGORIES TO SPOTFIRE TABLES--
--TO BE RUN AFTER MODEL RUN FOR ALL CATEGORIES IS COMPLETED--


-- TABLE TO HOLD MODEL RESULTS AT UPC LEVEL--

v_sql_cmd := 'truncate table idssc_hist_read_uod.uod_recommendations_final'; EXECUTE IMMEDIATE V_SQL_CMD;
insert into idssc_hist_read_uod.uod_recommendations_final(
select 
                UPC ,
   SP  ,
   PRODUCT_COST  ,
  DEMAND  ,
   IS_SRP  ,
   CURRENT_UPT  ,
   CURRENT_TRAY_TYPE  ,
   CURRENT_ORDERS  ,
   CURRENT_WASTE  ,
   CURRENT_SOLD_UNITS  ,
   CURRENT_LOST_SALES  ,
   CURRENT_PRIMARY_TRANSPORT  ,
   CURRENT_TRAY_HIRE_COST  ,
   CURRENT_DEPOT_RHD_COST  ,
   CURRENT_TRAY_LENDING_COST  ,
   CURRENT_STORE_HANDLING_COST  ,
   CURRENT_EX_WORKS_COST  ,
   CURRENT_SALES_REVENUE  ,
   CURRENT_COST_OF_SOLD  ,
   CURRENT_WASTE_RECOVERY  ,
   CURRENT_COST_OF_WASTE  ,
   CURRENT_E2E_COST  ,
   CURRENT_E2E_REVENUE  ,
  CURRENT_E2E_PROFIT  ,
   CURRENT_GROSS_SELLING_MARGIN  ,
   CURRENT_GROSS_PROFIT  ,
   CURRENT_NET_PROFIT  ,
   CURRENT_PROFIT_RANK  ,
   CURRENT_WASTE_PER  ,
   CURRENT_SERVICE_LEVEL  ,
   OPTIMAL_UPT  ,
   OPTIMAL_TRAY_TYPE ,
   OPTIMAL_ORDERS  ,
   OPTIMAL_WASTE  ,
   OPTIMAL_SOLD_UNITS  ,
   OPTIMAL_LOST_SALES  ,
   OPTIMAL_PRIMARY_TRANSPORT  ,
   OPTIMAL_TRAY_HIRE_COST  ,
   OPTIMAL_DEPOT_RHD_COST  ,
   OPTIMAL_TRAY_LENDING_COST  ,
   OPTIMAL_STORE_HANDLING_COST  ,
   OPTIMAL_EX_WORKS_COST  ,
   OPTIMAL_SALES_REVENUE  ,
   OPTIMAL_COST_OF_SOLD  ,
   OPTIMAL_WASTE_RECOVERY  ,
   OPTIMAL_COST_OF_WASTE  ,
   OPTIMAL_E2E_COST  ,
   OPTIMAL_E2E_REVENUE  ,
   OPTIMAL_E2E_PROFIT  ,
   OPTIMAL_GROSS_SELLING_MARGIN  ,
   OPTIMAL_GROSS_PROFIT  ,
   OPTIMAL_NET_PROFIT  ,
   OPTIMAL_PROFIT_RANK  ,
   OPTIMAL_WASTE_PER  ,
   OPTIMAL_SERVICE_LEVEL  ,
   MAYLAND ,
   OPTIMAL_STOCKING_POINT*100 ,
   CURRENT_STOCKING_POINT*100 ,
   START_DT,
   END_DT,
   NO_DAYS 
from idssc_hist_read_uod.uod_recommendations_final_cat where runtime>(select max(model_start_time) from idssc_hist_read_uod.model_timestamp));

                                                update idssc_hist_read_uod.uod_recommendations_final
          SET current_tray_type='Metric Tray 7"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_7';
                                                update idssc_hist_read_uod.uod_recommendations_final
          SET current_tray_type='Metric Tray 5"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_5';
                                   update idssc_hist_read_uod.uod_recommendations_final
          SET current_tray_type='Metric Tray 2"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_2';
                                   update idssc_hist_read_uod.uod_recommendations_final
          SET current_tray_type='Half Tray Full Height' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_7';
                                   update idssc_hist_read_uod.uod_recommendations_final
          SET current_tray_type='Half Tray Nested' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_5';
                                   update idssc_hist_read_uod.uod_recommendations_final
          SET current_tray_type='Half Tray Nested' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_5';
      update idssc_hist_read_uod.uod_recommendations_final
          SET current_tray_type='Brown Tray' WHERE CURRENT_TRAY_TYPE='BROWN_TRAY';
                                   update idssc_hist_read_uod.uod_recommendations_final
          SET current_tray_type='Cardboard' WHERE CURRENT_TRAY_TYPE='CARDBOARD';



                                  update idssc_hist_read_uod.uod_recommendations_final
          SET OPTIMAL_TRAY_TYPE='Metric Tray 7"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_7';
                                                update idssc_hist_read_uod.uod_recommendations_final
          SET OPTIMAL_TRAY_TYPE='Metric Tray 5"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_5';
                                   update idssc_hist_read_uod.uod_recommendations_final
          SET OPTIMAL_TRAY_TYPE='Metric Tray 5"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_2';
                                   update idssc_hist_read_uod.uod_recommendations_final
          SET OPTIMAL_TRAY_TYPE='Half Tray Full Height' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_7';
                                   update idssc_hist_read_uod.uod_recommendations_final
          SET OPTIMAL_TRAY_TYPE='Half Tray Nested' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_5';
                                   update idssc_hist_read_uod.uod_recommendations_final
          SET OPTIMAL_TRAY_TYPE='Half Tray Nested' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_5';
   update idssc_hist_read_uod.uod_recommendations_final
          SET OPTIMAL_tray_type='Brown Tray' WHERE OPTIMAL_tray_type='BROWN_TRAY';
                                   update idssc_hist_read_uod.uod_recommendations_final
          SET OPTIMAL_tray_type='Cardboard' WHERE OPTIMAL_tray_type='CARDBOARD';
   


-- TABLE TO HOLD MODEL RESULTS AT DEPOT LEVEL--

v_sql_cmd := 'truncate table idssc_hist_read_uod.uod_recommendations_depot'; EXECUTE IMMEDIATE V_SQL_CMD;
insert into idssc_hist_read_uod.uod_recommendations_depot(
select 
 a.UPC ,
   a.SP ,
   a.PRODUCT_COST ,
   b.DEPOT_name ,
   a.DEMAND ,
   a.IS_SRP ,
   a.CURRENT_UPT ,
   a.CURRENT_TRAY_TYPE  ,
   a.CURRENT_ORDERS ,
   a.CURRENT_WASTE ,
   a.CURRENT_SOLD_UNITS ,
   a.CURRENT_LOST_SALES ,
   a.CURRENT_PRIMARY_TRANSPORT ,
   a.CURRENT_TRAY_HIRE_COST ,
   a.CURRENT_DEPOT_RHD_COST ,
   a.CURRENT_TRAY_LENDING_COST ,
   a.CURRENT_STORE_HANDLING_COST ,
   a.CURRENT_EX_WORKS_COST ,
   a.CURRENT_SALES_REVENUE ,
   a.CURRENT_COST_OF_SOLD ,
   a.CURRENT_WASTE_RECOVERY ,
   a.CURRENT_COST_OF_WASTE ,
   a.CURRENT_E2E_COST ,
   a.CURRENT_E2E_REVENUE ,
   a.CURRENT_E2E_PROFIT ,
   a.CURRENT_GROSS_SELLING_MARGIN ,
   a.CURRENT_GROSS_PROFIT ,
   a.CURRENT_NET_PROFIT ,
   a.CURRENT_PROFIT_RANK ,
   a.CURRENT_WASTE_PER ,
   a.CURRENT_SERVICE_LEVEL ,
   a.OPTIMAL_UPT  ,
   a.OPTIMAL_TRAY_TYPE  ,
   a.OPTIMAL_ORDERS ,
   a.OPTIMAL_WASTE ,
   a.OPTIMAL_SOLD_UNITS ,
   a.OPTIMAL_LOST_SALES ,
   a.OPTIMAL_PRIMARY_TRANSPORT ,
   a.OPTIMAL_TRAY_HIRE_COST ,
   a.OPTIMAL_DEPOT_RHD_COST ,
   a.OPTIMAL_TRAY_LENDING_COST ,
   a.OPTIMAL_STORE_HANDLING_COST ,
   a.OPTIMAL_EX_WORKS_COST ,
   a.OPTIMAL_SALES_REVENUE ,
   a.OPTIMAL_COST_OF_SOLD ,
   a.OPTIMAL_WASTE_RECOVERY ,
   a.OPTIMAL_COST_OF_WASTE ,
   a.OPTIMAL_E2E_COST ,
   a.OPTIMAL_E2E_REVENUE ,
   a.OPTIMAL_E2E_PROFIT ,
   a.OPTIMAL_GROSS_SELLING_MARGIN ,
   a.OPTIMAL_GROSS_PROFIT ,
   a.OPTIMAL_NET_PROFIT ,
   a.OPTIMAL_PROFIT_RANK ,
   a.OPTIMAL_WASTE_PER ,
   a.OPTIMAL_SERVICE_LEVEL
from IDSSC_HIST_READ_UOD.uod_rec_depot_cat A left join (SELECT DISTINCT DEPOT_CODE,DEPOT_NAME FROM idssc_hist.hist_store_ref) b on a.depot=b.depot_code 
 where a.runtime>(select max(model_start_time) from idssc_hist_read_uod.model_timestamp));

                               update idssc_hist_read_uod.uod_recommendations_depot
          SET current_tray_type='Metric Tray 7"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_7';
                                                update idssc_hist_read_uod.uod_recommendations_depot
          SET current_tray_type='Metric Tray 5"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_5';
                                   update idssc_hist_read_uod.uod_recommendations_depot
          SET current_tray_type='Metric Tray 2"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_2';
                                   update idssc_hist_read_uod.uod_recommendations_depot
          SET current_tray_type='Half Tray Full Height' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_7';
                                   update idssc_hist_read_uod.uod_recommendations_depot
          SET current_tray_type='Half Tray Nested' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_5';
                                   update idssc_hist_read_uod.uod_recommendations_depot
          SET current_tray_type='Half Tray Nested' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_5';
      update idssc_hist_read_uod.uod_recommendations_depot
          SET current_tray_type='Brown Tray' WHERE CURRENT_TRAY_TYPE='BROWN_TRAY';
                                  update idssc_hist_read_uod.uod_recommendations_depot
          SET current_tray_type='Cardboard' WHERE CURRENT_TRAY_TYPE='CARDBOARD';



                                  update idssc_hist_read_uod.uod_recommendations_depot
          SET OPTIMAL_TRAY_TYPE='Metric Tray 7"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_7';
                                                update idssc_hist_read_uod.uod_recommendations_depot
          SET OPTIMAL_TRAY_TYPE='Metric Tray 5"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_5';
                                   update idssc_hist_read_uod.uod_recommendations_depot
          SET OPTIMAL_TRAY_TYPE='Metric Tray 5"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_2';
                                   update idssc_hist_read_uod.uod_recommendations_depot
          SET OPTIMAL_TRAY_TYPE='Half Tray Full Height' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_7';
                                   update idssc_hist_read_uod.uod_recommendations_depot
          SET OPTIMAL_TRAY_TYPE='Half Tray Nested' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_5';
                                   update idssc_hist_read_uod.uod_recommendations_depot
          SET OPTIMAL_TRAY_TYPE='Half Tray Nested' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_5';
   update idssc_hist_read_uod.uod_recommendations_depot
          SET OPTIMAL_tray_type='Brown Tray' WHERE OPTIMAL_tray_type='BROWN_TRAY';
                                   update idssc_hist_read_uod.uod_recommendations_depot
          SET OPTIMAL_tray_type='Cardboard' WHERE OPTIMAL_tray_type='CARDBOARD';
   




-- TABLE TO HOLD CURRENT UPT DATA--

v_sql_cmd := 'truncate table idssc_hist_read_uod.UOD_CURRENT_DATA_FINAL'; EXECUTE IMMEDIATE V_SQL_CMD;
insert into idssc_hist_read_uod.UOD_CURRENT_DATA_FINAL(
select 
UPC,
DEMAND,
FDATE,
UPT,
TRAY_TYPE,
ORDERS,
WASTE,
SOLD_UNITS,
PRIMARY_TRANSPORT,
TRAY_HIRE_COST,
DEPOT_RHD_COST,
TRAY_LENDING_COST,
STORE_HANDLING_COST,
EX_WORKS_COST,
SALES_REVENUE,
WASTE_RECOVERY,
COST_OF_WASTE,
E2E_PROFIT
from idssc_hist_read_uod.UOD_CURRENT_UPT_DATA 
 where run_time>(select max(model_start_time) from idssc_hist_read_uod.model_timestamp));



                                update idssc_hist_read_uod.UOD_CURRENT_DATA_FINAL
          SET tray_type='Metric Tray 7"' WHERE tray_type='METRIC_TRAY_7';
                                                update idssc_hist_read_uod.UOD_CURRENT_DATA_FINAL
          SET tray_type='Metric Tray 5"' WHERE tray_type='METRIC_TRAY_5';
                                   update idssc_hist_read_uod.UOD_CURRENT_DATA_FINAL
          SET tray_type='Metric Tray 2"' WHERE tray_type='METRIC_TRAY_2';
                                   update idssc_hist_read_uod.UOD_CURRENT_DATA_FINAL
           SET TRAY_TYPE='Half Tray Full Height' WHERE tray_type='HALF_TRAY_7';
                                   update idssc_hist_read_uod.UOD_CURRENT_DATA_FINAL
          SET tray_type='Half Tray Nested' WHERE tray_type='HALF_TRAY_5';
                                   update idssc_hist_read_uod.UOD_CURRENT_DATA_FINAL
          SET tray_type='Half Tray Nested' WHERE tray_type='HALF_TRAY_5';
   update idssc_hist_read_uod.UOD_CURRENT_DATA_FINAL
          SET tray_type='Brown Tray' WHERE tray_type='BROWN_TRAY';
                                   update idssc_hist_read_uod.UOD_CURRENT_DATA_FINAL
          SET tray_type='Cardboard' WHERE tray_type='CARDBOARD';


-- TABLE TO HOLD PRODUCT/TRAY SPECIFIC COSTS--

v_sql_cmd := 'truncate table idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION'; EXECUTE IMMEDIATE V_SQL_CMD;
insert into idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION(
select 
UPC,
UPT,
TRAY_TYPE,
SP,
CP,
CURRENT_UPT,
PRIMARY_TRANS,
TRAY_HIRE,
DEPOT_RHD,
STORE_REC,
STORE_HANDLING,
TRAY_LENDING,
EX_WORKS,
IS_SRP,
SRP_TOTAL,
CURRENT_TRAY_TYPE,
PRODUCT_COST
from idssc_hist_read_uod.uod_prod_descr_final_cat 
 where run_time>(select max(model_start_time) from idssc_hist_read_uod.model_timestamp));



               update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET current_tray_type='Metric Tray 7"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_7';
                                                update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET current_tray_type='Metric Tray 5"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_5';
                                   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET current_tray_type='Metric Tray 2"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_2';
                                   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET current_tray_type='Half Tray Full Height' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_7';
                                   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET current_tray_type='Half Tray Nested' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_5';
                                   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET current_tray_type='Half Tray Nested' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_5';
      update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET current_tray_type='Brown Tray' WHERE CURRENT_TRAY_TYPE='BROWN_TRAY';
                                   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET current_tray_type='Cardboard' WHERE CURRENT_TRAY_TYPE='CARDBOARD';


                               update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET tray_type='Metric Tray 7"' WHERE tray_type='METRIC_TRAY_7';
                                                update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET tray_type='Metric Tray 5"' WHERE tray_type='METRIC_TRAY_5';
                                   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET tray_type='Metric Tray 2"' WHERE tray_type='METRIC_TRAY_2';
                                   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
           SET TRAY_TYPE='Half Tray Full Height' WHERE tray_type='HALF_TRAY_7';
                                   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET tray_type='Half Tray Nested' WHERE tray_type='HALF_TRAY_5';
                                   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET tray_type='Half Tray Nested' WHERE tray_type='HALF_TRAY_5';
   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET tray_type='Brown Tray' WHERE tray_type='BROWN_TRAY';
                                   update idssc_hist_read_uod.uod_PRODUCT_DESCRIPTION
          SET tray_type='Cardboard' WHERE tray_type='CARDBOARD';




-- TABLE TO HOLD ROLLED UP DATA--

v_sql_cmd := 'truncate table idssc_hist_read_uod.UOD_daily_orders'; EXECUTE IMMEDIATE V_SQL_CMD;
insert into idssc_hist_read_uod.UOD_daily_orders(
select 
UPC,
UPT,
DEMAND,
ON_HAND,
ORDERS,
WASTE,
SOLD_UNITS,
FDATE,
3
from idssc_hist_read_uod.uod_daily_orders_cat 
 where runtime>(select max(model_start_time) from idssc_hist_read_uod.model_timestamp));



-- TABLE TO HOLD PRODUCT ATTRIBUTES--

  v_sql_cmd := 'truncate table idssc_hist_read_uod.UOD_product_attribute'; EXECUTE IMMEDIATE V_SQL_CMD;
insert into idssc_hist_read_uod.UOD_product_attribute(
select 
UPC,
NAME,
CATEGORY,
SG_CODE,
SG_NAME,
PG_CODE,
PG_NAME,
SUPPLIER,
UPCNAME,
SELLING_PRICE,
COST_PRICE,
WEIGHT,
SHELFLIFE,
RANGEDSTORES,
ROS_STORE_DAY,
ROS_DAY,
MAYLAND_STORES,
OPTIMAL_CP,
CRITICAL_CP
from idssc_hist_read_uod.uod_product_attribute_cat 
 where runtime>(select max(model_start_time) from idssc_hist_read_uod.model_timestamp));


--FINAL SPOTFIRE TABLES--

  v_sql_cmd := 'truncate table idssc_hist_read_uod.sample'; EXECUTE IMMEDIATE V_SQL_CMD;
insert into idssc_hist_read_uod.sample
select * from idssc_hist_read_uod.UOD_daily_orders;

v_sql_cmd := 'truncate table idssc_hist_read_uod.SPOTFIRE_PRODUCT_ATTRIBUTES'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.SPOTFIRE_PRODUCT_ATTRIBUTES
SELECT * FROM idssc_hist_read_uod.UOD_product_attribute;


v_sql_cmd := 'truncate table idssc_hist_read_uod.SPOTFIRE_TEMP_TABLE8'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.SPOTFIRE_TEMP_TABLE8
SELECT * FROM idssc_hist_read_uod.uod_recommendations_final;

v_sql_cmd := 'truncate table idssc_hist_read_uod.PRODUCT_DESC'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.PRODUCT_DESC
SELECT * FROM uod_PRODUCT_DESCRIPTION;


v_sql_cmd := 'truncate table idssc_hist_read_uod.DEPOT_DATA'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.DEPOT_DATA(
select 
 UPC ,
   SP ,
   PRODUCT_COST ,
   DEMAND ,
   IS_SRP ,
   DEPOT ,
   CURRENT_UPT ,
   CURRENT_TRAY_TYPE  ,
   CURRENT_ORDERS ,
   CURRENT_WASTE ,
   CURRENT_SOLD_UNITS ,
   CURRENT_LOST_SALES ,
   CURRENT_PRIMARY_TRANSPORT ,
   CURRENT_TRAY_HIRE_COST ,
   CURRENT_DEPOT_RHD_COST ,
   CURRENT_TRAY_LENDING_COST ,
   CURRENT_STORE_HANDLING_COST ,
   CURRENT_EX_WORKS_COST ,
   CURRENT_SALES_REVENUE ,
   CURRENT_COST_OF_SOLD ,
   CURRENT_WASTE_RECOVERY ,
   CURRENT_COST_OF_WASTE ,
   CURRENT_E2E_COST ,
   CURRENT_E2E_REVENUE ,
   CURRENT_E2E_PROFIT ,
   CURRENT_GROSS_SELLING_MARGIN ,
   CURRENT_GROSS_PROFIT ,
   CURRENT_NET_PROFIT ,
   CURRENT_PROFIT_RANK ,
   CURRENT_WASTE_PER ,
   CURRENT_SERVICE_LEVEL ,
   OPTIMAL_UPT  ,
   OPTIMAL_TRAY_TYPE  ,
   OPTIMAL_ORDERS ,
   OPTIMAL_WASTE ,
   OPTIMAL_SOLD_UNITS ,
   OPTIMAL_LOST_SALES ,
   OPTIMAL_PRIMARY_TRANSPORT ,
   OPTIMAL_TRAY_HIRE_COST ,
   OPTIMAL_DEPOT_RHD_COST ,
   OPTIMAL_TRAY_LENDING_COST ,
   OPTIMAL_STORE_HANDLING_COST ,
   OPTIMAL_EX_WORKS_COST ,
   OPTIMAL_SALES_REVENUE ,
   OPTIMAL_COST_OF_SOLD ,
   OPTIMAL_WASTE_RECOVERY ,
   OPTIMAL_COST_OF_WASTE ,
   OPTIMAL_E2E_COST ,
   OPTIMAL_E2E_REVENUE ,
   OPTIMAL_E2E_PROFIT ,
   OPTIMAL_GROSS_SELLING_MARGIN ,
   OPTIMAL_GROSS_PROFIT ,
   OPTIMAL_NET_PROFIT ,
   OPTIMAL_PROFIT_RANK ,
   OPTIMAL_WASTE_PER ,
   OPTIMAL_SERVICE_LEVEL
   FROM idssc_hist_read_uod.uod_recommendations_depot);


v_sql_cmd := 'truncate table idssc_hist_read_uod.SPOTFIRE_CURRENT_UPT_DATA'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.SPOTFIRE_CURRENT_UPT_DATA
SELECT * FROM UOD_CURRENT_DATA_FINAL;

COMMIT;


END;





create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_1

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=1;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_2

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=2;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_3

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=3;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_4

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=4;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_5

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=5;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_6

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=6;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_7

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=7;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_8

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=8;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_9

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=9;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_10

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=10;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_11

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=11;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.UOD_MASTER_PROC_12

AS
V_CATEGORY VARCHAR(10);
V_START_DATE DATE;
V_END_DATE DATE;
BEGIN

SELECT CATEGORY INTO V_CATEGORY FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE FLAG=12;
commit;

SELECT START_DATE INTO V_START_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

SELECT END_DATE INTO V_END_DATE FROM IDSSC_HIST_READ_UOD.UOD_CONTROL_TABLE WHERE CATEGORY=V_CATEGORY;

IDSSC_HIST_READ_UOD.UOD_MODEL_E2E ( V_START_DATE, V_END_DATE, V_CATEGORY);

END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.ben_date_create
(
  V_START_DATE IN DATE,
V_END_DATE IN DATE
)
AS 
V_DATE DATE;
BEGIN
EXECUTE IMMEDIATE'TRUNCATE TABLE IDSSC_HIST_READ_UOD.ben_DATE_RANGE';
V_DATE :=  V_START_DATE;
WHILE V_DATE<V_END_DATE+42
LOOP
BEGIN
INSERT INTO IDSSC_HIST_READ_UOD.ben_DATE_RANGE VALUES (V_DATE);
V_DATE := 1+ V_DATE ;
END;
END LOOP;
END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.ben_PROC_TRANSFORMATIONS
(
   V_START_DATE IN DATE,
   V_END_DATE IN DATE,
   V_TOP IN INT
)
AS
V_SQL_CMD CLOB;
V_DOLLY_VOLUME NUMBER(10,3);
       V_DOLLY_COST NUMBER(4,2);
       v_pallet_width int;
       v_pallet_depth int;
       v_pallet_height int;
BEGIN
    V_DOLLY_VOLUME := 601695.216;
       V_DOLLY_COST := 10.37;
       v_pallet_width := 120;
       v_pallet_depth := 80;
       v_pallet_height := 178;
      
  
--EXTRACTING THE OLD UPT-TRAY TYPE FOR ALL UPCS--
EXECUTE IMMEDIATE 'TRUNCATE TABLE IDSSC_HIST_READ_UOD.ben_old_upt';
insert into IDSSC_HIST_READ_UOD.ben_old_upt (
select  upc, current_upt, current_tray_type
from IDSSC_HIST_READ_UOD.uod_prod_descr_final_cat where run_time > (select max(model_start_time) from idssc_hist_read_uod.model_timestamp)
group by upc,current_upt, current_tray_type);


-- CODE FOR SELECTING UPCS WITH UPT CHANGE BEGINS--

  EXECUTE IMMEDIATE'TRUNCATE TABLE idssc_hist_read_uod.ben_NETWORK_SCHEDULE_1';
        INSERT INTO idssc_hist_read_uod.ben_NETWORK_SCHEDULE_1
         ( SELECT /*+PARALLEL(6)*/ CAST(A.UPC AS INT) ,
						A.src_location,
                        A.DEST_LOCATION ,
                        TO_DATE(A.EFFECTIVE_BEGIN_DATE,'DD-MON-RRRR'),
                        A.ORDER_LEAD_TIME_01 ,
                        A.UNITS_PER_TRAY_01 ,
                        A.ORDER_LEAD_TIME_02 ,
                           A.UNITS_PER_TRAY_02 ,
                        A.ORDER_LEAD_TIME_03 ,
                           A.UNITS_PER_TRAY_03 ,
                       A.ORDER_LEAD_TIME_04 ,
                       A.UNITS_PER_TRAY_04,
                     A.ORDER_LEAD_TIME_05 ,
                       A.UNITS_PER_TRAY_05 ,
                     A.ORDER_LEAD_TIME_06 ,
                           A.UNITS_PER_TRAY_06 ,
                        A.ORDER_LEAD_TIME_07 ,
                       A.UNITS_PER_TRAY_07,
                        TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR'),
                          RANK() OVER ( PARTITION BY CAST(A.UPC AS INT) , A.DEST_LOCATION, TO_DATE(A.EFFECTIVE_BEGIN_DATE,'DD-MON-RRRR')
                          ORDER BY TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR') DESC  ) 
              FROM idssc_hist.HIST_NETWORK_SCHEDULE  A
			  WHERE CAST(A.UPC AS INT) IN (SELECT DISTINCT UPC FROM IDSSC_HIST_READ_UOD.ben_old_upt)
			  ); 


  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_NETWORK_SCHEDULE_2';
      INSERT INTO idssc_hist_read_uod.ben_NETWORK_SCHEDULE_2
         ( SELECT PRODUCT_ID ,
						SOURCE_ID,
                        sink_id ,
                        EFFECTIVE_BEGIN_DT ,
                        MAX(sun) ,
                        MAX(SUN_UPT) ,
                        MAX(mon) ,
                        MAX(MON_UPT) ,
                        MAX(tue) ,
                        MAX(TUE_UPT) ,
                        MAX(wed) ,
                        MAX(WED_UPT) ,
                        MAX(thu) ,
                        MAX(THU_UPT) ,
                        MAX(fri) ,
                        MAX(FRI_UPT) ,
                        MAX(sat) ,
                        MAX(SAT_UPT)
              FROM idssc_hist_read_uod.ben_NETWORK_SCHEDULE_1 where rank_dt=1 
			  GROUP BY PRODUCT_ID,SOURCE_ID,SINK_ID,EFFECTIVE_BEGIN_DT); 

              UPDATE idssc_hist_read_uod.ben_NETWORK_SCHEDULE_2
                     set sink_id=concat('MandS:W',sink_id) where sink_id like 'B%' or sink_id like 'D%' or sink_id like 'S%';
					
				UPDATE idssc_hist_read_uod.ben_NETWORK_SCHEDULE_2
                     set sink_id=concat('S',sink_id) where sink_id not like 'M%'; 

                    

       --INSERTING UPT AND DELIVERY FLAGS AND RANKING THE NETWORK SCHEDULE FOR A UPC BY EFFECTIVE BEGIN DATE--
          EXECUTE IMMEDIATE  'TRUNCATE TABLE idssc_hist_read_uod.ben_NETWORK_SCHEDULE_3'; 
          insert INTO idssc_hist_read_uod.ben_NETWORK_SCHEDULE_3
         SELECT PRODUCT_ID ,
					 SOURCE_ID,
                     SINK_ID ,
                     EFFECTIVE_BEGIN_DT ,
                     SUN ,
                     SUN_UPT ,
                     MON ,
                     MON_UPT ,
                     TUE ,
                     TUE_UPT ,
                     WED ,
                     WED_UPT ,
                     THU ,
                     THU_UPT ,
                     FRI ,
                     FRI_UPT ,
                     SAT ,
                     SAT_UPT ,
                     RANK() OVER ( PARTITION BY PRODUCT_ID, SINK_ID ORDER BY EFFECTIVE_BEGIN_DT ASC  ) 
              FROM idssc_hist_read_uod.ben_NETWORK_SCHEDULE_2; 



EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_ntw_schd_4'; 
     INSERT INTO idssc_hist_read_uod.ben_ntw_schd_4
         ( SELECT A.* ,
                        B.EFFECTIVE_BEGIN_DT 
              FROM idssc_hist_read_uod.ben_NETWORK_SCHEDULE_3  A
                        LEFT JOIN idssc_hist_read_uod.ben_NETWORK_SCHEDULE_3  B
                           ON A.PRODUCT_ID = B.PRODUCT_ID
                        AND A.SINK_ID = B.SINK_ID
                        AND A.RANK_DATE = (B.RANK_DATE - 1) ); 



       --UPDATING TEMPORARY NETWORK SCHEDULE TABLE TO SET DEFAULT DATE FOR NULL RECORDS--
      UPDATE idssc_hist_read_uod.ben_ntw_schd_4
          SET END_DATE =v_end_date
          WHERE END_DATE IS NULL; 
          
    UPDATE idssc_hist_read_uod.ben_ntw_schd_4
          SET END_DATE = END_DATE - 1;


  --INSERTING UPT AND DELIVERY FLAGS ACROSS DAY OF WEEK AT UPC DEPOT LEVEL WITH BEGIN AND END DATES--  
       EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_ntw_schd_final'; 
      INSERT INTO idssc_hist_read_uod.ben_ntw_schd_final
         ( SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SUN ,
                        SUN_UPT ,
                        END_DATE ,
                        1 
              FROM idssc_hist_read_uod.ben_ntw_schd_4 
              UNION 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        MON ,
                        MON_UPT ,
                        END_DATE ,
                        2 
              FROM idssc_hist_read_uod.ben_ntw_schd_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        TUE ,
                        TUE_UPT ,
                        END_DATE ,
                        3 
              FROM idssc_hist_read_uod.ben_ntw_schd_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        WED ,
                        WED_UPT ,
                        END_DATE ,
                        4 
              FROM idssc_hist_read_uod.ben_ntw_schd_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        THU ,
                        THU_UPT ,
                        END_DATE ,
                        5 
              FROM idssc_hist_read_uod.ben_ntw_schd_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        FRI ,
                        FRI_UPT ,
                        END_DATE ,
                       6 
              FROM idssc_hist_read_uod.ben_ntw_schd_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SAT ,
                        SAT_UPT ,
                        END_DATE ,
                        7 
              FROM idssc_hist_read_uod.ben_ntw_schd_4  );



       --SETTING CONSISTENT VALUES FOR ORDER LEAD TIME
       UPDATE idssc_hist_read_uod.ben_ntw_schd_final
          SET RCPT = 1
          WHERE RCPT IS NOT NULL;
     UPDATE idssc_hist_read_uod.ben_ntw_schd_final
          SET RCPT = 0
          WHERE RCPT IS NULL;


INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('Network schedule','Network schedule done',SYSTIMESTAMP);
COMMIT;


-- INSERTING VARIOUS UPTS ACROSS DEPOTS TO FIND MOST REPEATING UPT
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_ntw_schd_depot'; 
       
       INSERT INTO idssc_hist_read_uod.ben_ntw_schd_depot
         ( SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SUN ,
                        SUN_UPT ,
                        END_DATE ,
                        1 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.ben_NTW_SCHD_4 
              UNION 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        MON ,
                        MON_UPT ,
                        END_DATE ,
                        2 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.ben_NTW_SCHD_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        TUE ,
                        TUE_UPT ,
                        END_DATE ,
                        3 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.ben_NTW_SCHD_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                       WED ,
                        WED_UPT ,
                        END_DATE ,
                        4 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.ben_NTW_SCHD_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                       SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        THU ,
                        THU_UPT ,
                        END_DATE ,
                        5 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.ben_NTW_SCHD_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        FRI ,
                        FRI_UPT ,
                        END_DATE ,
                        6 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.ben_NTW_SCHD_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SAT ,
                        SAT_UPT ,
                        END_DATE ,
                        7 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.ben_NTW_SCHD_4  );
			  
			 
	commit;		  
-------------------------------

--COUNT OF REPEATITION OF UPT ACROSS DEPOTS
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_UPT_UPC_DEPOT'; 
       
      INSERT INTO idssc_hist_read_uod.ben_UPT_UPC_DEPOT
         SELECT DISTINCT PRODUCT_ID ,
                                    SINK_ID ,
                                    UPT ,
                                    COUNT(*) 
             FROM idssc_hist_read_uod.ben_ntw_schd_depot 
             where V_start_date between effective_begin_dt and end_date 
			 AND to_char(v_start_date+1,'D') = DAY_NUM
              GROUP BY PRODUCT_ID,SINK_ID,UPT;

       -- DELETING RECORDS WITH NULL UPTS 
       
       DELETE idssc_hist_read_uod.ben_UPT_UPC_DEPOT
       WHERE UPT IS NULL; 

       --RANKING UPT BASED ON NUMBER OF OCCURANCE IN A DEPOT
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_UPT_UPC_DEPOT_RANK'; 
       
       INSERT INTO idssc_hist_read_uod.ben_UPT_UPC_DEPOT_RANK
         SELECT DISTINCT UPC ,
                                    DEPOT ,
                                    UPT ,
                                    COUNT_UPT ,
                                    RANK() OVER ( PARTITION BY UPC ORDER BY COUNT_UPT DESC,UPT DESC  ) 
              FROM idssc_hist_read_uod.ben_UPT_UPC_DEPOT; 
            
	-- INSERTING MOST OCCURING UPTS FOR UPCS WITH NO DEPOT ENTRY IN NETWORK SCHEDULE--
			
  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_UPT1'; 

		INSERT INTO idssc_hist_read_uod.ben_UPT1
         ( SELECT DISTINCT upc ,
                                         UPT ,
                                         count(*)
              FROM idssc_hist_read_uod.ben_UPT_UPC_DEPOT_RANK
                GROUP BY upc,UPT);

--DELETING WHERE UPT IS NULL
       
       DELETE idssc_hist_read_uod.ben_UPT1
       WHERE UPT IS NULL;	
			
			                     
       --SELECTING MOST REPEATED UPT IN A DEPOT
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_UPT_UPC_DEPOT_FINAL';
      
       INSERT INTO idssc_hist_read_uod.ben_UPT_UPC_DEPOT_FINAL
         ( SELECT UPC ,
                        DEPOT ,
                        UPT 
              FROM idssc_hist_read_uod.ben_UPT_UPC_DEPOT_RANK 
                                  
                                  WHERE RANK_UPT = 1 ); 
                                  
       
       DELETE idssc_hist_read_uod.ben_UPT_UPC_DEPOT_FINAL
       WHERE DEPOT LIKE 'S%'; 

       
      UPDATE idssc_hist_read_uod.ben_UPT_UPC_DEPOT_FINAL
       SET DEPOT= SUBSTR(DEPOT,8,5); 


                   --COUNTING THE NUMBER OF OCCURANCE OF NON-NULL UPTS FOR A UPC
      
	       
       DELETE idssc_hist_read_uod.ben_UPT1
       WHERE UPC in (select distinct upc from idssc_hist_read_uod.ben_UPT_UPC_DEPOT_FINAL); 


       INSERT INTO idssc_hist_read_uod.ben_UPT1
         ( SELECT DISTINCT upc ,
                                         UPT ,
                                         COUNT(*) 
              FROM idssc_hist_read_uod.ben_UPT_UPC_DEPOT_FINAL
                GROUP BY upc,UPT);

       
       DELETE idssc_hist_read_uod.ben_UPT1
       WHERE UPT IS NULL;

       --RANKING UPT FOR ALL UPC
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_UPT2';
       
       INSERT INTO idssc_hist_read_uod.ben_UPT2
         SELECT DISTINCT UPC ,
                                    UPT ,
                                    COUNT_UPT ,
                                    RANK() OVER ( PARTITION BY UPC ORDER BY COUNT_UPT DESC,UPT DESC  ) 
              FROM idssc_hist_read_uod.ben_UPT1;
                                  
                                  
       --SELECTING MOST REPEATING UPT AS THE CURRENT
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_CURR_UPT';
       
       INSERT INTO idssc_hist_read_uod.ben_CURR_UPT
         ( SELECT UPC ,
                        UPT 
              FROM idssc_hist_read_uod.ben_UPT2 
               WHERE RANK_UPT = 1 );


--JOINING THE OLD AND NEW UPTS FOR EACH UPC INTO A TABLE

  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_upt_change'; 
insert into idssc_hist_read_uod.ben_upt_change(
select a.upc,a.upt,A.TRAY_TYPE,b.upt from IDSSC_HIST_READ_UOD.ben_old_upt a left join IDSSC_HIST_READ_UOD.ben_CURR_UPT b
on a.upc=b.upc);
	

--DELETEING UPCS FOR WHICH RECOMMENDATIONS WERE NOT SENT
	
DELETE idssc_hist_read_uod.ben_upt_change
       WHERE old_UPT IS NULL;	   

--DELETING UPCS FOR WHICH NETWORK SCHEDULE DOESNT HAVE NEW UPT

DELETE idssc_hist_read_uod.ben_upt_change
       WHERE new_UPT IS NULL;	

--DELETING UPCS FOR WHICH THERE IS NOT UPT CHANGE

DELETE idssc_hist_read_uod.ben_upt_change
       WHERE old_UPT = new_upt;	

-- CODE FOR SELECTING UPCS WITH UPT CHANGE ENDS--

--Selecting UPCs where change as a result of recommendation--
--LIST OF UPCS FOR WHICH MODEL WOULD BE RUN WITH OLD AND NEW UPT/TRAY--

 EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_reco_map';
INSERT INTO IDSSC_HIST_READ_UOD.ben_reco_map(
SELECT A.UPC, A.OLD_UPT,A.NEW_UPT,B.UPT,A.OLD_TRAY,B.TRAY_TYPE,b.profit_rank,
 (CASE b.TRAY_TYPE
                           WHEN 'BROWN_TRAY' THEN 8
                          WHEN 'HALF_TRAY_2' THEN 7
                          WHEN 'HALF_TRAY_5' THEN 6
                          WHEN 'HALF_TRAY_7' THEN 5
                          WHEN 'METRIC_TRAY_2' THEN 4
                          WHEN 'METRIC_TRAY_5' THEN 3
                          WHEN ( CASE a.old_tray
                                    WHEN 'METRIC_TRAY_7' THEN 'CARDBOARD'
                                    ELSE 'METRIC_TRAY_7'
                            END ) THEN 2
                             ELSE 1
           END)

FROM idssc_hist_read_uod.ben_upt_change A LEFT JOIN idssc_hist_read_uod.UOD_RECOMMENDATION_RANK B
ON A.UPC=B.UPC);

DELETE IDSSC_HIST_READ_UOD.ben_reco_map
WHERE REC_UPT IS NULL;

DELETE IDSSC_HIST_READ_UOD.ben_reco_map
WHERE RANK_BEN >V_TOP;

DELETE IDSSC_HIST_READ_UOD.ben_reco_map
WHERE REC_UPT<>NEW_UPT;


  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_reco_comparison';
INSERT INTO IDSSC_HIST_READ_UOD.ben_reco_comparison(
select A.UPC, A.OLD_UPT,A.NEW_UPT,a.rec_UPT, A.OLD_TRAY, a.new_tray,
rank() over (partition by a.upc order by a.rank_ben asc,a.tray_priority desc)
from IDSSC_HIST_READ_UOD.ben_reco_map A);

DELETE IDSSC_HIST_READ_UOD.ben_reco_comparison
WHERE rank_final >1;

INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('reco comparison','reco comparison 1',SYSTIMESTAMP);
COMMIT;


-- CODE FOR SELECTING LATEST SUPPLIER--

  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_VENDOR'; 
INSERT INTO idssc_hist_read_uod.ben_VENDOR(
SELECT distinct product_id, substr(SOURCE_ID,1,4) FROM idssc_hist_read_uod.ben_ntw_schd_4  where v_start_date between effective_begin_dt and end_date
              GROUP BY PRODUCT_ID, source_id);



   delete idssc_hist_read_uod.ben_VENDOR where vendor like 'B%';
    
    delete idssc_hist_read_uod.ben_VENDOR where vendor like 'D%';
     
    delete idssc_hist_read_uod.ben_VENDOR where vendor like 'H%';
 
  delete idssc_hist_read_uod.ben_VENDOR where vendor like 'S%';




--CODE FOR SP AND CP--

EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_article_upc'; 

insert into idssc_hist_read_uod.ben_article_upc(
select distinct cast(article_no as int),
                cast(intl_article_no as int)
                from idssc_hist.HIST_assort_ean 
                where uom='EA' and site_no='Z200');

--selecting required records and mapping UPC
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_SP_UPC';

insert into idssc_hist_read_uod.ben_sp_upc
(select cast(a.article_no as int),
        b.upc,
        a.interface_run_date_time,
        a.site_no,
        a.uom,
        a.valid_from_date,
        a.amount,
        rank() over (partition by a.article_no,b.upc,a.site_no,a.uom,a.valid_from_date order by   a.interface_run_date_time desc, amount asc)
        from  idssc_hist.HIST_ASSORT_UOM_COND_VALUE a right join idssc_hist_read_uod.ben_article_upc b on cast(a.article_no as int)=cast(b.article_no as int)
        where a.uom='EA' and a.site_no='Z200' );


--RANKING THE SP DATA
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_SP_LATEST';

insert into idssc_hist_read_uod.ben_sp_latest(
select upc,
        SP,
        rank() over (partition by upc order by valid_from_date desc)
        from idssc_hist_read_uod.ben_sp_upc where rank_dt=1);
        
--SELECTING THE FINAL SP DATA INTO THE TABLE
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_SP_FINAL';
insert into idssc_hist_read_uod.ben_sp_final(
select upc, sp from idssc_hist_read_uod.ben_sp_latest where rank_sp=1);

commit;


--Selecting the latest CP data for UPCs based on CP in GB

      EXECUTE IMMEDIATE  'TRUNCATE TABLE idssc_hist_read_uod.ben_cost_date_int';
       
      INSERT INTO idssc_hist_read_uod.ben_cost_date_int
         ( SELECT intnl_article_no,
                           SUPPLIER_CODE,
                        LOCN_CODE,
                        INTO_LOCN_START_DATE,
                        UNITS_PER_TRAY,
                        TRAY_COST_PRICE/UNITS_PER_TRAY,
                        INTERFACE_RUN_DATE_TIME
              FROM idssc_hist.HIST_COST_DETAIL  WHERE LOCN_CODE='GB' and uom='EA'
              and intnl_article_no<>' ' AND TRAY_COST_PRICE<>0);



              EXECUTE IMMEDIATE  'TRUNCATE TABLE idssc_hist_read_uod.ben_cost_date'; 
       
    INSERT INTO idssc_hist_read_uod.ben_cost_date
         ( SELECT A.intnl_article_no,
                           A.SUPPLIER_CODE,
                        A.LOCN_CODE,
                        A.INTO_LOCN_START_DATE,
                        A.UNITS_PER_TRAY,
                        A.TRAY_COST_PRICE,
                        A.INTERFACE_RUN_DATE_TIME,
                        RANK() OVER ( PARTITION BY A.intnl_article_no, A.SUPPLIER_CODE,A.LOCN_CODE,A.INTO_LOCN_START_DATE,A.UNITS_PER_TRAY ORDER BY A.INTERFACE_RUN_DATE_TIME DESC  ) 
              FROM idssc_hist_read_uod.ben_cost_date_int A);
    

       --SELECTING VENDOR SUPPLYING AT CURRENT UPT FROM CP DATA BASED ON VENDOR AND UPT MAPPING FOR A UPC
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_COST'; 

INSERT INTO idssc_hist_read_uod.ben_COST
         ( SELECT C.UPC ,
                        C.VENDOR ,
                        C.CP_START_DT ,
                        C.CP ,
                        D.UPT ,
                        C.UPT ,
                        C.vendor_b 
              FROM ( SELECT A.UPC ,
                                    A.VENDOR ,
                                    A.UPT ,
                                    B.vendor as vendor_b ,
                                    A.CP_START_DT ,
                                    A.CP,
									 A.RANK_DT
                        FROM idssc_hist_read_uod.ben_coST_DATE A
                                    LEFT JOIN idssc_hist_read_uod.ben_VENDOR B
                                     ON A.UPC = B.UPC
                                    AND A.VENDOR = B.vendor ) C
                        LEFT JOIN idssc_hist_read_uod.ben_curr_upt D
                           ON C.UPC = D.UPC
                        AND C.UPT = D.UPT
         WHERE C.RANK_DT=1);

-- DELETING THE COST DETAIL WHERE VENOR AND UPT DOESNT MATCH WITH THE VENDOR AND UPT IN NETWORK SCHEDULE
      
       DELETE idssc_hist_read_uod.ben_COST
       WHERE NS_VENDOR IS NULL;

          DELETE idssc_hist_read_uod.ben_COST
       WHERE CURRENT_UPT IS NULL;

	DELETE idssc_hist_read_uod.ben_COST
       WHERE START_ >V_START_DATE;



             --RANKING ALL MATCHING CP BASED ON CP BEGIN DATE
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_COST_1'; 
       
       INSERT INTO idssc_hist_read_uod.ben_COST_1
         SELECT UPC,
COST_VENDOR,
START_,
CP,
CURRENT_UPT,
COST_UPT,
NS_VENDOR ,
                     RANK() OVER ( PARTITION BY UPC ORDER BY START_ DESC, CP DESC  ) 
              FROM idssc_hist_read_uod.ben_COST;
                                  
       --REMOVING ENTRIES WITH OLD CP START DATE
       
     DELETE idssc_hist_read_uod.ben_COST_1
       WHERE DATE_RANK > 1;
                   
                   
       --RANKING BASED ON CP VALUES FOR SELECTING HIGHEST CP
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_COST_2'; 
       
       INSERT INTO idssc_hist_read_uod.ben_COST_2
         SELECT UPC,
COST_VENDOR,
START_,
CP,
CURRENT_UPT,
COST_UPT,
NS_VENDOR ,
DATE_RANK,
           RANK() OVER ( PARTITION BY UPC ORDER BY CP DESC  ) 
              FROM idssc_hist_read_uod.ben_COST_1;
       --SELECTING HIGHEST CP FOR A UPC
       
   DELETE idssc_hist_read_uod.ben_COST_2
       WHERE CP_RANK > 1;
     
       
       
        --SELECTING FINAL CP FROM PREVIOUS TABLE AND SP FROM TABLE CONTAING SP AND CALCULATION OF MARGIN
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_COST_FINAL'; 
       
       INSERT INTO idssc_hist_read_uod.ben_COST_FINAL
         ( SELECT DISTINCT UPC ,
                                         max(CP) ,
                                         CURRENT_UPT ,
                                         NULL ,
                                         NULL 
              FROM idssc_hist_read_uod.ben_COST_2 
                GROUP BY UPC,CURRENT_UPT );



-- UPDATING THE SELLING PRICE IN THE CP TABLE FROM FINAL SP TABLE
      
       MERGE INTO idssc_hist_read_uod.ben_COST_FINAL
       USING (SELECT DISTINCT * FROM idssc_hist_read_uod.ben_sp_final) ben_sp_final 
       ON ( idssc_hist_read_uod.ben_COST_FINAL.UPC = ben_sp_final.upc )
       WHEN MATCHED THEN UPDATE SET SP = ben_sp_final.SP;

       --CALCULATING THE MARGIN OF A PRODUCT FROM SP AND CP
       
     DELETE idssc_hist_read_uod.ben_COST_final
       WHERE CP is null;
       DELETE idssc_hist_read_uod.ben_COST_final
       WHERE sp is null;
       
      DELETE idssc_hist_read_uod.ben_COST_final
       WHERE sp =0;
       
	   DELETE idssc_hist_read_uod.ben_COST_final
       WHERE CP =0;
       
       UPDATE idssc_hist_read_uod.ben_COST_FINAL
          SET MARGIN = (SP - CP) / SP;
          
          --UPDATING MARGIN TO 25% WHERE LESS THAN 25%
       
      UPDATE idssc_hist_read_uod.ben_COST_FINAL
          SET MARGIN = 0.25
          WHERE MARGIN < 0.25;

		 INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('cp_sp','cp sp done',SYSTIMESTAMP);
COMMIT; 

-- FINAL TABLE WITH UPCS TO RUN--

DELETE IDSSC_HIST_READ_UOD.ben_reco_comparison
       WHERE UPC NOT IN (SELECT DISTINCT UPC FROM idssc_hist_read_uod.ben_COST_FINAL);


INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('reco comparison','reco comparison 2',SYSTIMESTAMP);
COMMIT;

DELETE IDSSC_HIST_READ_UOD.ben_ntw_schd_final
       WHERE PRODUCT_ID NOT IN (SELECT DISTINCT UPC FROM idssc_hist_read_uod.ben_reco_comparison);

INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('N/W','network sched deleted',SYSTIMESTAMP);
COMMIT;


  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_upt_tray_type';
INSERT INTO IDSSC_HIST_READ_UOD.ben_upt_tray_type(
				SELECT UPC, OLD_UPT,old_tray FROM idssc_hist_read_uod.ben_reco_comparison);

INSERT INTO IDSSC_HIST_READ_UOD.ben_upt_tray_type(
				SELECT UPC, NEW_UPT,new_tray FROM idssc_hist_read_uod.ben_reco_comparison);




 EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_prod_descr';
 INSERT INTO idssc_hist_read_uod.ben_prod_descr
 (
 SELECT A.UPC,
		A.UPT,
		A.TRAY_TYPE,
		B.SP,
		B.CP,
		C.UPT,
		D.PRIMARY_TRANSPORT_COSTS,
		D.TRAY_HIRE,
		D.DEPOT_RHD_PER_TRAY,
		D.STORE_RECEIVING_PER_TRAY,
		D.STORE_HANDLING_PER_TRAY,
		D.TRAY_LENDING_PER_TRAY,
		NULL,
		C.tray_type,
		NULL,
		E.WIDTH,
		E.DEPTH,
		E.HEIGHT
	FROM idssc_hist_read_uod.ben_upt_tray_type A LEFT JOIN idssc_hist_read_uod.ben_COST_FINAL B
	ON A.UPC=B.UPC
	LEFT JOIN IDSSC_HIST_READ_UOD.ben_old_upt C ON A.UPC=c.UPC
	LEFT JOIN idssc_hist.MAN_TRAY_COST D ON A.TRAY_TYPE=D.TRAY_TYPE
	LEFT JOIN idssc_hist.MAN_PRODUCT_DIMENSION E ON A.UPC=E.UPC
	);
  
INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('prod desc','join done',SYSTIMESTAMP);
COMMIT;


	v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TRAY_VOLUME_FINAL '; EXECUTE IMMEDIATE V_SQL_CMD;
  
INSERT INTO idssc_hist_read_uod.ben_TRAY_VOLUME_FINAL 
  (
       SELECT substr(a.vendor_no,3,8),b.depot_corp_code,b.depot_code, SUM(a.PO_GOOD_RECEIPT_QTY) 
       FROM idssc_hist.MAN_TRAY_VOLUME a left join 
       idssc_hist.hist_depot_corp b on a.site_id=b.depot_corp_code
       GROUP BY substr(a.vendor_no,3,8),b.depot_corp_code, B.DEPOT_CODE);

  --MAPPING DEPOT TO THE HAULAGE DATA

v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.ben_PRIMARY_RATES '; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.ben_PRIMARY_RATES 
       (SELECT 
       B.BATCH_ID        ,
       B.INTERFACE_RUN_DATE_TIME               ,
       B.SUPPLIER_NUMBER   ,
       B.SUPPLIER_SITE              ,
       B.DEPOT_CODE2              ,
       B.TRANSPORT_UNIT      ,
       B.RATE_APPLICABLE_FROM       ,
       B.HAULIER_RATE             ,
       A.TRAY_VOLUME   ,
       B.SUPPLIER_RATE            ,
       B.BASE_FUEL_RATE        ,
       B.FUEL_SURCHARGE      ,
       B.USER_ID          ,
       B.DSTAMP          ,
       B.DIFFERENT_UNITS       ,
       B.RETENDERING_SUPPLIER_RATE            ,
       B.RETENDERING_HAULIER_RATE              ,
       B.RETENDERING_BASE_FUEL_RATE        ,
       B.RETENDERING_FUEL_SURCHARGE      ,
       B.PREVIOUS_BATCH_ID
       FROM idssc_hist_read_uod.ben_TRAY_VOLUME_FINAL  A LEFT JOIN 
       idssc_hist.HIST_PRIMARY_RATES B 
       ON A.SUPPLIER_NUMBER = B.SUPPLIER_NUMBER
       AND A.DEPOT = B.DEPOT_CODE2);

--SELECTING THE LATEST HAULAGE DATA
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.ben_HAULAGE_TEMP1 '; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.ben_HAULAGE_TEMP1 
  SELECT DISTINCT SUPPLIER_NUMBER ,
                  DEPOT_CODE ,
                  TRANSPORT_UNIT ,
                  HAULIER_RATE ,
                  TRAY_VOLUME ,
                  RATE_APPLICABLE_FROM ,
                  RANK() OVER ( PARTITION BY SUPPLIER_NUMBER ORDER BY RATE_APPLICABLE_FROM DESC  ) 
    FROM idssc_hist_read_uod.ben_PRIMARY_RATES;
       

DELETE idssc_hist_read_uod.ben_HAULAGE_TEMP1 
WHERE RANKA > 1;


DELETE idssc_hist_read_uod.ben_HAULAGE_TEMP1 
WHERE DEPOT_CODE IS NULL;


--HAULAGE RATE AT SUPPLIER TRANSPORT UNIT LEVEL
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.ben_HAULAGE_SUPPLIER '; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.ben_HAULAGE_SUPPLIER 
  ( SELECT SUPPLIER_NUMBER ,
           TRANSPORT_UNIT ,
           SUM(HAULIER_RATE * TRAY_VOLUME) / SUM(TRAY_VOLUME) 
    FROM idssc_hist_read_uod.ben_HAULAGE_TEMP1  
      GROUP BY SUPPLIER_NUMBER,TRANSPORT_UNIT );
         
         
--HAULAGE RATE AT TRANSPORT LEVEL
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.ben_HAULAGE_OVERALL '; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_HAULAGE_OVERALL  
  ( SELECT TRANSPORT_UNIT ,
           SUM(HAULIER_RATE * TRAY_VOLUME) / SUM(TRAY_VOLUME) 
    FROM idssc_hist_read_uod.ben_HAULAGE_TEMP1  
      GROUP BY TRANSPORT_UNIT );
      
      commit;
         

--CALCULATING THE DOLLY AND PALLET RATE
execute immediate 'TRUNCATE TABLE idssc_hist_read_uod.ben_HAULAGE_SUPP_TRANS '; 

INSERT INTO idssc_hist_read_uod.ben_HAULAGE_SUPP_TRANS 
  ( SELECT DISTINCT SUPPLIER_ID ,
                    NULL ,
                    NULL 
    FROM idssc_hist_read_uod.ben_HAULAGE_SUPPLIER   );
    

MERGE INTO idssc_hist_read_uod.ben_HAULAGE_SUPP_TRANS  
USING (SELECT DISTINCT * FROM idssc_hist_read_uod.ben_HAULAGE_SUPPLIER ) ben_HAULAGE_SUPPLIER  
ON ( ben_HAULAGE_SUPPLIER .SUPPLIER_ID = idssc_hist_read_uod.ben_HAULAGE_SUPP_TRANS .SUPPLIER_ID
  AND ben_HAULAGE_SUPPLIER .TRANSPORT_UNIT = 'DOLLY' )
WHEN MATCHED THEN UPDATE SET DOLLY_RATE = ben_HAULAGE_SUPPLIER .HAULAGE_RATE;


MERGE INTO idssc_hist_read_uod.ben_HAULAGE_SUPP_TRANS 
USING (SELECT * FROM idssc_hist_read_uod.ben_HAULAGE_SUPPLIER ) ben_HAULAGE_SUPPLIER  
ON ( ben_HAULAGE_SUPPLIER .SUPPLIER_ID = idssc_hist_read_uod.ben_HAULAGE_SUPP_TRANS .SUPPLIER_ID
  AND ben_HAULAGE_SUPPLIER .TRANSPORT_UNIT = 'PALLET' )
WHEN MATCHED THEN UPDATE SET PALLET_RATE = ben_HAULAGE_SUPPLIER .HAULAGE_RATE;
-------------------------------------------------

--TABLE FOR NUMBER OF TRAYS PER TRANSPORT UNIT
v_sql_cmd := ' TRUNCATE TABLE idssc_hist_read_uod.ben_TRAYS_HAULIER '; EXECUTE IMMEDIATE V_SQL_CMD;
insert into idssc_hist_read_uod.ben_TRAYS_HAULIER        Values('HALF_TRAY_5',               52           );
insert into idssc_hist_read_uod.ben_TRAYS_HAULIER        Values('HALF_TRAY_7',               36           );
insert into idssc_hist_read_uod.ben_TRAYS_HAULIER        Values('HALF_TRAY_2',               88           );
insert into idssc_hist_read_uod.ben_TRAYS_HAULIER        Values('METRIC_TRAY_2',          44           );
insert into idssc_hist_read_uod.ben_TRAYS_HAULIER        Values('METRIC_TRAY_5',          26           );
insert into idssc_hist_read_uod.ben_TRAYS_HAULIER        Values('METRIC_TRAY_7',          18           );
insert into idssc_hist_read_uod.ben_TRAYS_HAULIER        Values('BROWN_TRAY',              18           );


v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.ben_PROD_DESCR_all'; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.ben_PROD_DESCR_all
  ( SELECT A.* ,
           B.VENDOR ,
           C.DOLLY_RATE ,
           C.PALLET_RATE ,
           NULL ,
           D.TRAY_PER_HAULIER ,
          NULL,
                 NULL,
                 NULL
    FROM idssc_hist_read_uod.ben_prod_descr A
           LEFT JOIN idssc_hist_read_uod.ben_vendor B
            ON A.UPC = B.upc
           LEFT JOIN idssc_hist_read_uod.ben_HAULAGE_SUPP_TRANS C
            ON B.VENDOR = C.SUPPLIER_ID
           LEFT JOIN idssc_hist_read_uod.ben_TRAYS_HAULIER D
            ON A.TRAY_TYPE = D.TRAY_TYPE );


MERGE INTO idssc_hist_read_uod.ben_PROD_DESCR_all 
USING (SELECT * FROM idssc_hist_read_uod.ben_HAULAGE_OVERALL) ben_HAULAGE_OVERALL 
ON ( ben_HAULAGE_OVERALL.TRANSPORT_UNIT = 'DOLLY')
WHEN MATCHED THEN UPDATE SET DOLLY_RATE = ben_HAULAGE_OVERALL.HAULAGE_RATE
WHERE idssc_hist_read_uod.ben_PROD_DESCR_all.DOLLY_RATE IS NULL;


MERGE INTO idssc_hist_read_uod.ben_PROD_DESCR_all 
USING (SELECT * FROM idssc_hist_read_uod.ben_HAULAGE_OVERALL) ben_HAULAGE_OVERALL 
ON ( ben_HAULAGE_OVERALL.TRANSPORT_UNIT = 'PALLET')
  WHEN MATCHED THEN UPDATE SET PALLET_RATE = ben_HAULAGE_OVERALL.HAULAGE_RATE 
  WHERE  idssc_hist_read_uod.ben_PROD_DESCR_all.PALLET_RATE IS NULL;



UPDATE idssc_hist_read_uod.ben_PROD_DESCR_all
   SET HAULIER_RATE = DOLLY_RATE
   WHERE TRAY_TYPE <> 'CARDBOARD';

UPDATE idssc_hist_read_uod.ben_PROD_DESCR_all
   SET HAULIER_RATE = PALLET_RATE
   WHERE TRAY_TYPE = 'CARDBOARD';


   UPDATE idssc_hist_read_uod.ben_PROD_DESCR_all
   SET TRAYS_PER_HAULIER = FLOOR((FLOOR((v_pallet_width * v_pallet_depth) / (WIDTH * DEPTH)) * FLOOR(v_pallet_height / HEIGHT)) / UPT)
   WHERE TRAY_TYPE = 'CARDBOARD'; 
  

   --CALCULATING THE FINAL SUPPLIER SPECIFIC TRANSPORT COST FOR ALL UPC BASED ON UPT AND TRAY TYPE

UPDATE idssc_hist_read_uod.ben_PROD_DESCR_all
   SET RATE_PER_TRAY = HAULIER_RATE / TRAYS_PER_HAULIER;
   
   
   INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('prod desc','rate per tray done',SYSTIMESTAMP);
COMMIT;
   
   --CALCULATING THE TRANSPORT COST CORRESPONDING TO THE CURRENT UPT-TRAY FOR A UPC
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.ben_CURR_trans'; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.ben_CURR_trans
  ( SELECT UPC ,
           RATE_PER_TRAY 
    FROM idssc_hist_read_uod.ben_PROD_DESCR_all
     WHERE TRAY_TYPE = CURRENT_TRAY_TYPE
             AND UPT = CURRENT_UPT );


MERGE INTO idssc_hist_read_uod.ben_PROD_DESCR_all 
USING (SELECT * FROM idssc_hist_read_uod.ben_CURR_trans) ben_CURR_trans 
ON ( idssc_hist_read_uod.ben_PROD_DESCR_all.UPC = ben_CURR_trans.UPC )
WHEN MATCHED THEN UPDATE SET TRANS = ben_CURR_trans.COST;

--CALCULATING THE TRAY HIRE COST CORRESPONDING TO THE CURRENT UPT-TRAY FOR A UPC
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.ben_CURR_HIRE'; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.ben_CURR_HIRE
  ( SELECT UPC ,
           TRAY_HIRE 
    FROM idssc_hist_read_uod.ben_PROD_DESCR_all 
     WHERE TRAY_TYPE = CURRENT_TRAY_TYPE
             AND UPT = CURRENT_UPT );


MERGE INTO idssc_hist_read_uod.ben_PROD_DESCR_all
USING (SELECT * FROM idssc_hist_read_uod.ben_CURR_HIRE) ben_CURR_HIRE 
ON ( idssc_hist_read_uod.ben_PROD_DESCR_all.UPC = ben_CURR_HIRE.UPC )
WHEN MATCHED THEN UPDATE SET HIRE = ben_CURR_HIRE.COST;

--CALCULATING THE EX WORKS COST FOR A UPC

UPDATE idssc_hist_read_uod.ben_PROD_DESCR_all
   SET EX_WORKS = CP - (TRANS / CURRENT_UPT) - (HIRE / CURRENT_UPT);
         
--CALCULATION OF COST FOR ALL UPT-TRAY COMBINATION FOR A UPC

UPDATE idssc_hist_read_uod.ben_PROD_DESCR_all
   SET PRODUCT_COST = (RATE_PER_TRAY / UPT) + (TRAY_HIRE / UPT) + EX_WORKS;


   v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.ben_prod_descr_LATEST'; EXECUTE IMMEDIATE V_SQL_CMD;
  
  INSERT INTO idssc_hist_read_uod.ben_prod_descr_LATEST
  ( SELECT 
    UPC       ,
       UPT    ,
       tray_type     ,
       SP     ,
       CP     ,
       Current_UPT   ,
       Rate_per_tray ,
       Tray_hire     ,
       Depot_RHD     ,
       Store_rec     ,
       Store_handling       ,
       Tray_lending  ,
       ex_works      ,
       'NA' ,
        1     ,
       current_tray_type    ,
       product_cost 

    FROM idssc_hist_read_uod.ben_PROD_DESCR_all);

	  INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('prod desc','prod desc done',SYSTIMESTAMP);
COMMIT; 
     
     
 

---------------TRANSFORMATION----------------------



 --ranking the extract date for selecting latest data
     EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_TI_MODEL_1';
       INSERT INTO idssc_hist_read_uod.ben_TI_MODEL_1
         ( SELECT /*+PARALLEL(6)*/ CAST(A.PRODUCT_ID AS INT),
                        A.LOCATION_ID,
                        TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR'),
                        A.MODEL_ID,
                        TO_DATE(A.ON_RANGE_DT,'DD-MON-RRRR'),
                        TO_DATE(A.OFF_RANGE_DT,'DD-MON-RRRR'),
                        RANK() OVER ( PARTITION BY CAST(A.PRODUCT_ID AS INT), A.LOCATION_ID ORDER BY TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR') DESC  ) 
              FROM idssc_hist.HIST_INVENTORY_MODELS  A WHERE CAST(A.PRODUCT_ID AS INT) IN (SELECT DISTINCT UPC from idssc_hist_read_uod.ben_reco_comparison));
			  


  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_TI_MODEL';
       INSERT INTO idssc_hist_read_uod.ben_TI_MODEL
         ( SELECT A.* ,
                        NULL ,
                        NULL ,
                        NULL ,NULL
              FROM idssc_hist_read_uod.ben_TI_MODEL_1 A WHERE A.RANK_DT=1 );
              
     UPDATE idssc_hist_read_uod.ben_TI_MODEL
       SET MODEL = SUBSTR(MODEL_ID, 1, 3); 

       UPDATE idssc_hist_read_uod.ben_TI_MODEL
          SET DAY_FULL = (CASE
                                                                                    WHEN MODEL= 'COM' THEN CAST(SUBSTR(MODEL_ID, 7, 1) AS NUMBER(18))
                                                                                    WHEN MODEL= 'DOS' THEN CAST(SUBSTR(MODEL_ID, 4, 1) AS NUMBER(18))
                                                                                    WHEN MODEL= 'WOS' THEN CAST(FLOOR((CAST(SUBSTR(MODEL_ID, 4, 8) AS FLOAT(53))) * 7) AS NUMBER(18))
                 ELSE 0
                       END); 
       UPDATE idssc_hist_read_uod.ben_TI_MODEL
          SET DAY_PART = (CASE
                                                                                    WHEN MODEL= 'COM' THEN CAST(SUBSTR(MODEL_ID, 8, 2) AS FLOAT(53)) / 100
                                                                                    WHEN MODEL= 'DOS' THEN CAST(SUBSTR(MODEL_ID, 5, 2) AS FLOAT(53)) / 100
                                                                                    WHEN MODEL= 'WOS' THEN (CAST(SUBSTR(MODEL_ID, 4, 8) AS FLOAT(53)) * 7) - DAY_FULL
                 ELSE 0
                       END); 
       UPDATE idssc_hist_read_uod.ben_TI_MODEL
          SET MULT = (CASE 
                                                                             WHEN MODEL= 'COM' THEN CAST(SUBSTR(MODEL_ID, 4, 3) AS FLOAT(53)) / 100
                                                                             WHEN MODEL= 'MUL' THEN CAST(SUBSTR(MODEL_ID, 5, 3) AS FLOAT(53)) / 100
                 ELSE 0
                       END); 

       UPDATE idssc_hist_read_uod.ben_TI_MODEL
       SET MODEL = 'DOS'
       WHERE MODEL = 'WOS';          
              
              
              
              
              
                                                 
INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('ti model','done',SYSTIMESTAMP);
COMMIT;
			  
			  
--ranking the extract date for selecting latest data
              EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_dow_1'; 
       INSERT INTO idssc_hist_read_uod.ben_dow_1
         ( SELECT /*+PARALLEL(6)*/ CAST(A.PRODUCT_ID AS INT) ,
                        A.STG_ID,
                        TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR'),
                        A.DOW_SUN,
                        A.DOW_MON,
                        A.DOW_TUE,
                        A.DOW_WED,
                        A.DOW_THU,
                        A.DOW_FRI,
                        A.DOW_SAT,
                        RANK() OVER ( PARTITION BY CAST(A.PRODUCT_ID AS INT), A.STG_ID ORDER BY TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR') DESC  ) 
              FROM idssc_hist.HIST_DOW_PROFILES   A 
			  WHERE CAST(A.PRODUCT_ID AS INT) IN (SELECT DISTINCT UPC from idssc_hist_read_uod.ben_reco_comparison) );
			 
			  
 EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_DOW'; 
      INSERT INTO idssc_hist_read_uod.ben_DOW
         ( SELECT UPC ,
                        STG ,
                        1   ,
                        SUN   
FROM idssc_hist_read_uod.ben_dow_1 WHERE RANK_DT=1  
              UNION 
              SELECT UPC ,
                        STG ,
                        2   ,
                        MON   
       FROM idssc_hist_read_uod.ben_dow_1 WHERE RANK_DT=1 
              UNION ALL 
              SELECT UPC ,
                        STG ,
                        3   ,
                        TUE   
       FROM idssc_hist_read_uod.ben_dow_1 WHERE RANK_DT=1 
              UNION ALL 
              SELECT UPC ,
                        STG ,
                        4   ,
                        WED   
              FROM idssc_hist_read_uod.ben_dow_1 WHERE RANK_DT=1
              UNION ALL 
              SELECT UPC ,
                        STG ,
                        5   ,
                        THU   
       FROM idssc_hist_read_uod.ben_dow_1 WHERE RANK_DT=1
              UNION ALL 
              SELECT UPC ,
                        STG ,
                        6   ,
                        FRI   
       FROM idssc_hist_read_uod.ben_dow_1 WHERE RANK_DT=1
              UNION ALL 
              SELECT UPC ,
                        STG ,
                        7   ,
                        SAT   
              FROM idssc_hist_read_uod.ben_dow_1 WHERE RANK_DT=1);

	INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('dow','done',SYSTIMESTAMP);
COMMIT;

			  
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_life_max';
INSERT into idssc_hist_read_uod.ben_life_max
      (select /*+PARALLEL(6)*/ CAST(UPC AS INT), 
      TO_DATE(week_begin_date,'DD-MON-RRRR'),
      max(day_0_life) ,
      max(day_1_life) ,
      max(day_2_life) ,
      max(day_3_life) ,
      max(day_4_life) ,
      max(day_5_life) ,
      max(day_6_life) ,
      ctry_code
      from idssc_hist.HIST_prod_life
	  WHERE CAST(upc AS INT) IN (SELECT DISTINCT UPC from idssc_hist_read_uod.ben_reco_comparison)
      group by upc,TO_DATE(week_begin_date,'DD-MON-RRRR'),ctry_code);
	  
	  
	    EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_life_latest'; 
         INSERT into idssc_hist_read_uod.ben_life_latest
                                (
                                select upc,
                                day_0_life,
                                day_1_life,
                                day_2_life,
                                day_3_life,
                                day_4_life,
                                day_5_life,
                                day_6_life,
                                ctry_code,
                                rank() over (partition by upc, ctry_code order by week_begin_date desc) 
                                from idssc_hist_read_uod.ben_life_max); 


EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_product_life_depot'; 
INSERT into idssc_hist_read_uod.ben_product_life_depot
                (select
                a.upc,
                b.depot_code,
                a.life1,
                a.life2,
                a.life3,
                a.life4,
                a.life5,
                a.life6,
                a.life7 
                from idssc_hist_read_uod.ben_life_latest a left join idssc_hist.hist_depot_corp b on a.country=b.served_country where a.rank_dt=1 and b.served_country <> 'ALL');



  V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_PRODUCTLIFE'; EXECUTE IMMEDIATE V_SQL_CMD;
              INSERT INTO idssc_hist_read_uod.ben_PRODUCTLIFE
                  ( SELECT upc ,
                                                   depot ,
                                                   1 ,
                                                   LIFE_SUN + 1 
                                FROM idssc_hist_read_uod.ben_product_life_depot 
                                UNION ALL
                                SELECT upc ,
                                                   depot  ,
                                                   2 ,
                                                   LIFE_MON + 1 
                                FROM idssc_hist_read_uod.ben_product_life_depot 
                                UNION ALL 
                                SELECT upc ,
                                                   depot  ,
                                                  3 ,
                                                   LIFE_TUE + 1 
                                FROM idssc_hist_read_uod.ben_product_life_depot 
                                UNION ALL 
                                SELECT upc ,
                                                   depot ,
                                                   4 ,
                                                   LIFE_WED + 1 
                                FROM idssc_hist_read_uod.ben_product_life_depot 
                                UNION ALL 
                                SELECT upc ,
                                                   depot ,
                                                   5 ,
                                                   LIFE_THU + 1 
                                FROM idssc_hist_read_uod.ben_product_life_depot 
                                UNION ALL 
                                SELECT upc ,
                                                   depot ,
                                                   6 ,
                                                   LIFE_FRI + 1 
                                FROM idssc_hist_read_uod.ben_product_life_depot
                                UNION ALL 
                                SELECT upc ,
                                                   depot ,
                                                   7 ,
                                                   LIFE_SAT + 1 
                                FROM idssc_hist_read_uod.ben_product_life_depot  );



			INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('life','done',SYSTIMESTAMP);
COMMIT;


-------TRANSFORMATION OF STORE SCHEDULE DATA

       --INSERTING LOCATION SCHEDULE RAW DATA WITH LOCATION ID SUBSTRINGED TO REQUIRED FORMAT--
       EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_LOCATION_SCHEDULE_1'; 
       INSERT INTO idssc_hist_read_uod.ben_LOCATION_SCHEDULE_1
         ( SELECT CAST(A.SITE AS INT),
                        TO_DATE(A.OPENING_DATE,'DD-MON-RRRR') ,
                        A.DELIVERYSTATUS_SUN ,
                        A.DELIVERYSTATUS_MON ,
                        A.DELIVERYSTATUS_TUE ,
                        A.DELIVERYSTATUS_WED ,
                        A.DELIVERYSTATUS_THU ,
                        A.DELIVERYSTATUS_FRI ,
                        A.DELIVERYSTATUS_SAT ,
                        TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR'),
                         RANK() OVER ( PARTITION BY CAST(A.SITE AS INT), TO_DATE(A.OPENING_DATE,'DD-MON-RRRR') 
                         ORDER BY TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR') DESC  ) 
              FROM idssc_hist.hist_SITE A WHERE length(A.SITE)=4 ); 


       --INSERTING STORE SCHEDULE RANKED ON BEGIN DATE--
       EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_LOCATION_SCHEDULE_2'; 
       INSERT INTO idssc_hist_read_uod.ben_LOCATION_SCHEDULE_2
         SELECT STORECODE ,
                     BEGIN_DATE ,
                     SUN ,
                     MON ,
                     TUE ,
                     WED ,
                     THU ,
                     FRI ,
                     SAT ,
                     RANK() OVER ( PARTITION BY STORECODE ORDER BY BEGIN_DATE ASC  ) 
              FROM idssc_hist_read_uod.ben_LOCATION_SCHEDULE_1 WHERE RANK_DT=1 ;

       --CALCULATING END DATE BY JOINING ON DATE RANK WITH PREVIOUS TEMPORARY TABLE--
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3'; 
       INSERT INTO idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3
         ( SELECT A.* ,
                        B.BEGIN_DATE 
              FROM idssc_hist_read_uod.ben_LOCATION_SCHEDULE_2 A
                        LEFT JOIN idssc_hist_read_uod.ben_LOCATION_SCHEDULE_2 B
                           ON A.STORECODE = B.STORECODE
                        AND A.DATE_RANK = (B.DATE_RANK - 1) );

       --SETTING END DATE AS DEFAULT VALUE FOR NULL RECORDS--
       UPDATE idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3
          SET END_DATE = V_END_DATE
          WHERE END_DATE IS NULL;
          
       UPDATE idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3
          SET END_DATE = END_DATE - 1;


       --TRANSPOSING STORE SCHEDULE FROM UPC-STORE TO UPC-STORE-DAY LEVEL--
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_STORE_SCHEDULE_FINAL'; 
       INSERT INTO idssc_hist_read_uod.ben_STORE_SCHEDULE_FINAL
         ( SELECT STORECODE ,
                        BEGIN_DATE ,
                        SUN ,
                        1 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3 
              UNION 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        MON ,
                        2 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        TUE ,
                        3 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        WED ,
                        4 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        THU ,
                        5 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        FRI ,
                        6 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        SAT ,
                        7 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.ben_LOCATION_SCHEDULE_3  );
       
                   UPDATE idssc_hist_read_uod.ben_STORE_SCHEDULE_FINAL
          SET DAY_SCHEDULE = 1
          WHERE DAY_SCHEDULE>0;
            
		
			INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('store sched','done',SYSTIMESTAMP);
COMMIT;

--selecting latest store excess flag for a category-store

 EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_xs_final'; 
  INSERT into idssc_hist_read_uod.ben_xs_final
  (select category_code,
    site_code,
    xs_flag,
    rank() over (partition by category_code,site_code order by TO_DATE(start_date,'DD-MON-RRRR') desc)
    from idssc_hist.HIST_Store_xs);
      
      
   EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_store_excess';
  INSERT into idssc_hist_read_uod.ben_store_excess
  (select category_code,
          site_code,
          xs_flag
          from idssc_hist_read_uod.uod_xs_final where rank_dt=1);  
      	 
   
			INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('excess flag','done',SYSTIMESTAMP);
COMMIT;      
          
                          
execute immediate 'truncate table idssc_hist_read_uod.ben_nde_rank';
insert into idssc_hist_read_uod.ben_nde_rank(
select /*+PARALLEL(6)*/ product_id,
location_id,
TO_DATE(week_begin_dt,'DD-MON-RRRR'),
total_uplift,
rank() over (partition by product_id,location_id,TO_DATE(week_begin_dt,'DD-MON-RRRR') 
order by TO_DATE(extract_date,'DD-MON-RRRR') desc, TO_DATE(SUBSTR(interface_run_date_time,1,9),'DD-MON-RRRR') desc)
from idssc_hist.HIST_non_demand_events where  CAST(product_id AS INT) IN (SELECT DISTINCT UPC from idssc_hist_read_uod.ben_reco_comparison)
and TO_DATE(week_begin_dt,'DD-MON-RRRR') between v_start_date and v_end_date); 

                
execute immediate 'truncate table idssc_hist_read_uod.ben_nde_1';             
  insert into idssc_hist_read_uod.ben_nde
   (select product_id,
   location_id,
   uplift_dt,
   total_uplift
   from idssc_hist_read_uod.ben_nde_rank where rank_dt=1);
   
  
			INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('nde','done',SYSTIMESTAMP);
COMMIT;



			INSERT INTO idssc_hist_read_uod.ben_QC_INTER_TABLES
VALUES('transformation','proc transformation done',SYSTIMESTAMP);
COMMIT;

end;




create or replace
PROCEDURE idssc_hist_read_uod.BEN_APPEND_WEEKLY
(
 v_date in date
)
AS 

BEGIN
INSERT INTO idssc_hist_read_uod.ben_DAILY_DEMAND
  ( SELECT /*+PARALLEL(4)*/ A.UPC ,
           a.STOREcode ,
           A.DEPOT , 
           a.demand  ,
          a.fdate,
          null,
       a.MODEL_CODE ,
       a.c1 ,
       a.c2 ,
       a.c3 ,
       a.SP ,
       a.CP ,
       a.MARGIN ,
       a.WASTE_PCT ,
       a.WASTE_CONSTRAINT ,
       a.LAUNCH_DATE ,
       a.excess_flag ,
       a.LIFE ,
       B.DAY_SCHEDULE ,
       C.RCPT ,
       D.RCPT, NULL
   FROM idssc_hist_read_uod.ben_daily_demand_raw A
   LEFT JOIN idssc_hist_read_uod.ben_TEMP1 B
       ON A.storecode = cast(B.STORECODE as int)
       AND to_char(a.fdate+1,'D') = B.DAY_NUM
   LEFT JOIN idssc_hist_read_uod.ben_TEMP2 C
       ON A.UPC = C.PRODUCT_ID
       AND A.DEPOT = SUBSTR(C.SINK_ID, 8, 5)
       AND to_char(a.fdate+1,'D') = C.DAY_NUM
   LEFT JOIN idssc_hist_read_uod.ben_TEMP3 D
       ON A.UPC = D.PRODUCT_ID
       AND A.storecode = CAST(SUBSTR(D.SINK_ID, 2, 8) AS int)
       AND to_char(a.fdate+1,'D') = D.DAY_NUM  
       where a.fdate=v_date);
       COMMIT;
       COMMIT WORK;
END;




create or replace
PROCEDURE idssc_hist_read_uod.BEN_APPEND_TRANSFORM
(
	V_start_date in date,
	v_end_date in date
) 
AS
   
   V_DATEF DATE;
   V_SQL_CMD VARCHAR2(10000);
 
BEGIN
   v_datef := v_start_date ;
   
   WHILE v_datef <= v_end_date+41
   LOOP 
      
      BEGIN
         EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP1 ';
         INSERT INTO idssc_hist_read_uod.ben_TEMP1
           ( SELECT * 
             FROM idssc_hist_read_uod.ben_STORE_SCHEDULE_FINAL 
              WHERE BEGIN_DATE <= v_datef
                      AND END_DATE > V_DATEF );
		
         EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP2 ';
         INSERT INTO idssc_hist_read_uod.ben_TEMP2
           ( SELECT * 
             FROM idssc_hist_read_uod.ben_NTW_SCHD_FINAL 
              WHERE EFFECTIVE_BEGIN_DT <= V_DATEF
                      AND END_DATE > V_DATEF
                      AND SINK_ID LIKE 'M%' );
         EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP3 ';
         INSERT INTO idssc_hist_read_uod.ben_TEMP3
           ( SELECT * 
             FROM idssc_hist_read_uod.ben_NTW_SCHD_FINAL 
              WHERE EFFECTIVE_BEGIN_DT <= V_DATEF
                      AND END_DATE > V_DATEF
                      AND SINK_ID LIKE 'S%' );
           begin           
         idssc_hist_read_uod.ben_APPEND_WEEKLY(V_datef);
         end;
         V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.ben_qc_INTER_TABLES
         VALUES(''DAILY DEMAND'',''Date- ' || v_datef || ' DONE'',SYSTIMESTAMP)'; EXECUTE IMMEDIATE V_SQL_CMD;
       
            V_datef := V_datef + 1 ;
        
      END;
   END LOOP;
END;




create or replace
FUNCTION idssc_hist_read_uod.ben_TARGET_INVEN_CAL
(
  V_STORECODE IN float,
  V_UPC IN float,
  V_DATE IN date,
  V_MODEL IN float,
  V_MODEL1 IN float
)
RETURN FLOAT
AS
   -- EXTRA DAYS OF COVER IS GENERALLY AN FRACTION , EG 3.5, RET STORES EXTRA DAYS OF COVER FOR ITS INTEGRAL PART
   --RET1 STORES COVER FOR DECIMAL PART
   V_RET FLOAT(53);
   V_RET1 FLOAT(53);

BEGIN
  SELECT SUM(DEMAND) into V_RET
     FROM idssc_hist_read_uod.ben_DAILY_DEMAND P
    WHERE P.UPC = V_UPC
            AND P.STORECODE = V_STORECODE
            AND FDATE BETWEEN V_DATE AND V_DATE - 1 + V_MODEL;
   
   IF V_MODEL1 <> 0 THEN
   
   BEGIN
      SELECT trunc(SUM(DEMAND) * V_MODEL1,2) into V_RET1
        FROM idssc_hist_read_uod.ben_DAILY_DEMAND P
       WHERE P.UPC = v_upc
               AND P.STORECODE = V_STORECODE
               AND FDATE = V_DATE+ V_MODEL;
   END;
   END IF;
   V_RET := COALESCE(V_RET, 0) + COALESCE(V_RET1, 0) ;
   RETURN V_RET;
END;




create or replace
FUNCTION idssc_hist_read_uod.ben_DEMAND_SHELF_LIFE_CAL (
  V_STORECODE IN float,
  V_UPC IN float,
  V_DATE IN date,
  V_LIFE IN number
)
RETURN FLOAT
AS
   V_RET FLOAT(53);

BEGIN
  SELECT SUM(DEMAND) into V_RET
     FROM idssc_hist_read_uod.ben_DAILY_DEMAND P
    WHERE P.UPC = V_UPC
            AND P.STORECODE = V_STORECODE
            AND FDATE BETWEEN V_DATE AND V_DATE + V_LIFE - 1;
   IF ( V_RET IS NULL ) THEN
      V_RET := 0 ;
   END IF;
   RETURN V_RET;
END;




create or replace
FUNCTION IDSSC_HIST_READ_UOD.ben_ORDERS_CAL
(
  IV_ON_HAND IN number,
  V_DEMAND IN float,
  V_MARGIN IN float,
  V_UPT IN number,
  V_DATE IN DATE,
  V_CP IN float,
  V_SP IN float,
  V_LAUNCH_DATE IN date,
  IV_WC IN float,
  V_DEMAND_L IN float,
  V_TARGET_INVENTORY IN float,
  V_EXCESS IN varchar2
)
RETURN NUMBER
AS
   V_ON_HAND FLOAT(53) := IV_ON_HAND;
   V_WC FLOAT(53) := IV_WC;
   V_EXTRA FLOAT(53);
   V_FLAG NUMBER(10,0);
   V_N3 NUMBER(10,0);
   V_N1 NUMBER(10,0);
   V_N2 NUMBER(10,0);
   V_WASTE FLOAT(53);
   V_PROFIT FLOAT(53);
   V_DAYS FLOAT;

BEGIN
-- ORDERING TO PREVENT LOST SALES
-- ORDER TRAYS IF ON_HAND < DEMAND < TARGET INVENTORY TO PREVENT LOST SALES. 
   IF V_DEMAND > V_ON_HAND
     AND V_ON_HAND < (V_TARGET_INVENTORY-0.01)
     AND V_DEMAND <= (V_TARGET_INVENTORY-0.01) THEN
   
   BEGIN
      V_N1 := FLOOR((V_DEMAND - V_ON_HAND) / V_UPT) ;
      V_ON_HAND := V_ON_HAND + (V_N1 * V_UPT) ;
   END;
   END IF;
-- ORDER TRAYS IF ON_HAND < TARGET INVENTORY < DEMAND TILL YOU REACH TARGET INVENTORY, NOT EXCEEDING IT COVERING PART OF LOST SALES
   IF V_DEMAND > V_ON_HAND
     AND V_ON_HAND < V_TARGET_INVENTORY
     AND V_DEMAND > V_TARGET_INVENTORY THEN
   
   BEGIN
      V_N1 := FLOOR((V_TARGET_INVENTORY - V_ON_HAND) / V_UPT) ;
      V_ON_HAND := V_ON_HAND + (V_N1 * V_UPT) ;
   END;
   END IF;
-- V_N1 INDICATES ANY TRAYS ORDERED IN ABOVE SCENARIOS TO COVER LOST SALES PARTIALLY
   IF ( V_N1 IS NULL ) THEN
   
   BEGIN
      V_N1 := 0 ;
   END;
   END IF;
   
 -- EITHER YOUR DEMAND IS FULFILLED OR YOU HAVE EXCEEDED TARGET INVENTORY STOP ORDERING FOR LOST SALES 
 -- WE WILL ORDER TRAYS IF THEY ARE PROFITABLE OR EXCEEDING TARGET INVENTORY IS ALLOWED 
   IF V_TARGET_INVENTORY <= V_ON_HAND
     OR V_DEMAND <= V_ON_HAND THEN
   
   BEGIN
      V_N2 := 0 ;
   END;
   ELSE
  -- ORDER 1 EXTRA TRAY IF ITS PROFITABLE / CAN BE SOLD OVER ITS SHELF LIFE ( DUE TO V_N1 WE CAN BE AT MOST 1 TRAY AWAY TO PREVENT ALL LOST SALES) 
   BEGIN
      V_EXTRA := V_DEMAND_L - V_ON_HAND ;
      IF V_EXTRA >= V_UPT THEN
   -- ORDER 1 TRAY IF IT CAN BE SOLD COMPLETELY , I.E. NO WASTAGE   
      BEGIN
         V_N2 := 1 ;
      END;
      ELSE
   --CALCULATE WASTED UNITS IF WE SEND EXTRA TRAY AND CALCULATE PROFITABILITY OF THE TRAY  
      BEGIN
         V_WASTE := V_UPT - V_EXTRA ;
         V_PROFIT := V_EXTRA * V_MARGIN * V_SP - V_WASTE * V_CP ;
         IF V_PROFIT > 0 THEN
    --IF TRAY IS PROFITABLE SEND IT ELSE CHECK IF UPC IS NEWLY LAUNCHED   
         BEGIN
            V_N2 := 1 ;
         END;
         ELSE
         
         BEGIN
            IF V_LAUNCH_DATE IS NOT NULL THEN
        -- IF UPC IS NEWLY LAUNCHED SEND 1 TRAY  ELSE CHECK IF IT IS NOT BREACHING WASTE CONSTRAINT  
            BEGIN
               V_DAYS := V_DATE - V_LAUNCH_DATE ;
               IF V_DAYS <= 21 THEN
               
               BEGIN
                  V_N2 := 1 ;
               END;
               ELSE
               
               BEGIN
                  IF V_WC IS NULL THEN
                  
                  BEGIN
                     V_WC := 0 ;-- DEFAULT WASTE CONSTRAINT
                  END;
                  END IF;
                  IF V_WASTE <= V_WC * V_UPT THEN
                  --SENDING ONE TRAY IF WASTE CONSTRAINT IS NOT BREACHED
                  BEGIN
                     V_N2 := 1 ;
                  END;
                  ELSE
                 
                  BEGIN
                     V_N2 := 0 ;
                  END;
                  END IF;
               END;
               END IF;
            END;
            ELSE
            
            BEGIN
               IF V_WC IS NULL THEN
               
               BEGIN
                  V_WC := 0 ;
               END;
               END IF;
               IF V_WASTE <= V_WC * V_UPT THEN
               
               BEGIN
                  V_N2 := 1 ;
               END;
               ELSE
               
               BEGIN
                  V_N2 := 0 ;
               END;
               END IF;
            END;
            END IF;
         END;
         END IF;
      END;
      END IF;
   END;
   END IF;
   
   --AT THIS POINT WE HAVE ORDERED TO PREVENT LOST SALES IF TRAYS ARE PROFITABLE
   IF ( V_N2 IS NULL ) THEN
   
   BEGIN
      V_N2 := 0 ;
   END;
   END IF;
   --UPDATED ON HAND STOCK INCLUDING ORDERS TO PREVENT LOST SALES
   V_ON_HAND := V_ON_HAND + (V_N2 * V_UPT) ;
   
   --ORDERING TO ENSURE TARGET INVENTORY IF WE HAVE NOT EXCEEDED TARGET INVENTORY YET
   IF V_TARGET_INVENTORY > V_ON_HAND THEN
   
   BEGIN
      V_N3 := FLOOR((V_TARGET_INVENTORY - V_ON_HAND) / V_UPT) ;
      V_ON_HAND := V_ON_HAND + (V_N3 * V_UPT) ;
                  -- EXCEEDING TARGET INVENTORY BY 1 TRAY IF IT IS ALLOWED, EXCESS FLAG SET TO 'Y' AND IT CAN BE SOLD OVER ITS SHELF LIFE
      IF V_EXCESS = 'Y'
        AND V_TARGET_INVENTORY > V_ON_HAND THEN
      
      BEGIN
         IF V_DEMAND_L - V_ON_HAND >= V_UPT THEN
         
         BEGIN
            V_FLAG := 1 ;
         END;
         ELSE
         
         BEGIN
            V_FLAG := 0 ;
         END;
         END IF;
      END;
      ELSE
      
      BEGIN
         V_FLAG := 0 ;
      END;
      END IF;
   END;
   ELSE
   
   BEGIN
      V_N3 := 0 ;
      V_FLAG := 0 ;
   END;
   END IF;
   -- RETURNING TOTAL TRAYS TO BE ORDERED
   V_FLAG := V_FLAG + V_N3 + V_N2 + V_N1 ;
   RETURN V_FLAG;
END;




create or replace
FUNCTION idssc_hist_read_uod.BEN_EOD_CAL
(
  v_upc IN float,
  v_storecode IN float,
  v_fdate IN date,
  v_upt IN number,
  v_life IN number
)
RETURN FLOAT
AS
   v_waste FLOAT;
   V_SQL_CMD VARCHAR2(10000);
   V_DATE DATE := V_FDATE - V_LIFE + 1;

BEGIN
	
   SELECT waste INTO V_WASTE
    FROM idssc_hist_read_uod.ben_daily_store_orders
    WHERE fdate =   v_date
           AND upc = v_upc
           AND storecode = v_storecode
             AND upt = v_upt;
  
IF  v_waste IS NULL  THEN
  v_waste := 0 ;
   END IF;  
      
   RETURN v_waste;
END;





create or replace
PROCEDURE idssc_hist_read_uod.ben_ORDER_PLAN_GENE_DAY1
(v_date date)
AS
V_SQL_CMD clob;
BEGIN
insert into idssc_hist_read_uod.ben_qc_inter_tables
values('ORDER PLAN','STARTING',SYSTIMESTAMP);


--SUBSET DATA FOR A DAY AND CALCULATE TARGET INVENTORY
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_1';
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_1
SELECT A.UPC,A.STORECODE,A.DEPOT,A.DEMAND,A.FDATE,'STG',A.MODEL_CODE,A.C1,A.C2,A.C3,A.SP,A.CP,A.MARGIN,
A.WASTE_PCT,A.WASTE_CONSTRAINT,A.LAUNCH_DATE,A.EXCESS_FLAG,A.LIFE,A.FLAG1,A.FLAG2, ((CASE MODEL_CODE
WHEN 'COM' THEN GREATEST ( (C3*DEMAND) , (idssc_hist_read_uod.ben_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2)))
WHEN 'MUL' THEN C3*DEMAND
WHEN 'DOS' THEN idssc_hist_read_uod.ben_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2)
ELSE 0
END ) * COALESCE (1 + C.TOTAL_UPLIFT,1)) AS TARGET_INVENTORY ,
idssc_hist_read_uod.ben_DEMAND_SHELF_LIFE_CAL( STORECODE,A.UPC,  FDATE,LIFE) AS DEMAND_L
FROM idssc_hist_read_uod.ben_daily_demand A 
LEFT JOIN idssc_hist_read_uod.ben_nde  C
ON A.UPC = C.PRODUCT_ID  AND A.STORECODE= SUBSTR (C.LOCATION_ID, 2, 8) AND A.FDATE = C.uplift_dt
WHERE A.FDATE = v_date; 

  
--CALCULATE ORDERS AND JOIN PREVIOUS DAY EOD STOCK FOR EACH UPC
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_ORDER_PLAN_temp';
insert into idssc_hist_read_uod.ben_ORDER_PLAN_temp    
select Z.* , C.UPT , 0 as on_hand, 
CASE WHEN (COALESCE (FLAG1,1) + COALESCE (FLAG2,1)) = 2 
THEN idssc_hist_read_uod.ben_ORDERS_CAL ( 0 , DEMAND , MARGIN , C . UPT , fdate , CP , SP , 
LAUNCH_DATE , WASTE_CONSTRAINT , DEMAND_L , TARGET_INVENTORY , EXCESS_FLAG ) ELSE 0  END AS ORDERS, null as eod, Z.LIFE AS LIFE_W
FROM idssc_hist_read_uod.ben_TEMP_TABLE_1 Z LEFT JOIN idssc_hist_read_uod.ben_UPT_UPC C ON Z.UPC = C.UPC;



update  idssc_hist_read_uod.ben_ORDER_PLAN_TEmp
set eod = (ORDERS*UPT)*(1-COALESCE(WASTE_PCT, 0)) - COALESCE(DEMAND,0);


update  idssc_hist_read_uod.ben_ORDER_PLAN_TEMP
SET EOD = CASE WHEN EOD<0 THEN 0 ELSE EOD END;

 
 --CALCULATING SOLD UNITS, WASTE AND STORING IT IN MASTER TABLE   
INSERT INTO idssc_hist_read_uod.ben_daily_store_orders
(SELECT  UPC, STORECODE,DEPOT, DEMAND, FDATE, DEMAND_L, ON_HAND, ORDERS, UPT,
CASE WHEN ORDERS = 0 THEN 0 ELSE (CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND_L) > 0 THEN ((ORDERS*UPT)+ON_HAND-DEMAND_L) ELSE 0 END) END AS WASTE, 1 AS WASTE_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN 0 ELSE 1 END AS AVAILABILITY_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN (ORDERS*UPT+ON_HAND) ELSE DEMAND END AS SOLD_UNITS, life_w,life FROM 
idssc_hist_read_uod.ben_ORDER_PLAN_temp);


v_sql_cmd := 'insert into idssc_hist_read_uod.ben_qc_inter_tables
values(''ORDER PLAN'','' ' || V_DATE || ' DONE!'',SYSTIMESTAMP)';
execute immediate v_sql_cmd;


END;




create or replace
PROCEDURE idssc_hist_read_uod.ben_ORDER_PLAN_GENE
(v_date date)
AS
V_SQL_CMD clob;
BEGIN

--SUBSET DATA FOR A DAY AND CALCULATE TARGET INVENTORY
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_1';
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_1
SELECT  A.UPC,A.STORECODE,A.DEPOT,A.DEMAND,A.FDATE,'STG',A.MODEL_CODE,A.C1,A.C2,A.C3,A.SP,A.CP,A.MARGIN,
A.WASTE_PCT,A.WASTE_CONSTRAINT,A.LAUNCH_DATE,A.EXCESS_FLAG,A.LIFE,A.FLAG1,A.FLAG2, ((CASE MODEL_CODE
WHEN 'COM' THEN GREATEST ( (C3*DEMAND) , (idssc_hist_read_uod.ben_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2)))
WHEN 'MUL' THEN C3*DEMAND
WHEN 'DOS' THEN idssc_hist_read_uod.ben_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2)
ELSE 0
END ) * COALESCE (1 + C.TOTAL_UPLIFT,1)) AS TARGET_INVENTORY ,
idssc_hist_read_uod.ben_DEMAND_SHELF_LIFE_CAL( STORECODE,A.UPC,  FDATE,LIFE) AS DEMAND_L
FROM idssc_hist_read_uod.ben_daily_demand A 
LEFT JOIN idssc_hist_read_uod.ben_nde  C
ON A.UPC = C.PRODUCT_ID  AND A.STORECODE= SUBSTR (C.LOCATION_ID, 2, 8) AND A.FDATE = C.uplift_dt
WHERE A.FDATE = v_date; 


  
--CALCULATE ORDERS AND JOIN PREVIOUS DAY EOD STOCK FOR EACH UPC


insert into idssc_hist_read_uod.ben_ORDER_PLAN_TEMP     
select  Z.* , D.UPT , COALESCE(D.eod, 0) as on_hand, 
CASE WHEN (COALESCE (z.FLAG1,1) + COALESCE (z.FLAG2,1)) = 2 
THEN idssc_hist_read_uod.ben_ORDERS_CAL ( COALESCE ( D.eod , 0 ) , z.DEMAND , z.MARGIN , D.UPT , z.fdate , z.CP , z.SP , 
z.LAUNCH_DATE , z.WASTE_CONSTRAINT , z.DEMAND_L , z.TARGET_INVENTORY , z.EXCESS_FLAG ) ELSE 0  END AS ORDERS, null as eod, d.LIFE_w AS LIFE_W
FROM idssc_hist_read_uod.ben_TEMP_TABLE_1 Z 
LEFT JOIN idssc_hist_read_uod.ben_ORDER_PLAN_TEMP D ON Z.UPC = D.UPC AND Z.STORECODE = D.STORECODE AND Z.FDATE =  (1 + D.FDATE);


delete idssc_hist_read_uod.ben_ORDER_PLAN_TEMP where fdate = V_DATE-1;

update idssc_hist_read_uod.ben_ORDER_PLAN_TEMP
set eod = ((ON_HAND + (ORDERS * UPT)) * (1 - COALESCE(WASTE_PCT, 0)) - COALESCE(DEMAND,0)- COALESCE(idssc_hist_read_uod.ben_EOD_CAL(UPC,STORECODE,FDATE,UPT,LIFE_w),0));


update idssc_hist_read_uod.ben_ORDER_PLAN_TEMP
set life_w = life where orders<>0;


update idssc_hist_read_uod.ben_ORDER_PLAN_TEMP
set eod = case when eod<0 then 0 else eod end;


     
UPDATE  idssc_hist_read_uod.ben_daily_store_orders
SET WASTE_FLAG=0 WHERE FDATE = v_date-life_w+1;


 
 --CALCULATING SOLD UNITS, WASTE AND STORING IT IN MASTER TABLE   
INSERT INTO idssc_hist_read_uod.ben_daily_store_orders
(SELECT  UPC, STORECODE,DEPOT, DEMAND, FDATE, DEMAND_L, ON_HAND, ORDERS, UPT,
CASE WHEN ORDERS = 0 THEN 0 ELSE (CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND_L) > 0 THEN ((ORDERS*UPT)+ON_HAND-DEMAND_L) ELSE 0 END) END AS WASTE, 1 AS WASTE_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN 0 ELSE 1 END AS AVAILABILITY_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN (ORDERS*UPT+ON_HAND) ELSE DEMAND END AS SOLD_UNITS, life_w,life FROM 
idssc_hist_read_uod.ben_ORDER_PLAN_TEMP);



v_sql_cmd := 'insert into idssc_hist_read_uod.ben_qc_inter_tables
values(''ORDER PLAN'','' ' || V_DATE || ' DONE!'',SYSTIMESTAMP)';
execute immediate v_sql_cmd;

COMMIT;


END;




create or replace
PROCEDURE idssc_hist_read_uod.ben_ORDER_PLAN_Gene_ALL
( V_DATE_START IN DATE, V_DATE_END IN DATE)
AS
V_DATE DATE;
V_SQL_CMD VARCHAR2(10000);
BEGIN

V_DATE :=  V_DATE_START+1;
   WHILE V_DATE < V_DATE_END+1
   LOOP 
      
      BEGIN
         idssc_hist_read_uod.ben_ORDER_PLAN_GENE(V_DATE);
         V_DATE := 1+ V_DATE ;
      END;
   END LOOP;

end;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.ben_PROC_ORDER_PLAN
(
   V_END_DATE IN DATE,
   V_START_DATE IN DATE
)
AS
V_SQL_CMD VARCHAR2(10000);
v_c1 int;
V_c2 int;
BEGIN


BEGIN
IDSSC_HIST_READ_UOD.ben_date_create(V_START_DATE,V_END_DATE);
END;

-- CODE FOR UPT-UPC--

  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.ben_UPT_UPC';
INSERT INTO IDSSC_HIST_READ_UOD.ben_UPT_UPC(
				SELECT UPC, OLD_UPT FROM idssc_hist_read_uod.ben_reco_comparison);

INSERT INTO IDSSC_HIST_READ_UOD.ben_UPT_UPC(
				SELECT UPC, NEW_UPT FROM idssc_hist_read_uod.ben_reco_comparison);

   v_sql_cmd := 'truncate table idssc_hist_read_uod.ben_CORRECTED_LATEST'; execute immediate v_sql_cmd;     
INSERT INTO IDSSC_HIST_READ_UOD.ben_CORRECTED_LATEST(
SELECT CAST(UPC AS INT),
		CATEGORY_CODE,
		CORP_CODE,
		CORR_SALES_DATE,
		CORR_SALES_QTY,
		RANK() OVER(PARTITION BY CAST(UPC AS INT),CATEGORY_CODE,CORP_CODE,CORR_SALES_DATE ORDER BY INTERFACE_RUN_DATE_TIME DESC)
FROM IDSSC_HIST.HIST_CORRECTED_SALES where CORR_SALES_DATE between V_START_DATE AND V_END_DATE+41
and upc not like '%A' and upc not like '%C');

DELETE IDSSC_HIST_READ_UOD.ben_CORRECTED_LATEST
WHERE RANK_CORR<>1;

DELETE IDSSC_HIST_READ_UOD.ben_CORRECTED_LATEST
WHERE upc not in (select distinct upc from idssc_hist_read_uod.ben_reco_comparison);

insert into idssc_hist_read_uod.ben_qc_inter_tables
values('CORRECTED SALES','LATEST SELECTED',SYSTIMESTAMP);
COMMIT;




v_sql_cmd := 'truncate table idssc_hist_read_uod.ben_ACTUAL_LATEST'; execute immediate v_sql_cmd;     
INSERT INTO IDSSC_HIST_READ_UOD.ben_ACTUAL_LATEST(
SELECT cast(UPC as int),
		DEPARTMENT,
		RETAIL_STORE_ID,
		BUSINESS_DATE,
		ACTUAL_UNIT_PRICE,
		(case when (SALE_QTY +ABS(RETURN_QTY))>0 then (SALE_QTY - ABS(RETURN_QTY)) else 0 end)  as actual,
		RANK() OVER (PARTITION BY cast(upc as int), DEPARTMENT,RETAIL_STORE_ID,BUSINESS_DATE,ACTUAL_UNIT_PRICE ORDER BY INTERFACE_RUN_DATE_TIME desc)
FROM IDSSC_HIST.hist_agg_upc_st_prce_other_day where BUSINESS_DATE between V_START_DATE AND V_END_DATE+41
and upc not like '%A' and upc not like '%C');


DELETE IDSSC_HIST_READ_UOD.ben_ACTUAL_LATEST
WHERE RANK_act<>1;


v_sql_cmd := 'truncate table idssc_hist_read_uod.ben_ACTUAL_TOTAL'; execute immediate v_sql_cmd; 
INSERT INTO ben_ACTUAL_TOTAL(
SELECT UPC,
		CATEGORY_CODE,
		STORE,
		FDATE,
		SUM(ACTUAL)
FROM idssc_hist_read_uod.ben_ACTUAL_LATEST where upc in (select distinct upc from idssc_hist_read_uod.ben_reco_comparison)
GROUP BY UPC,CATEGORY_CODE,STORE,FDATE);

insert into idssc_hist_read_uod.ben_qc_inter_tables
values('ACTUAL SALES','LATEST SELECTED',SYSTIMESTAMP);
COMMIT;



v_sql_cmd := 'truncate table idssc_hist_read_uod.ben_UPC_STORE'; execute immediate v_sql_cmd; 
INSERT INTO idssc_hist_read_uod.ben_UPC_STORE(
SELECT DISTINCT UPC, STORE FROM idssc_hist_read_uod.ben_ACTUAL_TOTAL 
GROUP BY UPC,STORE);


v_sql_cmd := 'truncate table idssc_hist_read_uod.ben_DEMAND_GRID'; execute immediate v_sql_cmd; 
INSERT INTO idssc_hist_read_uod.ben_DEMAND_GRID(
SELECT c.UPC,c.STORE,c.fDATE,d.CATEGORY_id,NULL,null FROM (select * from idssc_hist_read_uod.ben_UPC_STORE A CROSS JOIN idssc_hist_read_uod.ben_DATE_RANGE B)c left join idssc_hist_read_uod.man_product_dimension d on c.upc=d.upc );

MERGE INTO idssc_hist_read_uod.ben_DEMAND_GRID 
USING (SELECT * FROM idssc_hist_read_uod.ben_CORRECTED_LATEST) ben_CORRECTED_LATEST 
ON ( idssc_hist_read_uod.ben_DEMAND_GRID.UPC = ben_CORRECTED_LATEST.UPC
AND  idssc_hist_read_uod.ben_DEMAND_GRID.STORE = ben_CORRECTED_LATEST.STORE 
AND idssc_hist_read_uod.ben_DEMAND_GRID.FDATE = ben_CORRECTED_LATEST.FDATE)
WHEN MATCHED THEN UPDATE SET CORRECTED = ben_CORRECTED_LATEST.CORRECTED;

update idssc_hist_read_uod.ben_DEMAND_GRID
 SET CORRECTED=0 where corrected is null;

MERGE INTO idssc_hist_read_uod.ben_DEMAND_GRID 
USING (SELECT * FROM idssc_hist_read_uod.ben_ACTUAL_TOTAL) ben_ACTUAL_TOTAL 
ON ( idssc_hist_read_uod.ben_DEMAND_GRID.UPC = ben_ACTUAL_TOTAL.UPC
AND  idssc_hist_read_uod.ben_DEMAND_GRID.STORE = ben_ACTUAL_TOTAL.STORE 
AND idssc_hist_read_uod.ben_DEMAND_GRID.FDATE = ben_ACTUAL_TOTAL.FDATE)
WHEN MATCHED THEN UPDATE SET ACTUAL = ben_ACTUAL_TOTAL.ACTUAL;

UPDATE idssc_hist_read_uod.ben_DEMAND_GRID 
SET ACTUAL =0 WHERE ACTUAL IS NULL;

UPDATE idssc_hist_read_uod.ben_DEMAND_GRID 
SET CORRECTED =0 WHERE CORRECTED IS NULL;

UPDATE idssc_hist_read_uod.ben_DEMAND_GRID 
SET CORRECTED =ACTUAL WHERE CORRECTED <ACTUAL;

insert into idssc_hist_read_uod.ben_qc_inter_tables
values('GRID','COMPLETED',SYSTIMESTAMP);


COMMIT;
execute immediate 'truncate TABLE idssc_hist_read_uod.ben_DAILY_DEMAND_raw';
 insert INTO idssc_hist_read_uod.ben_DAILY_DEMAND_raw
   ( select /*+PARALLEL(4)*/ x.upc,x.store,x.DEPOT_CODE,x.actual,
									x.fdate,
                                    x.MODEL ,
                                    x.DAY_FULL ,
                                    x.DAY_PART ,
                                    x.MULT ,
                                    x.SP ,
                                    x.CP ,
                                    x.MARGIN ,
                                    0,
                                    0.99,
                                   -- D.value_number  ,
                                    x.ON_RANGE_DT ,
                                    x.xs_flag,
                                  	F.LIFE
									FROM ( select a.*,b.depot_code, e.MODEL ,
                                  e.DAY_FULL ,
                                    e.DAY_PART ,e.mult,
                                    g.sp,g.cp,g.margin,e.ON_RANGE_DT,i.xs_flag
                                     from idssc_hist_read_uod.ben_DEMAND_GRID A
                                         LEFT JOIN IDSSC_HIST.HIST_STORE_REF B
                                                  ON A.store = SUBSTR(B.SITE_CODE, 2, 8)
										 LEFT JOIN idssc_hist_read_uod.ben_TI_MODEL E
												  ON A.UPC = E.PRODUCT_ID
													 AND A.store = SUBSTR(E.LOCATION_ID, 2, 8)
										 LEFT JOIN idssc_hist_read_uod.ben_COST_FINAL G
												  ON G.upc = A.UPC
										 LEFT JOIN idssc_hist_read_uod.ben_store_excess I
												  ON A.store = i.site_code 
												     AND A.CATEGORY_CODE= I.CATEGORY_CODE) x
										 LEFT JOIN idssc_hist_read_uod.ben_PRODUCTLIFE F
												  ON x.UPC = F.UPC
                          AND x.DEPOT_CODE = F.DEPOT
													 AND to_char(x.fdate+1,'D') = F.FDAY );

			COMMIT;

  
         
			delete idssc_hist_read_uod.ben_daily_DEMAND 
			WHERE LIFE IS NULL;
         
			delete idssc_hist_read_uod.ben_daily_DEMAND
			WHERE MODEL_CODE IS NULL;
      
      insert into idssc_hist_read_uod.ben_qc_inter_tables
values('DAILY DEMAND_raw','COMPLETED',SYSTIMESTAMP);


COMMIT;


       execute immediate 'truncate TABLE idssc_hist_read_uod.ben_daily_demand';   

    BEGIN
          idssc_hist_read_uod.ben_APPEND_TRANSFORM(v_start_date,v_end_date);
       END;


			 update idssc_hist_read_uod.ben_DAILY_DEMAND
          SET FLAG4 = (CASE 
                                          WHEN FLAG3 IS NULL THEN FLAG2
                 ELSE FLAG3
                       END);
                                                                
       update idssc_hist_read_uod.ben_DAILY_DEMAND
          SET FLAG2 = FLAG4;


      insert into idssc_hist_read_uod.ben_qc_inter_tables
values('DAILY DEMAND UPDATE','COMPLETED',SYSTIMESTAMP);


COMMIT;


                v_sql_cmd := 'truncate table idssc_hist_read_uod.ben_nde'; execute immediate v_sql_cmd;               
   insert into idssc_hist_read_uod.ben_nde
   (select product_id,
   location_id,
   uplift_dt,
   total_uplift
   from idssc_hist_read_uod.ben_nde_1 where product_id in (select distinct upc from idssc_hist_read_uod.ben_daily_demand));
                                                              
      insert into idssc_hist_read_uod.ben_qc_inter_tables
values('NDE','COMPLETED',SYSTIMESTAMP);


COMMIT;
         

                                              
       execute immediate 'truncate TABLE idssc_hist_read_uod.ben_daily_store_orders';                     
       
       
                      insert into idssc_hist_read_uod.ben_qc_inter_tables
values('ORDER PLAN STARTING','COMPLETED',SYSTIMESTAMP);


COMMIT;
       
           
       BEGIN
       idssc_hist_read_uod.ben_ORDER_PLAN_GENE_DAY1 (V_START_DATE);
       END;
      
		COMMIT;           
				   
       BEGIN
       idssc_hist_read_uod.ben_ORDER_PLAN_GENE_ALL (V_START_DATE,V_END_DATE);
       END;
          
      COMMIT;
      
           v_sql_cmd := 'select max(A.B) from (select distinct fdate,count(*) B from idssc_hist_read_uod.ben_daily_store_orders group by fdate)a'; 
                   execute immediate v_sql_cmd INTO V_C1;
       v_sql_cmd := 'select min(A.B) from (select distinct fdate,count(*) B from idssc_hist_read_uod.ben_daily_store_orders group by fdate)a'; 
                   execute immediate v_sql_cmd INTO V_C2;
       
       v_sql_cmd := 'insert INTO idssc_hist_read_uod.ben_qc_INTER_TABLES
       VALUES(''DAILY STORE ORDERS'',(case when (:a<>:b) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),SYSTIMESTAMP)'; 
       execute immediate v_sql_cmd using v_c1, v_c2;
       COMMIT;
       
      
      
        INSERT INTO idssc_hist_read_uod.ben_qc_INTER_TABLES
                VALUES('ORDER PLAN','ORDER PLAN COMPLETED',SYSTIMESTAMP);
                COMMIT; 
      
      
  COMMIT;
  END;
  
  
  
  
  create or replace
PROCEDURE idssc_hist_read_uod.ben_PROC_KPI_CAL
(
   V_END_DATE IN DATE,
   V_START_DATE IN DATE
)
AS
V_SQL_CMD VARCHAR2(10000);

BEGIN

--TABLE FOR KPIS AT 3 LEVEL-ALL,ONLY MAYLAND,ALL EXCEPT MAYLAND--  
   
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_3_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_3_DEPOT
  ( SELECT UPC ,
           UPT ,
           DEPOT ,
           SUM(DEMAND) DEMAND  ,
           SUM(ON_HAND) ON_HAND  ,
           SUM(ORDERS) ORDERS  ,
           SUM(CASE ORDERS
                          WHEN 0 THEN 0
               ELSE WASTE
                  END) WASTE  ,
           SUM(SOLD_UNITS) SOLD_UNITS  
    FROM idssc_hist_read_uod.ben_DAILY_STORE_ORDERS 
     WHERE FDATE BETWEEN V_START_DATE AND V_END_DATE
    GROUP BY UPC,UPT,DEPOT );

       
       

       V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_3'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_3
  ( SELECT UPC ,
           UPT ,
           SUM(DEMAND) DEMAND  ,
           SUM(ON_HAND) ON_HAND  ,
           SUM(ORDERS) ORDERS  ,
           SUM(WASTE) WASTE  ,
           SUM(SOLD_UNITS) SOLD_UNITS  
    FROM idssc_hist_read_uod.ben_TEMP_TABLE_3_DEPOT 
      GROUP BY UPC,UPT );


V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_4'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_4
  ( SELECT A.UPC ,
           A.UPT ,
           B.IS_SRP ,
           B.TRAY_TYPE ,
           B.CURRENT_TRAY_TYPE ,
           B.CURRENT_UPT ,
           B.SP ,
           B.PRODUCT_COST ,
           A.DEMAND ,
           A.ORDERS ,
           A.WASTE ,
           A.SOLD_UNITS ,
           (A.DEMAND - A.SOLD_UNITS) LOST_SALES  ,
           A.SOLD_UNITS * B.primary_trans / A.UPT PRIMARY_TRANSPORT  ,
           A.SOLD_UNITS * B.TRAY_HIRE / A.UPT TRAY_HIRE_COST  ,
           A.SOLD_UNITS * B.DEPOT_RHD / A.UPT DEPOT_RHD_COST  ,
           A.SOLD_UNITS * B.TRAY_LENDING / A.UPT TRAY_LENDING_COST  ,
           A.SOLD_UNITS * B.STORE_HANDLING / A.UPT STORE_HANDLING_COST  ,
           A.SOLD_UNITS * B.EX_WORKS EX_WORKS_COST  ,
           A.SOLD_UNITS * B.SP SALES_REVENUE  ,
           A.SOLD_UNITS * B.PRODUCT_COST COST_OF_SOLD  ,
           A.WASTE * B.PRODUCT_COST * 0.6 WASTE_RECOVERY  ,
           A.WASTE / A.UPT * (B.primary_trans + B.TRAY_HIRE + B.DEPOT_RHD - B.TRAY_LENDING + B.STORE_HANDLING + (B.EX_WORKS * A.UPT)) COST_OF_WASTE  
    FROM idssc_hist_read_uod.ben_TEMP_TABLE_3 A
           LEFT JOIN idssc_hist_read_uod.ben_PROD_DESCR_LATEST B
            ON A.UPC = B.UPC
           AND A.UPT = B.UPT );

     delete ben_TEMP_TABLE_4
                where upt=current_upt;


--===============================

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_4_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_4_DEPOT
  ( SELECT A.UPC ,
           A.UPT ,
           A.DEPOT ,
           B.IS_SRP ,
           B.TRAY_TYPE ,
           B.CURRENT_TRAY_TYPE ,
           b.current_upt,
           B.SP ,
           B.PRODUCT_COST ,
           A.DEMAND ,
           A.ORDERS ,
           A.WASTE ,
           A.SOLD_UNITS ,
           (A.DEMAND - A.SOLD_UNITS) LOST_SALES  ,
           A.SOLD_UNITS * B.primary_trans / A.UPT PRIMARY_TRANSPORT  ,
           A.SOLD_UNITS * B.TRAY_HIRE / A.UPT TRAY_HIRE_COST  ,
           A.SOLD_UNITS * B.DEPOT_RHD / A.UPT DEPOT_RHD_COST  ,
           A.SOLD_UNITS * B.TRAY_LENDING / A.UPT TRAY_LENDING_COST  ,
           A.SOLD_UNITS * B.STORE_HANDLING / A.UPT STORE_HANDLING_COST  ,
           A.SOLD_UNITS * B.EX_WORKS EX_WORKS_COST  ,
           A.SOLD_UNITS * B.SP SALES_REVENUE  ,
           A.SOLD_UNITS * B.PRODUCT_COST COST_OF_SOLD  ,
           A.WASTE * B.PRODUCT_COST * 0.6 WASTE_RECOVERY  ,
          A.WASTE / A.UPT * (B.primary_trans + B.TRAY_HIRE + B.DEPOT_RHD - B.TRAY_LENDING + B.STORE_HANDLING + (B.EX_WORKS * A.UPT)) COST_OF_WASTE  
    FROM idssc_hist_read_uod.ben_TEMP_TABLE_3_DEPOT A
        LEFT JOIN idssc_hist_read_uod.ben_PROD_DESCR_LATEST B
            ON A.UPC = B.UPC
           AND A.UPT = B.UPT );

                 
                 

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_5_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_5_DEPOT
SELECT UPC, 
          UPT,
                DEPOT,
          IS_SRP,
          TRAY_TYPE,
          CURRENT_TRAY_TYPE, 
                (CASE TRAY_TYPE
                           WHEN 'BROWN_TRAY' THEN 8
                          WHEN 'HALF_TRAY_2' THEN 7
                          WHEN 'HALF_TRAY_5' THEN 6
                          WHEN 'HALF_TRAY_7' THEN 5
                          WHEN 'METRIC_TRAY_2' THEN 4
                          WHEN 'METRIC_TRAY_5' THEN 3
                          WHEN ( CASE CURRENT_TRAY_TYPE
                                    WHEN 'METRIC_TRAY_7' THEN 'CARDBOARD'
                                    ELSE 'METRIC_TRAY_7'
                            END ) THEN 2
           ELSE 1
           END),
          CURRENT_UPT,
          SP,
          PRODUCT_COST,
          DEMAND,
         ORDERS,
          WASTE,
          SOLD_UNITS,
          LOST_SALES,
          PRIMARY_TRANSPORT,
          TRAY_HIRE_COST,
          DEPOT_RHD_COST,
          TRAY_LENDING_COST,
          STORE_HANDLING_COST,
          EX_WORKS_COST,
          SALES_REVENUE,
          COST_OF_SOLD,
          WASTE_RECOVERY,
          COST_OF_WASTE,

                 (PRIMARY_TRANSPORT + TRAY_HIRE_COST + DEPOT_RHD_COST  + STORE_HANDLING_COST + EX_WORKS_COST + COST_OF_WASTE) AS E2E_COST,
          (SALES_REVENUE+ TRAY_LENDING_COST ) AS E2E_REVENUE,
          (SALES_REVENUE + (TRAY_LENDING_COST-TRAY_HIRE_COST) - PRIMARY_TRANSPORT - DEPOT_RHD_COST  - STORE_HANDLING_COST - EX_WORKS_COST -  COST_OF_WASTE) AS E2E_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) AS GROSS_SELLING_MARGIN,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY AS GROSS_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY- DEPOT_RHD_COST - STORE_HANDLING_COST AS NET_PROFIT
FROM idssc_hist_read_uod.ben_TEMP_TABLE_4_DEPOT;




delete FROM idssc_hist_read_uod.ben_TEMP_TABLE_5_DEPOT
WHERE E2E_PROFIT IS NULL;

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_6_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_6_DEPOT
  SELECT UPC ,
         UPT ,
         DEPOT ,
         IS_SRP ,
         TRAY_TYPE ,
         CURRENT_TRAY_TYPE2 ,
         TRAY_PRIOIRTY ,
         CURRENT_UPT ,
         SP ,
         PRODUCT_COST ,
         DEMAND ,
         ORDERS ,
         WASTE ,
         SOLD_UNITS ,
         LOST_SALES ,
         PRIMARY_TRANSPORT ,
         TRAY_HIRE_COST ,
         DEPOT_RHD_COST ,
         TRAY_LENDING_COST ,
         STORE_HANDLING_COST ,
         EX_WORKS_COST ,
         SALES_REVENUE ,
         COST_OF_SOLD ,
         WASTE_RECOVERY ,
         COST_OF_WASTE ,
         E2E_COST ,
         E2E_REVENUE ,
         E2E_PROFIT ,
         GROSS_SELLING_MARGIN ,
         GROSS_PROFIT ,
         NET_PROFIT ,
         RANK() OVER ( PARTITION BY UPC,depot ORDER BY E2E_PROFIT DESC, TRAY_PRIOIRTY DESC  ) PROFIT_RANK  
    FROM idssc_hist_read_uod.ben_TEMP_TABLE_5_DEPOT ;
       

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_temp_table_7_curr_dpt'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_temp_table_7_curr_dpt
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           DEPOT ,
           UPT CURRENT_UPT  ,
           TRAY_TYPE CURRENT_TRAY_TYPE  ,
           ORDERS CURRENT_ORDERS  ,
           WASTE CURRENT_WASTE  ,
           SOLD_UNITS CURRENT_SOLD_UNITS  ,
           LOST_SALES CURRENT_LOST_SALES  ,
           PRIMARY_TRANSPORT CURRENT_PRIMARY_TRANSPORT  ,
           TRAY_HIRE_COST CURRENT_TRAY_HIRE_COST  ,
           DEPOT_RHD_COST CURRENT_DEPOT_RHD_COST  ,
           TRAY_LENDING_COST CURRENT_TRAY_LENDING_COST  ,
           STORE_HANDLING_COST CURRENT_STORE_HANDLING_COST  ,
           EX_WORKS_COST CURRENT_EX_WORKS_COST  ,
           SALES_REVENUE CURRENT_SALES_REVENUE  ,
           COST_OF_SOLD CURRENT_COST_OF_SOLD  ,
           WASTE_RECOVERY CURRENT_WASTE_RECOVERY  ,
           COST_OF_WASTE CURRENT_COST_OF_WASTE  ,
           E2E_COST CURRENT_E2E_COST  ,
           E2E_REVENUE CURRENT_E2E_REVENUE  ,
           E2E_PROFIT CURRENT_E2E_PROFIT  ,
           GROSS_SELLING_MARGIN CURRENT_GROSS_SELLING_MARGIN  ,
           GROSS_PROFIT CURRENT_GROSS_PROFIT  ,
           NET_PROFIT CURRENT_NET_PROFIT  ,
           PROFIT_RANK CURRENT_PROFIT_RANK  
    FROM idssc_hist_read_uod.ben_TEMP_TABLE_6_DEPOT 
     WHERE CURRENT_TRAY_TYPE2 = TRAY_TYPE
             AND CURRENT_UPT = UPT );
                     
                      
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_7_CURRENT'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_7_CURRENT
  ( SELECT A.UPC ,
           MAX(SP) ,
           AVG(PRODUCT_COST) ,
           SUM(DEMAND) ,
           B.IS_SRP ,
           B.CURRENT_UPT ,
           B.CURRENT_TRAY_TYPE ,
           SUM(CURRENT_ORDERS) ,
           SUM(CURRENT_WASTE) ,
           SUM(CURRENT_SOLD_UNITS) ,
           SUM(CURRENT_LOST_SALES) ,
           SUM(CURRENT_PRIMARY_TRANSPORT) ,
           SUM(CURRENT_TRAY_HIRE_COST) ,
           SUM(CURRENT_DEPOT_RHD_COST) ,
           SUM(CURRENT_TRAY_LENDING_COST) ,
           SUM(CURRENT_STORE_HANDLING_COST) ,
           SUM(CURRENT_EX_WORKS_COST) ,
           SUM(CURRENT_SALES_REVENUE) ,
           SUM(CURRENT_COST_OF_SOLD) ,
           SUM(CURRENT_WASTE_RECOVERY) ,
           SUM(CURRENT_COST_OF_WASTE) ,
           SUM(CURRENT_E2E_COST) ,
           SUM(CURRENT_E2E_REVENUE) ,
           SUM(CURRENT_E2E_PROFIT) ,
           SUM(CURRENT_GROSS_SELLING_MARGIN) ,
           SUM(CURRENT_GROSS_PROFIT) ,
           SUM(CURRENT_NET_PROFIT) ,
           99 
    FROM idssc_hist_read_uod.ben_temp_table_7_curr_dpt A
           LEFT JOIN ( SELECT DISTINCT UPC ,
                                       CURRENT_UPT ,
                                       CURRENT_TRAY_TYPE ,
                                       IS_SRP 
                       FROM idssc_hist_read_uod.ben_PROD_DESCR_LATEST  ) B
            ON A.UPC = B.UPC
      GROUP BY A.UPC,B.CURRENT_UPT,B.CURRENT_TRAY_TYPE,B.IS_SRP );



         
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_5'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_5
SELECT UPC, 
          UPT,
          IS_SRP,
          TRAY_TYPE,
                CURRENT_TRAY_TYPE,
                CASE TRAY_TYPE
                           WHEN 'BROWN_TRAY' THEN 8
                WHEN 'HALF_TRAY_2' THEN 7
          WHEN 'HALF_TRAY_5' THEN 6
          WHEN 'HALF_TRAY_7' THEN 5
          WHEN 'METRIC_TRAY_2' THEN 4
          WHEN 'METRIC_TRAY_5' THEN 3
          WHEN (CASE  CURRENT_TRAY_TYPE   WHEN 'METRIC_TRAY_7' THEN 'CARDBOARD'
                         ELSE 'METRIC_TRAY_7'
                            END ) THEN 2
           ELSE 1
          
                END,
                     
          CURRENT_UPT,
          SP,
          PRODUCT_COST,
          DEMAND,
          ORDERS,
          WASTE,
         SOLD_UNITS,
          LOST_SALES,
          PRIMARY_TRANSPORT,
          TRAY_HIRE_COST,
          DEPOT_RHD_COST,
          TRAY_LENDING_COST,
          STORE_HANDLING_COST,
          EX_WORKS_COST,
          SALES_REVENUE,
          COST_OF_SOLD,
          WASTE_RECOVERY,
          COST_OF_WASTE ,
          (PRIMARY_TRANSPORT + TRAY_HIRE_COST + DEPOT_RHD_COST  + STORE_HANDLING_COST + EX_WORKS_COST + COST_OF_WASTE) AS E2E_COST,
          (SALES_REVENUE+ TRAY_LENDING_COST ) AS E2E_REVENUE,
          (SALES_REVENUE + (TRAY_LENDING_COST-TRAY_HIRE_COST) - PRIMARY_TRANSPORT - DEPOT_RHD_COST  - STORE_HANDLING_COST - EX_WORKS_COST -  COST_OF_WASTE) AS E2E_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) AS GROSS_SELLING_MARGIN,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY AS GROSS_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY- DEPOT_RHD_COST - STORE_HANDLING_COST AS NET_PROFIT
FROM idssc_hist_read_uod.ben_TEMP_TABLE_4;


delete FROM idssc_hist_read_uod.ben_TEMP_TABLE_5
WHERE E2E_PROFIT IS NULL;



V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_6'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_6
  SELECT UPC ,
         UPT ,
         IS_SRP ,
         TRAY_TYPE ,
         CURRENT_TRAY_TYPE2 ,
         TRAY_PRIOIRTY ,
         CURRENT_UPT ,
         SP ,
         PRODUCT_COST ,
         DEMAND ,
         ORDERS ,
         WASTE ,
         SOLD_UNITS ,
         LOST_SALES ,
         PRIMARY_TRANSPORT ,
         TRAY_HIRE_COST ,
         DEPOT_RHD_COST ,
         TRAY_LENDING_COST ,
         STORE_HANDLING_COST ,
         EX_WORKS_COST ,
         SALES_REVENUE ,
         COST_OF_SOLD ,
         WASTE_RECOVERY ,
         COST_OF_WASTE ,
         E2E_COST ,
         E2E_REVENUE ,
         E2E_PROFIT ,
         GROSS_SELLING_MARGIN ,
         GROSS_PROFIT ,
         NET_PROFIT ,
         RANK() OVER ( PARTITION BY UPC ORDER BY E2E_PROFIT DESC, TRAY_PRIOIRTY DESC  ) PROFIT_RANK  
    FROM idssc_hist_read_uod.ben_TEMP_TABLE_5;



V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_7_OPTIMAL'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_7_OPTIMAL
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           UPT OPTIMAL_UPT  ,
           TRAY_TYPE OPTIMAL_TRAY_TYPE  ,
           ORDERS OPTIMAL_ORDERS  ,
           WASTE OPTIMAL_WASTE  ,
           SOLD_UNITS OPTIMAL_SOLD_UNITS  ,
           LOST_SALES OPTIMAL_LOST_SALES  ,
           PRIMARY_TRANSPORT OPTIMAL_PRIMARY_TRANSPORT  ,
           TRAY_HIRE_COST OPTIMAL_TRAY_HIRE_COST  ,
           DEPOT_RHD_COST OPTIMAL_DEPOT_RHD_COST  ,
           TRAY_LENDING_COST OPTIMAL_TRAY_LENDING_COST  ,
           STORE_HANDLING_COST OPTIMAL_STORE_HANDLING_COST  ,
           EX_WORKS_COST OPTIMAL_EX_WORKS_COST  ,
           SALES_REVENUE OPTIMAL_SALES_REVENUE  ,
           COST_OF_SOLD OPTIMAL_COST_OF_SOLD  ,
           WASTE_RECOVERY OPTIMAL_WASTE_RECOVERY  ,
           COST_OF_WASTE OPTIMAL_COST_OF_WASTE  ,
           E2E_COST OPTIMAL_E2E_COST  ,
           E2E_REVENUE OPTIMAL_E2E_REVENUE  ,
           E2E_PROFIT OPTIMAL_E2E_PROFIT  ,
           GROSS_SELLING_MARGIN OPTIMAL_GROSS_SELLING_MARGIN  ,
           GROSS_PROFIT OPTIMAL_GROSS_PROFIT  ,
           NET_PROFIT OPTIMAL_NET_PROFIT  ,
           PROFIT_RANK OPTIMAL_PROFIT_RANK  
    FROM idssc_hist_read_uod.ben_TEMP_TABLE_6 
     WHERE PROFIT_RANK = 1 );

       
        
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_8'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_8
  ( SELECT A.UPC ,
           A.SP ,
           A.PRODUCT_COST ,
           A.DEMAND ,
           A.IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
          CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
          CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
           OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK 
    FROM idssc_hist_read_uod.ben_TEMP_TABLE_7_OPTIMAL A
           LEFT JOIN idssc_hist_read_uod.ben_TEMP_TABLE_7_CURRENT B
            ON A.UPC = B.UPC );


UPDATE idssc_hist_read_uod.ben_TEMP_TABLE_8
SET OPTIMAL_WASTE_RECOVERY = CASE WHEN OPTIMAL_WASTE>CURRENT_WASTE THEN (2*OPTIMAL_WASTE_RECOVERY)/3 ELSE OPTIMAL_WASTE_RECOVERY END ;
                     
  
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.ben_TEMP_TABLE_final'; EXECUTE IMMEDIATE V_SQL_CMD;  
      
INSERT INTO idssc_hist_read_uod.ben_TEMP_TABLE_final
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
           CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           case when demand=0 then 0 else current_WASTE / DEMAND end ,
            case when demand=0 then 0 else current_SOLD_UNITS / DEMAND end ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
         OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK ,
            case when demand=0 then 0 else OPTIMAL_WASTE / DEMAND end,
            case when demand=0 then 0 else OPTIMAL_SOLD_UNITS / DEMAND end
    FROM idssc_hist_read_uod.ben_TEMP_TABLE_8  );


	delete idssc_hist_read_uod.tracking_new 
	where TRACKING_METHOD like 'B%';

	INSERT INTO idssc_hist_read_uod.tracking_new 
	select concat(A.UPC,concat(' - ',B.Name))		,
A.SP	,
A.PRODUCT_COST	,
A.DEMAND	,
A.IS_SRP	,
A.CURRENT_UPT	,
A.CURRENT_TRAY_TYPE	,
A.CURRENT_ORDERS	,
A.CURRENT_WASTE	,
A.CURRENT_SOLD_UNITS	,
A.CURRENT_LOST_SALES	,
A.CURRENT_PRIMARY_TRANSPORT	,
A.CURRENT_TRAY_HIRE_COST	,
A.CURRENT_DEPOT_RHD_COST	,
A.CURRENT_TRAY_LENDING_COST	,
A.CURRENT_STORE_HANDLING_COST	,
A.CURRENT_EX_WORKS_COST	,
A.CURRENT_SALES_REVENUE	,
A.CURRENT_COST_OF_SOLD	,
A.CURRENT_WASTE_RECOVERY	,
A.CURRENT_COST_OF_WASTE	,
A.CURRENT_E2E_COST	,
A.CURRENT_E2E_REVENUE	,
A.CURRENT_E2E_PROFIT	,
A.CURRENT_GROSS_SELLING_MARGIN	,
A.CURRENT_GROSS_PROFIT	,
A.CURRENT_NET_PROFIT	,
A.CURRENT_PROFIT_RANK	,
A.CURRENT_WASTE_PER	,
A.CURRENT_SERVICE_LEVEL	,
A.OPTIMAL_UPT	,
A.OPTIMAL_TRAY_TYPE	,
A.OPTIMAL_ORDERS	,
A.OPTIMAL_WASTE	,
A.OPTIMAL_SOLD_UNITS	,
A.OPTIMAL_LOST_SALES	,
A.OPTIMAL_PRIMARY_TRANSPORT	,
A.OPTIMAL_TRAY_HIRE_COST	,
A.OPTIMAL_DEPOT_RHD_COST	,
A.OPTIMAL_TRAY_LENDING_COST	,
A.OPTIMAL_STORE_HANDLING_COST	,
A.OPTIMAL_EX_WORKS_COST	,
A.OPTIMAL_SALES_REVENUE	,
A.OPTIMAL_COST_OF_SOLD	,
A.OPTIMAL_WASTE_RECOVERY	,
A.OPTIMAL_COST_OF_WASTE	,
A.OPTIMAL_E2E_COST	,
A.OPTIMAL_E2E_REVENUE	,
A.OPTIMAL_E2E_PROFIT	,
A.OPTIMAL_GROSS_SELLING_MARGIN	,
A.OPTIMAL_GROSS_PROFIT	,
A.OPTIMAL_NET_PROFIT	,
A.OPTIMAL_PROFIT_RANK	,
A.OPTIMAL_WASTE_PER	,
A.OPTIMAL_SERVICE_LEVEL	,
'BENEFIT'	,
to_char(V_START_DATE, 'Month'),
B.CATEGORY	
from idssc_hist_read_uod.ben_TEMP_TABLE_final A
LEFT JOIN IDSSC_HIST.MAN_PRODUCT_DIMENSION B 
ON A.UPC=B.UPC;

 	update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Metric Tray 7"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_7';
			update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Metric Tray 5"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_5';
		   update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Metric Tray 2"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_2';
		   update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Half Tray Full Height' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_7';
		   update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Half Tray Nested' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_5';
		   update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Half Tray Nested' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_5';
      update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Brown Tray' WHERE CURRENT_TRAY_TYPE='BROWN_TRAY';
		   update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Cardboard' WHERE CURRENT_TRAY_TYPE='CARDBOARD';



		  update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Metric Tray 7"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_7';
			update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Metric Tray 5"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_5';
		   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Metric Tray 5"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_2';
		   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Half Tray Full Height' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_7';
		   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Half Tray Nested' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_5';
		   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Half Tray Nested' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_5';
   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_tray_type='Brown Tray' WHERE OPTIMAL_tray_type='BROWN_TRAY';
		   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_tray_type='Cardboard' WHERE OPTIMAL_tray_type='CARDBOARD';
   


commit;
         
   INSERT INTO idssc_hist_read_uod.ben_qc_INTER_TABLES
                VALUES('BENEFIT TRACKING OUTPUT','BENEFIT TRACKING E2E EXECUTION COMPLETED',SYSTIMESTAMP);
                COMMIT;
    
             
end;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.perf_date_create
(
  V_START_DATE IN DATE,
V_END_DATE IN DATE
)
AS 
V_DATE DATE;
BEGIN
EXECUTE IMMEDIATE'TRUNCATE TABLE IDSSC_HIST_READ_UOD.PERF_DATE_RANGE';
V_DATE :=  V_START_DATE;
WHILE V_DATE<V_END_DATE+42
LOOP
BEGIN
INSERT INTO IDSSC_HIST_READ_UOD.PERF_DATE_RANGE VALUES (V_DATE);
V_DATE := 1+ V_DATE ;
END;
END LOOP;
END;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.PERF_PROC_TRANSFORMATIONS
(
   V_START_DATE IN DATE,
   V_END_DATE IN DATE,
   V_TOP IN INT
)
AS
V_SQL_CMD CLOB;
V_DOLLY_VOLUME NUMBER(10,3);
       V_DOLLY_COST NUMBER(4,2);
       v_pallet_width int;
       v_pallet_depth int;
       v_pallet_height int;
BEGIN
    V_DOLLY_VOLUME := 601695.216;
       V_DOLLY_COST := 10.37;
       v_pallet_width := 120;
       v_pallet_depth := 80;
       v_pallet_height := 178;
      
  
--EXTRACTING THE OLD UPT-TRAY TYPE FOR ALL UPCS--
EXECUTE IMMEDIATE 'TRUNCATE TABLE IDSSC_HIST_READ_UOD.perf_old_upt';
insert into IDSSC_HIST_READ_UOD.perf_old_upt (
select  upc, current_upt, current_tray_type
from IDSSC_HIST_READ_UOD.uod_prod_descr_final_cat where run_time > (select max(model_start_time) from idssc_hist_read_uod.model_timestamp)
group by upc,current_upt, current_tray_type);


-- CODE FOR SELECTING UPCS WITH UPT CHANGE BEGINS--

  EXECUTE IMMEDIATE'TRUNCATE TABLE idssc_hist_read_uod.perf_NETWORK_SCHEDULE_1';
        INSERT INTO idssc_hist_read_uod.perf_NETWORK_SCHEDULE_1
         ( SELECT /*+PARALLEL(6)*/ CAST(A.UPC AS INT) ,
						A.src_location,
                        A.DEST_LOCATION ,
                        TO_DATE(A.EFFECTIVE_BEGIN_DATE,'DD-MON-RRRR'),
                        A.ORDER_LEAD_TIME_01 ,
                        A.UNITS_PER_TRAY_01 ,
                        A.ORDER_LEAD_TIME_02 ,
                           A.UNITS_PER_TRAY_02 ,
                        A.ORDER_LEAD_TIME_03 ,
                           A.UNITS_PER_TRAY_03 ,
                       A.ORDER_LEAD_TIME_04 ,
                       A.UNITS_PER_TRAY_04,
                     A.ORDER_LEAD_TIME_05 ,
                       A.UNITS_PER_TRAY_05 ,
                     A.ORDER_LEAD_TIME_06 ,
                           A.UNITS_PER_TRAY_06 ,
                        A.ORDER_LEAD_TIME_07 ,
                       A.UNITS_PER_TRAY_07,
                        TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR'),
                          RANK() OVER ( PARTITION BY CAST(A.UPC AS INT) , A.DEST_LOCATION, TO_DATE(A.EFFECTIVE_BEGIN_DATE,'DD-MON-RRRR')
                          ORDER BY TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR') DESC  ) 
              FROM idssc_hist.HIST_NETWORK_SCHEDULE  A
			  WHERE CAST(A.UPC AS INT) IN (SELECT DISTINCT UPC FROM IDSSC_HIST_READ_UOD.perf_old_upt)
			  ); 


  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_NETWORK_SCHEDULE_2';
      INSERT INTO idssc_hist_read_uod.PERF_NETWORK_SCHEDULE_2
         ( SELECT PRODUCT_ID ,
						SOURCE_ID,
                        sink_id ,
                        EFFECTIVE_BEGIN_DT ,
                        MAX(sun) ,
                        MAX(SUN_UPT) ,
                        MAX(mon) ,
                        MAX(MON_UPT) ,
                        MAX(tue) ,
                        MAX(TUE_UPT) ,
                        MAX(wed) ,
                        MAX(WED_UPT) ,
                        MAX(thu) ,
                        MAX(THU_UPT) ,
                        MAX(fri) ,
                        MAX(FRI_UPT) ,
                        MAX(sat) ,
                        MAX(SAT_UPT)
              FROM idssc_hist_read_uod.PERF_NETWORK_SCHEDULE_1 where rank_dt=1 
			  GROUP BY PRODUCT_ID,SOURCE_ID,SINK_ID,EFFECTIVE_BEGIN_DT); 

              UPDATE idssc_hist_read_uod.PERF_NETWORK_SCHEDULE_2
                     set sink_id=concat('MandS:W',sink_id) where sink_id like 'B%' or sink_id like 'D%' or sink_id like 'S%';
					
				UPDATE idssc_hist_read_uod.PERF_NETWORK_SCHEDULE_2
                     set sink_id=concat('S',sink_id) where sink_id not like 'M%'; 

                    

       --INSERTING UPT AND DELIVERY FLAGS AND RANKING THE NETWORK SCHEDULE FOR A UPC BY EFFECTIVE BEGIN DATE--
          EXECUTE IMMEDIATE  'TRUNCATE TABLE idssc_hist_read_uod.PERF_NETWORK_SCHEDULE_3'; 
          insert INTO idssc_hist_read_uod.PERF_NETWORK_SCHEDULE_3
         SELECT PRODUCT_ID ,
					 SOURCE_ID,
                     SINK_ID ,
                     EFFECTIVE_BEGIN_DT ,
                     SUN ,
                     SUN_UPT ,
                     MON ,
                     MON_UPT ,
                     TUE ,
                     TUE_UPT ,
                     WED ,
                     WED_UPT ,
                     THU ,
                     THU_UPT ,
                     FRI ,
                     FRI_UPT ,
                     SAT ,
                     SAT_UPT ,
                     RANK() OVER ( PARTITION BY PRODUCT_ID, SINK_ID ORDER BY EFFECTIVE_BEGIN_DT ASC  ) 
              FROM idssc_hist_read_uod.PERF_NETWORK_SCHEDULE_2; 



EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_ntw_schd_4'; 
     INSERT INTO idssc_hist_read_uod.PERF_ntw_schd_4
         ( SELECT A.* ,
                        B.EFFECTIVE_BEGIN_DT 
              FROM idssc_hist_read_uod.PERF_NETWORK_SCHEDULE_3  A
                        LEFT JOIN idssc_hist_read_uod.PERF_NETWORK_SCHEDULE_3  B
                           ON A.PRODUCT_ID = B.PRODUCT_ID
                        AND A.SINK_ID = B.SINK_ID
                        AND A.RANK_DATE = (B.RANK_DATE - 1) ); 



       --UPDATING TEMPORARY NETWORK SCHEDULE TABLE TO SET DEFAULT DATE FOR NULL RECORDS--
      UPDATE idssc_hist_read_uod.PERF_ntw_schd_4
          SET END_DATE =v_end_date
          WHERE END_DATE IS NULL; 
          
    UPDATE idssc_hist_read_uod.PERF_ntw_schd_4
          SET END_DATE = END_DATE - 1;


  --INSERTING UPT AND DELIVERY FLAGS ACROSS DAY OF WEEK AT UPC DEPOT LEVEL WITH BEGIN AND END DATES--  
       EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_ntw_schd_final'; 
      INSERT INTO idssc_hist_read_uod.PERF_ntw_schd_final
         ( SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SUN ,
                        SUN_UPT ,
                        END_DATE ,
                        1 
              FROM idssc_hist_read_uod.PERF_ntw_schd_4 
              UNION 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        MON ,
                        MON_UPT ,
                        END_DATE ,
                        2 
              FROM idssc_hist_read_uod.PERF_ntw_schd_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        TUE ,
                        TUE_UPT ,
                        END_DATE ,
                        3 
              FROM idssc_hist_read_uod.PERF_ntw_schd_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        WED ,
                        WED_UPT ,
                        END_DATE ,
                        4 
              FROM idssc_hist_read_uod.PERF_ntw_schd_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        THU ,
                        THU_UPT ,
                        END_DATE ,
                        5 
              FROM idssc_hist_read_uod.PERF_ntw_schd_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        FRI ,
                        FRI_UPT ,
                        END_DATE ,
                       6 
              FROM idssc_hist_read_uod.PERF_ntw_schd_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SAT ,
                        SAT_UPT ,
                        END_DATE ,
                        7 
              FROM idssc_hist_read_uod.PERF_ntw_schd_4  );



       --SETTING CONSISTENT VALUES FOR ORDER LEAD TIME
       UPDATE idssc_hist_read_uod.PERF_ntw_schd_final
          SET RCPT = 1
          WHERE RCPT IS NOT NULL;
     UPDATE idssc_hist_read_uod.PERF_ntw_schd_final
          SET RCPT = 0
          WHERE RCPT IS NULL;


INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('Network schedule','Network schedule done',SYSTIMESTAMP);
COMMIT;


-- INSERTING VARIOUS UPTS ACROSS DEPOTS TO FIND MOST REPEATING UPT
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_ntw_schd_depot'; 
       
       INSERT INTO idssc_hist_read_uod.PERF_ntw_schd_depot
         ( SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SUN ,
                        SUN_UPT ,
                        END_DATE ,
                        1 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.PERF_NTW_SCHD_4 
              UNION 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        MON ,
                        MON_UPT ,
                        END_DATE ,
                        2 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.PERF_NTW_SCHD_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        TUE ,
                        TUE_UPT ,
                        END_DATE ,
                        3 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.PERF_NTW_SCHD_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                       WED ,
                        WED_UPT ,
                        END_DATE ,
                        4 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.PERF_NTW_SCHD_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                       SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        THU ,
                        THU_UPT ,
                        END_DATE ,
                        5 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.PERF_NTW_SCHD_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        FRI ,
                        FRI_UPT ,
                        END_DATE ,
                        6 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.PERF_NTW_SCHD_4 
              UNION ALL 
              SELECT PRODUCT_ID ,
                        SINK_ID ,
                        EFFECTIVE_BEGIN_DT ,
                        SAT ,
                        SAT_UPT ,
                        END_DATE ,
                        7 ,
                        RANK_DATE 
              FROM idssc_hist_read_uod.PERF_NTW_SCHD_4  );
			  
			 
	commit;		  
-------------------------------

--COUNT OF REPEATITION OF UPT ACROSS DEPOTS
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_UPT_UPC_DEPOT'; 
       
      INSERT INTO idssc_hist_read_uod.PERF_UPT_UPC_DEPOT
         SELECT DISTINCT PRODUCT_ID ,
                                    SINK_ID ,
                                    UPT ,
                                    COUNT(*) 
             FROM idssc_hist_read_uod.PERF_ntw_schd_depot 
             where V_start_date between effective_begin_dt and end_date 
			 AND to_char(v_start_date+1,'D') = DAY_NUM
              GROUP BY PRODUCT_ID,SINK_ID,UPT;

       -- DELETING RECORDS WITH NULL UPTS 
       
       DELETE idssc_hist_read_uod.PERF_UPT_UPC_DEPOT
       WHERE UPT IS NULL; 

       --RANKING UPT BASED ON NUMBER OF OCCURANCE IN A DEPOT
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_UPT_UPC_DEPOT_RANK'; 
       
       INSERT INTO idssc_hist_read_uod.PERF_UPT_UPC_DEPOT_RANK
         SELECT DISTINCT UPC ,
                                    DEPOT ,
                                    UPT ,
                                    COUNT_UPT ,
                                    RANK() OVER ( PARTITION BY UPC ORDER BY COUNT_UPT DESC,UPT DESC  ) 
              FROM idssc_hist_read_uod.PERF_UPT_UPC_DEPOT; 
            
	-- INSERTING MOST OCCURING UPTS FOR UPCS WITH NO DEPOT ENTRY IN NETWORK SCHEDULE--
			
  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_UPT1'; 

		INSERT INTO idssc_hist_read_uod.PERF_UPT1
         ( SELECT DISTINCT upc ,
                                         UPT ,
                                         count(*)
              FROM idssc_hist_read_uod.PERF_UPT_UPC_DEPOT_RANK
                GROUP BY upc,UPT);

--DELETING WHERE UPT IS NULL
       
       DELETE idssc_hist_read_uod.PERF_UPT1
       WHERE UPT IS NULL;	
			
			                     
       --SELECTING MOST REPEATED UPT IN A DEPOT
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_UPT_UPC_DEPOT_FINAL';
      
       INSERT INTO idssc_hist_read_uod.PERF_UPT_UPC_DEPOT_FINAL
         ( SELECT UPC ,
                        DEPOT ,
                        UPT 
              FROM idssc_hist_read_uod.PERF_UPT_UPC_DEPOT_RANK 
                                  
                                  WHERE RANK_UPT = 1 ); 
                                  
       
       DELETE idssc_hist_read_uod.PERF_UPT_UPC_DEPOT_FINAL
       WHERE DEPOT LIKE 'S%'; 

       
      UPDATE idssc_hist_read_uod.PERF_UPT_UPC_DEPOT_FINAL
       SET DEPOT= SUBSTR(DEPOT,8,5); 


                   --COUNTING THE NUMBER OF OCCURANCE OF NON-NULL UPTS FOR A UPC
      
	       
       DELETE idssc_hist_read_uod.PERF_UPT1
       WHERE UPC in (select distinct upc from idssc_hist_read_uod.PERF_UPT_UPC_DEPOT_FINAL); 


       INSERT INTO idssc_hist_read_uod.PERF_UPT1
         ( SELECT DISTINCT upc ,
                                         UPT ,
                                         COUNT(*) 
              FROM idssc_hist_read_uod.PERF_UPT_UPC_DEPOT_FINAL
                GROUP BY upc,UPT);

       
       DELETE idssc_hist_read_uod.PERF_UPT1
       WHERE UPT IS NULL;

       --RANKING UPT FOR ALL UPC
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_UPT2';
       
       INSERT INTO idssc_hist_read_uod.PERF_UPT2
         SELECT DISTINCT UPC ,
                                    UPT ,
                                    COUNT_UPT ,
                                    RANK() OVER ( PARTITION BY UPC ORDER BY COUNT_UPT DESC,UPT DESC  ) 
              FROM idssc_hist_read_uod.PERF_UPT1;
                                  
                                  
       --SELECTING MOST REPEATING UPT AS THE CURRENT
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_CURR_UPT';
       
       INSERT INTO idssc_hist_read_uod.PERF_CURR_UPT
         ( SELECT UPC ,
                        UPT 
              FROM idssc_hist_read_uod.PERF_UPT2 
               WHERE RANK_UPT = 1 );


--JOINING THE OLD AND NEW UPTS FOR EACH UPC INTO A TABLE

  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.perf_upt_change'; 
insert into idssc_hist_read_uod.perf_upt_change(
select a.upc,a.upt,A.TRAY_TYPE,b.upt from IDSSC_HIST_READ_UOD.perf_old_upt a left join IDSSC_HIST_READ_UOD.PERF_CURR_UPT b
on a.upc=b.upc);
	

--DELETEING UPCS FOR WHICH RECOMMENDATIONS WERE NOT SENT
	
DELETE idssc_hist_read_uod.perf_upt_change
       WHERE old_UPT IS NULL;	   

--DELETING UPCS FOR WHICH NETWORK SCHEDULE DOESNT HAVE NEW UPT

DELETE idssc_hist_read_uod.perf_upt_change
       WHERE new_UPT IS NULL;	

--DELETING UPCS FOR WHICH THERE IS NOT UPT CHANGE

DELETE idssc_hist_read_uod.perf_upt_change
       WHERE old_UPT = new_upt;	

-- CODE FOR SELECTING UPCS WITH UPT CHANGE ENDS--

--Selecting UPCs where change as a result of recommendation--
--LIST OF UPCS FOR WHICH MODEL WOULD BE RUN WITH OLD AND NEW UPT/TRAY--

 EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_reco_map';
INSERT INTO IDSSC_HIST_READ_UOD.PERF_reco_map(
SELECT A.UPC, A.OLD_UPT,A.NEW_UPT,B.UPT,A.OLD_TRAY,B.TRAY_TYPE,b.profit_rank,
 (CASE b.TRAY_TYPE
                           WHEN 'BROWN_TRAY' THEN 8
                          WHEN 'HALF_TRAY_2' THEN 7
                          WHEN 'HALF_TRAY_5' THEN 6
                          WHEN 'HALF_TRAY_7' THEN 5
                          WHEN 'METRIC_TRAY_2' THEN 4
                          WHEN 'METRIC_TRAY_5' THEN 3
                          WHEN ( CASE a.old_tray
                                    WHEN 'METRIC_TRAY_7' THEN 'CARDBOARD'
                                    ELSE 'METRIC_TRAY_7'
                            END ) THEN 2
                             ELSE 1
           END)

FROM idssc_hist_read_uod.perf_upt_change A LEFT JOIN idssc_hist_read_uod.UOD_RECOMMENDATION_RANK B
ON A.UPC=B.UPC);

DELETE IDSSC_HIST_READ_UOD.PERF_reco_map
WHERE REC_UPT IS NULL;

DELETE IDSSC_HIST_READ_UOD.PERF_reco_map
WHERE RANK_BEN >V_TOP;

DELETE IDSSC_HIST_READ_UOD.PERF_reco_map
WHERE REC_UPT<>NEW_UPT;


  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_reco_comparison';
INSERT INTO IDSSC_HIST_READ_UOD.PERF_reco_comparison(
select A.UPC, A.OLD_UPT,A.NEW_UPT,a.rec_UPT, A.OLD_TRAY, a.new_tray,
rank() over (partition by a.upc order by a.rank_ben asc,a.tray_priority desc)
from IDSSC_HIST_READ_UOD.PERF_reco_map A);

DELETE IDSSC_HIST_READ_UOD.PERF_reco_comparison
WHERE rank_final >1;

INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('reco comparison','reco comparison 1',SYSTIMESTAMP);
COMMIT;


-- CODE FOR SELECTING LATEST SUPPLIER--

  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_VENDOR'; 
INSERT INTO idssc_hist_read_uod.PERF_VENDOR(
SELECT distinct product_id, substr(SOURCE_ID,1,4) FROM idssc_hist_read_uod.PERF_ntw_schd_4  where v_start_date between effective_begin_dt and end_date
              GROUP BY PRODUCT_ID, source_id);



   delete idssc_hist_read_uod.perf_VENDOR where vendor like 'B%';
    
    delete idssc_hist_read_uod.perf_VENDOR where vendor like 'D%';
     
    delete idssc_hist_read_uod.perf_VENDOR where vendor like 'H%';
 
  delete idssc_hist_read_uod.perf_VENDOR where vendor like 'S%';




--CODE FOR SP AND CP--

EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_article_upc'; 

insert into idssc_hist_read_uod.PERF_article_upc(
select distinct cast(article_no as int),
                cast(intl_article_no as int)
                from idssc_hist.HIST_assort_ean 
                where uom='EA' and site_no='Z200');

--selecting required records and mapping UPC
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_SP_UPC';

insert into idssc_hist_read_uod.PERF_sp_upc
(select cast(a.article_no as int),
        b.upc,
        a.interface_run_date_time,
        a.site_no,
        a.uom,
        a.valid_from_date,
        a.amount,
        rank() over (partition by a.article_no,b.upc,a.site_no,a.uom,a.valid_from_date order by   a.interface_run_date_time desc, amount asc)
        from  idssc_hist.HIST_ASSORT_UOM_COND_VALUE a right join idssc_hist_read_uod.PERF_article_upc b on cast(a.article_no as int)=cast(b.article_no as int)
        where a.uom='EA' and a.site_no='Z200' );


--RANKING THE SP DATA
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_SP_LATEST';

insert into idssc_hist_read_uod.PERF_sp_latest(
select upc,
        SP,
        rank() over (partition by upc order by valid_from_date desc)
        from idssc_hist_read_uod.PERF_sp_upc where rank_dt=1);
        
--SELECTING THE FINAL SP DATA INTO THE TABLE
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_SP_FINAL';
insert into idssc_hist_read_uod.PERF_sp_final(
select upc, sp from idssc_hist_read_uod.PERF_sp_latest where rank_sp=1);

commit;


--Selecting the latest CP data for UPCs based on CP in GB

      EXECUTE IMMEDIATE  'TRUNCATE TABLE idssc_hist_read_uod.PERF_cost_date_int';
       
      INSERT INTO idssc_hist_read_uod.PERF_cost_date_int
         ( SELECT intnl_article_no,
                           SUPPLIER_CODE,
                        LOCN_CODE,
                        INTO_LOCN_START_DATE,
                        UNITS_PER_TRAY,
                        TRAY_COST_PRICE/UNITS_PER_TRAY,
                        INTERFACE_RUN_DATE_TIME
              FROM idssc_hist.HIST_COST_DETAIL  WHERE LOCN_CODE='GB' and uom='EA'
              and intnl_article_no<>' ' AND TRAY_COST_PRICE<>0);



              EXECUTE IMMEDIATE  'TRUNCATE TABLE idssc_hist_read_uod.PERF_cost_date'; 
       
    INSERT INTO idssc_hist_read_uod.PERF_cost_date
         ( SELECT A.intnl_article_no,
                           A.SUPPLIER_CODE,
                        A.LOCN_CODE,
                        A.INTO_LOCN_START_DATE,
                        A.UNITS_PER_TRAY,
                        A.TRAY_COST_PRICE,
                        A.INTERFACE_RUN_DATE_TIME,
                        RANK() OVER ( PARTITION BY A.intnl_article_no, A.SUPPLIER_CODE,A.LOCN_CODE,A.INTO_LOCN_START_DATE,A.UNITS_PER_TRAY ORDER BY A.INTERFACE_RUN_DATE_TIME DESC  ) 
              FROM idssc_hist_read_uod.PERF_cost_date_int A);
    

       --SELECTING VENDOR SUPPLYING AT CURRENT UPT FROM CP DATA BASED ON VENDOR AND UPT MAPPING FOR A UPC
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_COST'; 

INSERT INTO idssc_hist_read_uod.PERF_COST
         ( SELECT C.UPC ,
                        C.VENDOR ,
                        C.CP_START_DT ,
                        C.CP ,
                        D.UPT ,
                        C.UPT ,
                        C.vendor_b 
              FROM ( SELECT A.UPC ,
                                    A.VENDOR ,
                                    A.UPT ,
                                    B.vendor as vendor_b ,
                                    A.CP_START_DT ,
                                    A.CP,
									 A.RANK_DT
                        FROM idssc_hist_read_uod.PERF_coST_DATE A
                                    LEFT JOIN idssc_hist_read_uod.PERF_VENDOR B
                                     ON A.UPC = B.UPC
                                    AND A.VENDOR = B.vendor ) C
                        LEFT JOIN idssc_hist_read_uod.PERF_curr_upt D
                           ON C.UPC = D.UPC
                        AND C.UPT = D.UPT
         WHERE C.RANK_DT=1);

-- DELETING THE COST DETAIL WHERE VENOR AND UPT DOESNT MATCH WITH THE VENDOR AND UPT IN NETWORK SCHEDULE
      
       DELETE idssc_hist_read_uod.PERF_COST
       WHERE NS_VENDOR IS NULL;

          DELETE idssc_hist_read_uod.PERF_COST
       WHERE CURRENT_UPT IS NULL;

	DELETE idssc_hist_read_uod.PERF_COST
       WHERE START_ >V_START_DATE;



             --RANKING ALL MATCHING CP BASED ON CP BEGIN DATE
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_COST_1'; 
       
       INSERT INTO idssc_hist_read_uod.PERF_COST_1
         SELECT UPC,
COST_VENDOR,
START_,
CP,
CURRENT_UPT,
COST_UPT,
NS_VENDOR ,
                     RANK() OVER ( PARTITION BY UPC ORDER BY START_ DESC, CP DESC  ) 
              FROM idssc_hist_read_uod.PERF_COST;
                                  
       --REMOVING ENTRIES WITH OLD CP START DATE
       
     DELETE idssc_hist_read_uod.PERF_COST_1
       WHERE DATE_RANK > 1;
                   
                   
       --RANKING BASED ON CP VALUES FOR SELECTING HIGHEST CP
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_COST_2'; 
       
       INSERT INTO idssc_hist_read_uod.PERF_COST_2
         SELECT UPC,
COST_VENDOR,
START_,
CP,
CURRENT_UPT,
COST_UPT,
NS_VENDOR ,
DATE_RANK,
           RANK() OVER ( PARTITION BY UPC ORDER BY CP DESC  ) 
              FROM idssc_hist_read_uod.PERF_COST_1;
       --SELECTING HIGHEST CP FOR A UPC
       
   DELETE idssc_hist_read_uod.PERF_COST_2
       WHERE CP_RANK > 1;
     
       
       
        --SELECTING FINAL CP FROM PREVIOUS TABLE AND SP FROM TABLE CONTAING SP AND CALCULATION OF MARGIN
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_COST_FINAL'; 
       
       INSERT INTO idssc_hist_read_uod.PERF_COST_FINAL
         ( SELECT DISTINCT UPC ,
                                         max(CP) ,
                                         CURRENT_UPT ,
                                         NULL ,
                                         NULL 
              FROM idssc_hist_read_uod.PERF_COST_2 
                GROUP BY UPC,CURRENT_UPT );



-- UPDATING THE SELLING PRICE IN THE CP TABLE FROM FINAL SP TABLE
      
       MERGE INTO idssc_hist_read_uod.PERF_COST_FINAL
       USING (SELECT DISTINCT * FROM idssc_hist_read_uod.PERF_sp_final) PERF_sp_final 
       ON ( idssc_hist_read_uod.PERF_COST_FINAL.UPC = PERF_sp_final.upc )
       WHEN MATCHED THEN UPDATE SET SP = PERF_sp_final.SP;

       --CALCULATING THE MARGIN OF A PRODUCT FROM SP AND CP
       
     DELETE idssc_hist_read_uod.PERF_COST_final
       WHERE CP is null;
       DELETE idssc_hist_read_uod.PERF_COST_final
       WHERE sp is null;
       
      DELETE idssc_hist_read_uod.PERF_COST_final
       WHERE sp =0;
       
	   DELETE idssc_hist_read_uod.PERF_COST_final
       WHERE CP =0;
       
       UPDATE idssc_hist_read_uod.PERF_COST_FINAL
          SET MARGIN = (SP - CP) / SP;
          
          --UPDATING MARGIN TO 25% WHERE LESS THAN 25%
       
      UPDATE idssc_hist_read_uod.PERF_COST_FINAL
          SET MARGIN = 0.25
          WHERE MARGIN < 0.25;

		 INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('cp_sp','cp sp done',SYSTIMESTAMP);
COMMIT; 

-- FINAL TABLE WITH UPCS TO RUN--

DELETE IDSSC_HIST_READ_UOD.PERF_reco_comparison
       WHERE UPC NOT IN (SELECT DISTINCT UPC FROM idssc_hist_read_uod.PERF_COST_FINAL);


INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('reco comparison','reco comparison 2',SYSTIMESTAMP);
COMMIT;

DELETE IDSSC_HIST_READ_UOD.PERF_ntw_schd_final
       WHERE PRODUCT_ID NOT IN (SELECT DISTINCT UPC FROM idssc_hist_read_uod.PERF_reco_comparison);

INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('N/W','network sched deleted',SYSTIMESTAMP);
COMMIT;


  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.perf_upt_tray_type';
INSERT INTO IDSSC_HIST_READ_UOD.perf_upt_tray_type(
				SELECT UPC, OLD_UPT,old_tray FROM idssc_hist_read_uod.PERF_reco_comparison);

INSERT INTO IDSSC_HIST_READ_UOD.perf_upt_tray_type(
				SELECT UPC, NEW_UPT,new_tray FROM idssc_hist_read_uod.PERF_reco_comparison);




 EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.perf_prod_descr';
 INSERT INTO idssc_hist_read_uod.perf_prod_descr
 (
 SELECT A.UPC,
		A.UPT,
		A.TRAY_TYPE,
		B.SP,
		B.CP,
		C.UPT,
		D.PRIMARY_TRANSPORT_COSTS,
		D.TRAY_HIRE,
		D.DEPOT_RHD_PER_TRAY,
		D.STORE_RECEIVING_PER_TRAY,
		D.STORE_HANDLING_PER_TRAY,
		D.TRAY_LENDING_PER_TRAY,
		NULL,
		C.tray_type,
		NULL,
		E.WIDTH,
		E.DEPTH,
		E.HEIGHT
	FROM idssc_hist_read_uod.perf_upt_tray_type A LEFT JOIN idssc_hist_read_uod.PERF_COST_FINAL B
	ON A.UPC=B.UPC
	LEFT JOIN IDSSC_HIST_READ_UOD.perf_old_upt C ON A.UPC=c.UPC
	LEFT JOIN idssc_hist.MAN_TRAY_COST D ON A.TRAY_TYPE=D.TRAY_TYPE
	LEFT JOIN idssc_hist.MAN_PRODUCT_DIMENSION E ON A.UPC=E.UPC
	);
  
INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('prod desc','join done',SYSTIMESTAMP);
COMMIT;


	v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.PERF_TRAY_VOLUME_FINAL '; EXECUTE IMMEDIATE V_SQL_CMD;
  
INSERT INTO idssc_hist_read_uod.PERF_TRAY_VOLUME_FINAL 
  (
       SELECT substr(a.vendor_no,3,8),b.depot_corp_code,b.depot_code, SUM(a.PO_GOOD_RECEIPT_QTY) 
       FROM idssc_hist.MAN_TRAY_VOLUME a left join 
       idssc_hist.hist_depot_corp b on a.site_id=b.depot_corp_code
       GROUP BY substr(a.vendor_no,3,8),b.depot_corp_code, B.DEPOT_CODE);

  --MAPPING DEPOT TO THE HAULAGE DATA

v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.PERF_PRIMARY_RATES '; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.PERF_PRIMARY_RATES 
       (SELECT 
       B.BATCH_ID        ,
       B.INTERFACE_RUN_DATE_TIME               ,
       B.SUPPLIER_NUMBER   ,
       B.SUPPLIER_SITE              ,
       B.DEPOT_CODE2              ,
       B.TRANSPORT_UNIT      ,
       B.RATE_APPLICABLE_FROM       ,
       B.HAULIER_RATE             ,
       A.TRAY_VOLUME   ,
       B.SUPPLIER_RATE            ,
       B.BASE_FUEL_RATE        ,
       B.FUEL_SURCHARGE      ,
       B.USER_ID          ,
       B.DSTAMP          ,
       B.DIFFERENT_UNITS       ,
       B.RETENDERING_SUPPLIER_RATE            ,
       B.RETENDERING_HAULIER_RATE              ,
       B.RETENDERING_BASE_FUEL_RATE        ,
       B.RETENDERING_FUEL_SURCHARGE      ,
       B.PREVIOUS_BATCH_ID
       FROM idssc_hist_read_uod.PERF_TRAY_VOLUME_FINAL  A LEFT JOIN 
       idssc_hist.HIST_PRIMARY_RATES B 
       ON A.SUPPLIER_NUMBER = B.SUPPLIER_NUMBER
       AND A.DEPOT = B.DEPOT_CODE2);

--SELECTING THE LATEST HAULAGE DATA
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.PERF_HAULAGE_TEMP1 '; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.PERF_HAULAGE_TEMP1 
  SELECT DISTINCT SUPPLIER_NUMBER ,
                  DEPOT_CODE ,
                  TRANSPORT_UNIT ,
                  HAULIER_RATE ,
                  TRAY_VOLUME ,
                  RATE_APPLICABLE_FROM ,
                  RANK() OVER ( PARTITION BY SUPPLIER_NUMBER ORDER BY RATE_APPLICABLE_FROM DESC  ) 
    FROM idssc_hist_read_uod.PERF_PRIMARY_RATES;
       

DELETE idssc_hist_read_uod.PERF_HAULAGE_TEMP1 
WHERE RANKA > 1;


DELETE idssc_hist_read_uod.PERF_HAULAGE_TEMP1 
WHERE DEPOT_CODE IS NULL;


--HAULAGE RATE AT SUPPLIER TRANSPORT UNIT LEVEL
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.PERF_HAULAGE_SUPPLIER '; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.PERF_HAULAGE_SUPPLIER 
  ( SELECT SUPPLIER_NUMBER ,
           TRANSPORT_UNIT ,
           SUM(HAULIER_RATE * TRAY_VOLUME) / SUM(TRAY_VOLUME) 
    FROM idssc_hist_read_uod.PERF_HAULAGE_TEMP1  
      GROUP BY SUPPLIER_NUMBER,TRANSPORT_UNIT );
         
         
--HAULAGE RATE AT TRANSPORT LEVEL
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.PERF_HAULAGE_OVERALL '; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.PERF_HAULAGE_OVERALL  
  ( SELECT TRANSPORT_UNIT ,
           SUM(HAULIER_RATE * TRAY_VOLUME) / SUM(TRAY_VOLUME) 
    FROM idssc_hist_read_uod.PERF_HAULAGE_TEMP1  
      GROUP BY TRANSPORT_UNIT );
      
      commit;
         

--CALCULATING THE DOLLY AND PALLET RATE
execute immediate 'TRUNCATE TABLE idssc_hist_read_uod.PERF_HAULAGE_SUPP_TRANS '; 

INSERT INTO idssc_hist_read_uod.PERF_HAULAGE_SUPP_TRANS 
  ( SELECT DISTINCT SUPPLIER_ID ,
                    NULL ,
                    NULL 
    FROM idssc_hist_read_uod.PERF_HAULAGE_SUPPLIER   );
    

MERGE INTO idssc_hist_read_uod.PERF_HAULAGE_SUPP_TRANS  
USING (SELECT DISTINCT * FROM idssc_hist_read_uod.PERF_HAULAGE_SUPPLIER ) PERF_HAULAGE_SUPPLIER  
ON ( PERF_HAULAGE_SUPPLIER .SUPPLIER_ID = idssc_hist_read_uod.PERF_HAULAGE_SUPP_TRANS .SUPPLIER_ID
  AND PERF_HAULAGE_SUPPLIER .TRANSPORT_UNIT = 'DOLLY' )
WHEN MATCHED THEN UPDATE SET DOLLY_RATE = PERF_HAULAGE_SUPPLIER .HAULAGE_RATE;


MERGE INTO idssc_hist_read_uod.PERF_HAULAGE_SUPP_TRANS 
USING (SELECT * FROM idssc_hist_read_uod.PERF_HAULAGE_SUPPLIER ) PERF_HAULAGE_SUPPLIER  
ON ( PERF_HAULAGE_SUPPLIER .SUPPLIER_ID = idssc_hist_read_uod.PERF_HAULAGE_SUPP_TRANS .SUPPLIER_ID
  AND PERF_HAULAGE_SUPPLIER .TRANSPORT_UNIT = 'PALLET' )
WHEN MATCHED THEN UPDATE SET PALLET_RATE = PERF_HAULAGE_SUPPLIER .HAULAGE_RATE;
-------------------------------------------------

--TABLE FOR NUMBER OF TRAYS PER TRANSPORT UNIT
v_sql_cmd := ' TRUNCATE TABLE idssc_hist_read_uod.PERF_TRAYS_HAULIER '; EXECUTE IMMEDIATE V_SQL_CMD;
insert into idssc_hist_read_uod.PERF_TRAYS_HAULIER        Values('HALF_TRAY_5',               52           );
insert into idssc_hist_read_uod.PERF_TRAYS_HAULIER        Values('HALF_TRAY_7',               36           );
insert into idssc_hist_read_uod.PERF_TRAYS_HAULIER        Values('HALF_TRAY_2',               88           );
insert into idssc_hist_read_uod.PERF_TRAYS_HAULIER        Values('METRIC_TRAY_2',          44           );
insert into idssc_hist_read_uod.PERF_TRAYS_HAULIER        Values('METRIC_TRAY_5',          26           );
insert into idssc_hist_read_uod.PERF_TRAYS_HAULIER        Values('METRIC_TRAY_7',          18           );
insert into idssc_hist_read_uod.PERF_TRAYS_HAULIER        Values('BROWN_TRAY',              18           );


v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.PERF_PROD_DESCR_all'; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.PERF_PROD_DESCR_all
  ( SELECT A.* ,
           B.VENDOR ,
           C.DOLLY_RATE ,
           C.PALLET_RATE ,
           NULL ,
           D.TRAY_PER_HAULIER ,
          NULL,
                 NULL,
                 NULL
    FROM idssc_hist_read_uod.PERF_prod_descr A
           LEFT JOIN idssc_hist_read_uod.PERF_vendor B
            ON A.UPC = B.upc
           LEFT JOIN idssc_hist_read_uod.PERF_HAULAGE_SUPP_TRANS C
            ON B.VENDOR = C.SUPPLIER_ID
           LEFT JOIN idssc_hist_read_uod.PERF_TRAYS_HAULIER D
            ON A.TRAY_TYPE = D.TRAY_TYPE );


MERGE INTO idssc_hist_read_uod.PERF_PROD_DESCR_all 
USING (SELECT * FROM idssc_hist_read_uod.PERF_HAULAGE_OVERALL) PERF_HAULAGE_OVERALL 
ON ( PERF_HAULAGE_OVERALL.TRANSPORT_UNIT = 'DOLLY')
WHEN MATCHED THEN UPDATE SET DOLLY_RATE = PERF_HAULAGE_OVERALL.HAULAGE_RATE
WHERE idssc_hist_read_uod.PERF_PROD_DESCR_all.DOLLY_RATE IS NULL;


MERGE INTO idssc_hist_read_uod.PERF_PROD_DESCR_all 
USING (SELECT * FROM idssc_hist_read_uod.PERF_HAULAGE_OVERALL) PERF_HAULAGE_OVERALL 
ON ( PERF_HAULAGE_OVERALL.TRANSPORT_UNIT = 'PALLET')
  WHEN MATCHED THEN UPDATE SET PALLET_RATE = PERF_HAULAGE_OVERALL.HAULAGE_RATE 
  WHERE  idssc_hist_read_uod.PERF_PROD_DESCR_all.PALLET_RATE IS NULL;



UPDATE idssc_hist_read_uod.PERF_PROD_DESCR_all
   SET HAULIER_RATE = DOLLY_RATE
   WHERE TRAY_TYPE <> 'CARDBOARD';

UPDATE idssc_hist_read_uod.PERF_PROD_DESCR_all
   SET HAULIER_RATE = PALLET_RATE
   WHERE TRAY_TYPE = 'CARDBOARD';


   UPDATE idssc_hist_read_uod.PERF_PROD_DESCR_all
   SET TRAYS_PER_HAULIER = FLOOR((FLOOR((v_pallet_width * v_pallet_depth) / (WIDTH * DEPTH)) * FLOOR(v_pallet_height / HEIGHT)) / UPT)
   WHERE TRAY_TYPE = 'CARDBOARD'; 
  

   --CALCULATING THE FINAL SUPPLIER SPECIFIC TRANSPORT COST FOR ALL UPC BASED ON UPT AND TRAY TYPE

UPDATE idssc_hist_read_uod.PERF_PROD_DESCR_all
   SET RATE_PER_TRAY = HAULIER_RATE / TRAYS_PER_HAULIER;
   
   
   INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('prod desc','rate per tray done',SYSTIMESTAMP);
COMMIT;
   
   --CALCULATING THE TRANSPORT COST CORRESPONDING TO THE CURRENT UPT-TRAY FOR A UPC
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.PERF_CURR_trans'; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.PERF_CURR_trans
  ( SELECT UPC ,
           RATE_PER_TRAY 
    FROM idssc_hist_read_uod.PERF_PROD_DESCR_all
     WHERE TRAY_TYPE = CURRENT_TRAY_TYPE
             AND UPT = CURRENT_UPT );


MERGE INTO idssc_hist_read_uod.PERF_PROD_DESCR_all 
USING (SELECT * FROM idssc_hist_read_uod.PERF_CURR_trans) PERF_CURR_trans 
ON ( idssc_hist_read_uod.PERF_PROD_DESCR_all.UPC = PERF_CURR_trans.UPC )
WHEN MATCHED THEN UPDATE SET TRANS = PERF_CURR_trans.COST;

--CALCULATING THE TRAY HIRE COST CORRESPONDING TO THE CURRENT UPT-TRAY FOR A UPC
v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.PERF_CURR_HIRE'; EXECUTE IMMEDIATE V_SQL_CMD;

INSERT INTO idssc_hist_read_uod.PERF_CURR_HIRE
  ( SELECT UPC ,
           TRAY_HIRE 
    FROM idssc_hist_read_uod.PERF_PROD_DESCR_all 
     WHERE TRAY_TYPE = CURRENT_TRAY_TYPE
             AND UPT = CURRENT_UPT );


MERGE INTO idssc_hist_read_uod.PERF_PROD_DESCR_all
USING (SELECT * FROM idssc_hist_read_uod.PERF_CURR_HIRE) PERF_CURR_HIRE 
ON ( idssc_hist_read_uod.PERF_PROD_DESCR_all.UPC = PERF_CURR_HIRE.UPC )
WHEN MATCHED THEN UPDATE SET HIRE = PERF_CURR_HIRE.COST;

--CALCULATING THE EX WORKS COST FOR A UPC

UPDATE idssc_hist_read_uod.PERF_PROD_DESCR_all
   SET EX_WORKS = CP - (TRANS / CURRENT_UPT) - (HIRE / CURRENT_UPT);
         
--CALCULATION OF COST FOR ALL UPT-TRAY COMBINATION FOR A UPC

UPDATE idssc_hist_read_uod.PERF_PROD_DESCR_all
   SET PRODUCT_COST = (RATE_PER_TRAY / UPT) + (TRAY_HIRE / UPT) + EX_WORKS;


   v_sql_cmd := 'TRUNCATE TABLE idssc_hist_read_uod.PERF_prod_descr_LATEST'; EXECUTE IMMEDIATE V_SQL_CMD;
  
  INSERT INTO idssc_hist_read_uod.PERF_prod_descr_LATEST
  ( SELECT 
    UPC       ,
       UPT    ,
       tray_type     ,
       SP     ,
       CP     ,
       Current_UPT   ,
       Rate_per_tray ,
       Tray_hire     ,
       Depot_RHD     ,
       Store_rec     ,
       Store_handling       ,
       Tray_lending  ,
       ex_works      ,
       'NA' ,
        1     ,
       current_tray_type    ,
       product_cost 

    FROM idssc_hist_read_uod.PERF_PROD_DESCR_all);

	  INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('prod desc','prod desc done',SYSTIMESTAMP);
COMMIT; 
     
     
 

---------------TRANSFORMATION----------------------



 --ranking the extract date for selecting latest data
     EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_TI_MODEL_1';
       INSERT INTO idssc_hist_read_uod.PERF_TI_MODEL_1
         ( SELECT /*+PARALLEL(6)*/ CAST(A.PRODUCT_ID AS INT),
                        A.LOCATION_ID,
                        TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR'),
                        A.MODEL_ID,
                        TO_DATE(A.ON_RANGE_DT,'DD-MON-RRRR'),
                        TO_DATE(A.OFF_RANGE_DT,'DD-MON-RRRR'),
                        RANK() OVER ( PARTITION BY CAST(A.PRODUCT_ID AS INT), A.LOCATION_ID ORDER BY TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR') DESC  ) 
              FROM idssc_hist.HIST_INVENTORY_MODELS  A WHERE CAST(A.PRODUCT_ID AS INT) IN (SELECT DISTINCT UPC from idssc_hist_read_uod.PERF_reco_comparison));
			  


  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.perf_TI_MODEL';
       INSERT INTO idssc_hist_read_uod.PERF_TI_MODEL
         ( SELECT A.* ,
                        NULL ,
                        NULL ,
                        NULL ,NULL
              FROM idssc_hist_read_uod.PERF_TI_MODEL_1 A WHERE A.RANK_DT=1 );
              
     UPDATE idssc_hist_read_uod.perf_TI_MODEL
       SET MODEL = SUBSTR(MODEL_ID, 1, 3); 

       UPDATE idssc_hist_read_uod.perf_TI_MODEL
          SET DAY_FULL = (CASE
                                                                                    WHEN MODEL= 'COM' THEN CAST(SUBSTR(MODEL_ID, 7, 1) AS NUMBER(18))
                                                                                    WHEN MODEL= 'DOS' THEN CAST(SUBSTR(MODEL_ID, 4, 1) AS NUMBER(18))
                                                                                    WHEN MODEL= 'WOS' THEN CAST(FLOOR((CAST(SUBSTR(MODEL_ID, 4, 8) AS FLOAT(53))) * 7) AS NUMBER(18))
                 ELSE 0
                       END); 
       UPDATE idssc_hist_read_uod.perf_TI_MODEL
          SET DAY_PART = (CASE
                                                                                    WHEN MODEL= 'COM' THEN CAST(SUBSTR(MODEL_ID, 8, 2) AS FLOAT(53)) / 100
                                                                                    WHEN MODEL= 'DOS' THEN CAST(SUBSTR(MODEL_ID, 5, 2) AS FLOAT(53)) / 100
                                                                                    WHEN MODEL= 'WOS' THEN (CAST(SUBSTR(MODEL_ID, 4, 8) AS FLOAT(53)) * 7) - DAY_FULL
                 ELSE 0
                       END); 
       UPDATE idssc_hist_read_uod.perf_TI_MODEL
          SET MULT = (CASE 
                                                                             WHEN MODEL= 'COM' THEN CAST(SUBSTR(MODEL_ID, 4, 3) AS FLOAT(53)) / 100
                                                                             WHEN MODEL= 'MUL' THEN CAST(SUBSTR(MODEL_ID, 5, 3) AS FLOAT(53)) / 100
                 ELSE 0
                       END); 

       UPDATE idssc_hist_read_uod.perf_TI_MODEL
       SET MODEL = 'DOS'
       WHERE MODEL = 'WOS';          
              
              
              
              
              
                                                 
INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('ti model','done',SYSTIMESTAMP);
COMMIT;
			  
			  
--ranking the extract date for selecting latest data
              EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.perf_dow_1'; 
       INSERT INTO idssc_hist_read_uod.perf_dow_1
         ( SELECT /*+PARALLEL(6)*/ CAST(A.PRODUCT_ID AS INT) ,
                        A.STG_ID,
                        TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR'),
                        A.DOW_SUN,
                        A.DOW_MON,
                        A.DOW_TUE,
                        A.DOW_WED,
                        A.DOW_THU,
                        A.DOW_FRI,
                        A.DOW_SAT,
                        RANK() OVER ( PARTITION BY CAST(A.PRODUCT_ID AS INT), A.STG_ID ORDER BY TO_DATE(A.EXTRACT_DATE,'DD-MON-RRRR') DESC  ) 
              FROM idssc_hist.HIST_DOW_PROFILES   A 
			  WHERE CAST(A.PRODUCT_ID AS INT) IN (SELECT DISTINCT UPC from idssc_hist_read_uod.PERF_reco_comparison) );
			 
			  
 EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.perf_DOW'; 
      INSERT INTO idssc_hist_read_uod.perf_DOW
         ( SELECT UPC ,
                        STG ,
                        1   ,
                        SUN   
FROM idssc_hist_read_uod.perf_dow_1 WHERE RANK_DT=1  
              UNION 
              SELECT UPC ,
                        STG ,
                        2   ,
                        MON   
       FROM idssc_hist_read_uod.perf_dow_1 WHERE RANK_DT=1 
              UNION ALL 
              SELECT UPC ,
                        STG ,
                        3   ,
                        TUE   
       FROM idssc_hist_read_uod.perf_dow_1 WHERE RANK_DT=1 
              UNION ALL 
              SELECT UPC ,
                        STG ,
                        4   ,
                        WED   
              FROM idssc_hist_read_uod.perf_dow_1 WHERE RANK_DT=1
              UNION ALL 
              SELECT UPC ,
                        STG ,
                        5   ,
                        THU   
       FROM idssc_hist_read_uod.perf_dow_1 WHERE RANK_DT=1
              UNION ALL 
              SELECT UPC ,
                        STG ,
                        6   ,
                        FRI   
       FROM idssc_hist_read_uod.perf_dow_1 WHERE RANK_DT=1
              UNION ALL 
              SELECT UPC ,
                        STG ,
                        7   ,
                        SAT   
              FROM idssc_hist_read_uod.perf_dow_1 WHERE RANK_DT=1);

	INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('dow','done',SYSTIMESTAMP);
COMMIT;

			  
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_life_max';
INSERT into idssc_hist_read_uod.PERF_life_max
      (select /*+PARALLEL(6)*/ CAST(UPC AS INT), 
      TO_DATE(week_begin_date,'DD-MON-RRRR'),
      max(day_0_life) ,
      max(day_1_life) ,
      max(day_2_life) ,
      max(day_3_life) ,
      max(day_4_life) ,
      max(day_5_life) ,
      max(day_6_life) ,
      ctry_code
      from idssc_hist.HIST_prod_life
	  WHERE CAST(upc AS INT) IN (SELECT DISTINCT UPC from idssc_hist_read_uod.PERF_reco_comparison)
      group by upc,TO_DATE(week_begin_date,'DD-MON-RRRR'),ctry_code);
	  
	  
	    EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.perf_life_latest'; 
         INSERT into idssc_hist_read_uod.perf_life_latest
                                (
                                select upc,
                                day_0_life,
                                day_1_life,
                                day_2_life,
                                day_3_life,
                                day_4_life,
                                day_5_life,
                                day_6_life,
                                ctry_code,
                                rank() over (partition by upc, ctry_code order by week_begin_date desc) 
                                from idssc_hist_read_uod.PERF_life_max); 


EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.perf_product_life_depot'; 
INSERT into idssc_hist_read_uod.perf_product_life_depot
                (select
                a.upc,
                b.depot_code,
                a.life1,
                a.life2,
                a.life3,
                a.life4,
                a.life5,
                a.life6,
                a.life7 
                from idssc_hist_read_uod.PERF_life_latest a left join idssc_hist.hist_depot_corp b on a.country=b.served_country where a.rank_dt=1 and b.served_country <> 'ALL');



  V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.PERF_PRODUCTLIFE'; EXECUTE IMMEDIATE V_SQL_CMD;
              INSERT INTO idssc_hist_read_uod.PERF_PRODUCTLIFE
                  ( SELECT upc ,
                                                   depot ,
                                                   1 ,
                                                   LIFE_SUN + 1 
                                FROM idssc_hist_read_uod.PERF_product_life_depot 
                                UNION ALL
                                SELECT upc ,
                                                   depot  ,
                                                   2 ,
                                                   LIFE_MON + 1 
                                FROM idssc_hist_read_uod.PERF_product_life_depot 
                                UNION ALL 
                                SELECT upc ,
                                                   depot  ,
                                                  3 ,
                                                   LIFE_TUE + 1 
                                FROM idssc_hist_read_uod.PERF_product_life_depot 
                                UNION ALL 
                                SELECT upc ,
                                                   depot ,
                                                   4 ,
                                                   LIFE_WED + 1 
                                FROM idssc_hist_read_uod.PERF_product_life_depot 
                                UNION ALL 
                                SELECT upc ,
                                                   depot ,
                                                   5 ,
                                                   LIFE_THU + 1 
                                FROM idssc_hist_read_uod.PERF_product_life_depot 
                                UNION ALL 
                                SELECT upc ,
                                                   depot ,
                                                   6 ,
                                                   LIFE_FRI + 1 
                                FROM idssc_hist_read_uod.PERF_product_life_depot
                                UNION ALL 
                                SELECT upc ,
                                                   depot ,
                                                   7 ,
                                                   LIFE_SAT + 1 
                                FROM idssc_hist_read_uod.PERF_product_life_depot  );



			INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('life','done',SYSTIMESTAMP);
COMMIT;


-------TRANSFORMATION OF STORE SCHEDULE DATA

       --INSERTING LOCATION SCHEDULE RAW DATA WITH LOCATION ID SUBSTRINGED TO REQUIRED FORMAT--
       EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_1'; 
       INSERT INTO idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_1
         ( SELECT CAST(A.SITE AS INT),
                        TO_DATE(A.OPENING_DATE,'DD-MON-RRRR') ,
                        A.DELIVERYSTATUS_SUN ,
                        A.DELIVERYSTATUS_MON ,
                        A.DELIVERYSTATUS_TUE ,
                        A.DELIVERYSTATUS_WED ,
                        A.DELIVERYSTATUS_THU ,
                        A.DELIVERYSTATUS_FRI ,
                        A.DELIVERYSTATUS_SAT ,
                        TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR'),
                         RANK() OVER ( PARTITION BY CAST(A.SITE AS INT), TO_DATE(A.OPENING_DATE,'DD-MON-RRRR') 
                         ORDER BY TO_DATE(SUBSTR(A.INTERFACE_RUN_DATE_TIME,1,9),'DD-MON-RRRR') DESC  ) 
              FROM idssc_hist.hist_SITE A WHERE length(A.SITE)=4 ); 


       --INSERTING STORE SCHEDULE RANKED ON BEGIN DATE--
       EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_2'; 
       INSERT INTO idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_2
         SELECT STORECODE ,
                     BEGIN_DATE ,
                     SUN ,
                     MON ,
                     TUE ,
                     WED ,
                     THU ,
                     FRI ,
                     SAT ,
                     RANK() OVER ( PARTITION BY STORECODE ORDER BY BEGIN_DATE ASC  ) 
              FROM idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_1 WHERE RANK_DT=1 ;

       --CALCULATING END DATE BY JOINING ON DATE RANK WITH PREVIOUS TEMPORARY TABLE--
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3'; 
       INSERT INTO idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3
         ( SELECT A.* ,
                        B.BEGIN_DATE 
              FROM idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_2 A
                        LEFT JOIN idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_2 B
                           ON A.STORECODE = B.STORECODE
                        AND A.DATE_RANK = (B.DATE_RANK - 1) );

       --SETTING END DATE AS DEFAULT VALUE FOR NULL RECORDS--
       UPDATE idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3
          SET END_DATE = V_END_DATE
          WHERE END_DATE IS NULL;
          
       UPDATE idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3
          SET END_DATE = END_DATE - 1;


       --TRANSPOSING STORE SCHEDULE FROM UPC-STORE TO UPC-STORE-DAY LEVEL--
        EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_STORE_SCHEDULE_FINAL'; 
       INSERT INTO idssc_hist_read_uod.PERF_STORE_SCHEDULE_FINAL
         ( SELECT STORECODE ,
                        BEGIN_DATE ,
                        SUN ,
                        1 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3 
              UNION 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        MON ,
                        2 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        TUE ,
                        3 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        WED ,
                        4 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        THU ,
                        5 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        FRI ,
                        6 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3 
              UNION ALL 
              SELECT STORECODE ,
                        BEGIN_DATE ,
                        SAT ,
                        7 ,
                        DATE_RANK ,
                        END_DATE 
              FROM idssc_hist_read_uod.PERF_LOCATION_SCHEDULE_3  );
       
                   UPDATE idssc_hist_read_uod.PERF_STORE_SCHEDULE_FINAL
          SET DAY_SCHEDULE = 1
          WHERE DAY_SCHEDULE>0;
            
		
			INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('store sched','done',SYSTIMESTAMP);
COMMIT;

--selecting latest store excess flag for a category-store

 EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_xs_final'; 
  INSERT into idssc_hist_read_uod.PERF_xs_final
  (select category_code,
    site_code,
    xs_flag,
    rank() over (partition by category_code,site_code order by TO_DATE(start_date,'DD-MON-RRRR') desc)
    from idssc_hist.HIST_Store_xs);
      
      
   EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_store_excess';
  INSERT into idssc_hist_read_uod.PERF_store_excess
  (select category_code,
          site_code,
          xs_flag
          from idssc_hist_read_uod.uod_xs_final where rank_dt=1);  
      	 
   
			INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('excess flag','done',SYSTIMESTAMP);
COMMIT;      
          
                          
execute immediate 'truncate table idssc_hist_read_uod.perf_nde_rank';
insert into idssc_hist_read_uod.perf_nde_rank(
select /*+PARALLEL(6)*/ product_id,
location_id,
TO_DATE(week_begin_dt,'DD-MON-RRRR'),
total_uplift,
rank() over (partition by product_id,location_id,TO_DATE(week_begin_dt,'DD-MON-RRRR') 
order by TO_DATE(extract_date,'DD-MON-RRRR') desc, TO_DATE(SUBSTR(interface_run_date_time,1,9),'DD-MON-RRRR') desc)
from idssc_hist.HIST_non_demand_events where  CAST(product_id AS INT) IN (SELECT DISTINCT UPC from idssc_hist_read_uod.PERF_reco_comparison)
and TO_DATE(week_begin_dt,'DD-MON-RRRR') between v_start_date and v_end_date); 

                
execute immediate 'truncate table idssc_hist_read_uod.perf_nde_1';             
  insert into idssc_hist_read_uod.perf_nde
   (select product_id,
   location_id,
   uplift_dt,
   total_uplift
   from idssc_hist_read_uod.perf_nde_rank where rank_dt=1);
   
  
			INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('nde','done',SYSTIMESTAMP);
COMMIT;



			INSERT INTO idssc_hist_read_uod.PERF_QC_INTER_TABLES
VALUES('transformation','proc transformation done',SYSTIMESTAMP);
COMMIT;

end;




create or replace
PROCEDURE  idssc_hist_read_uod.perf_APPEND_WEEKLY
(
 v_date in date
)
AS 

BEGIN
INSERT INTO idssc_hist_read_uod.perf_DAILY_DEMAND
  ( SELECT /*+PARALLEL(4)*/ A.UPC ,
           a.STOREcode ,
           A.DEPOT , 
           a.demand  ,
          a.fdate,
          null,
       a.MODEL_CODE ,
       a.c1 ,
       a.c2 ,
       a.c3 ,
       a.SP ,
       a.CP ,
       a.MARGIN ,
       a.WASTE_PCT ,
       a.WASTE_CONSTRAINT ,
       a.LAUNCH_DATE ,
       a.excess_flag ,
       a.LIFE ,
       B.DAY_SCHEDULE ,
       C.RCPT ,
       D.RCPT, NULL
   FROM idssc_hist_read_uod.perf_daily_demand_raw A
   LEFT JOIN idssc_hist_read_uod.perf_TEMP1 B
       ON A.storecode = cast(B.STORECODE as int)
       AND to_char(a.fdate+1,'D') = B.DAY_NUM
   LEFT JOIN idssc_hist_read_uod.perf_TEMP2 C
       ON A.UPC = C.PRODUCT_ID
       AND A.DEPOT = SUBSTR(C.SINK_ID, 8, 5)
       AND to_char(a.fdate+1,'D') = C.DAY_NUM
   LEFT JOIN idssc_hist_read_uod.perf_TEMP3 D
       ON A.UPC = D.PRODUCT_ID
       AND A.storecode = CAST(SUBSTR(D.SINK_ID, 2, 8) AS int)
       AND to_char(a.fdate+1,'D') = D.DAY_NUM  
       where a.fdate=v_date);
       COMMIT;
       COMMIT WORK;
END;




create or replace
PROCEDURE idssc_hist_read_uod.perf_APPEND_TRANSFORM
(
	V_start_date in date,
	v_end_date in date
) 
AS
   
   V_DATEF DATE;
   V_SQL_CMD VARCHAR2(10000);
 
BEGIN
   v_datef := v_start_date ;
   
   WHILE v_datef <= v_end_date+41
   LOOP 
      
      BEGIN
         EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP1 ';
         INSERT INTO idssc_hist_read_uod.perf_TEMP1
           ( SELECT * 
             FROM idssc_hist_read_uod.perf_STORE_SCHEDULE_FINAL 
              WHERE BEGIN_DATE <= v_datef
                      AND END_DATE > V_DATEF );
		
         EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP2 ';
         INSERT INTO idssc_hist_read_uod.perf_TEMP2
           ( SELECT * 
             FROM idssc_hist_read_uod.perf_NTW_SCHD_FINAL 
              WHERE EFFECTIVE_BEGIN_DT <= V_DATEF
                      AND END_DATE > V_DATEF
                      AND SINK_ID LIKE 'M%' );
         EXECUTE IMMEDIATE ' TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP3 ';
         INSERT INTO idssc_hist_read_uod.perf_TEMP3
           ( SELECT * 
             FROM idssc_hist_read_uod.perf_NTW_SCHD_FINAL 
              WHERE EFFECTIVE_BEGIN_DT <= V_DATEF
                      AND END_DATE > V_DATEF
                      AND SINK_ID LIKE 'S%' );
           begin           
         idssc_hist_read_uod.perf_APPEND_WEEKLY(V_datef);
         end;
         V_SQL_CMD := 'INSERT INTO idssc_hist_read_uod.perf_qc_INTER_TABLES
         VALUES(''DAILY DEMAND'',''Date- ' || v_datef || ' DONE'',SYSTIMESTAMP)'; EXECUTE IMMEDIATE V_SQL_CMD;
       
            V_datef := V_datef + 1 ;
        
      END;
   END LOOP;
END;




create or replace
FUNCTION idssc_hist_read_uod.PERF_TARGET_INVEN_CAL
(
  V_STORECODE IN float,
  V_UPC IN float,
  V_DATE IN date,
  V_MODEL IN float,
  V_MODEL1 IN float
)
RETURN FLOAT
AS
   -- EXTRA DAYS OF COVER IS GENERALLY AN FRACTION , EG 3.5, RET STORES EXTRA DAYS OF COVER FOR ITS INTEGRAL PART
   --RET1 STORES COVER FOR DECIMAL PART
   V_RET FLOAT(53);
   V_RET1 FLOAT(53);

BEGIN
  SELECT SUM(DEMAND) into V_RET
     FROM idssc_hist_read_uod.PERF_DAILY_DEMAND P
    WHERE P.UPC = V_UPC
            AND P.STORECODE = V_STORECODE
            AND FDATE BETWEEN V_DATE AND V_DATE - 1 + V_MODEL;
   
   IF V_MODEL1 <> 0 THEN
   
   BEGIN
      SELECT trunc(SUM(DEMAND) * V_MODEL1,2) into V_RET1
        FROM idssc_hist_read_uod.PERF_DAILY_DEMAND P
       WHERE P.UPC = v_upc
               AND P.STORECODE = V_STORECODE
               AND FDATE = V_DATE+ V_MODEL;
   END;
   END IF;
   V_RET := COALESCE(V_RET, 0) + COALESCE(V_RET1, 0) ;
   RETURN V_RET;
END;




create or replace
FUNCTION idssc_hist_read_uod.perf_DEMAND_SHELF_LIFE_CAL (
  V_STORECODE IN float,
  V_UPC IN float,
  V_DATE IN date,
  V_LIFE IN number
)
RETURN FLOAT
AS
   V_RET FLOAT(53);

BEGIN
  SELECT SUM(DEMAND) into V_RET
     FROM idssc_hist_read_uod.PERF_DAILY_DEMAND P
    WHERE P.UPC = V_UPC
            AND P.STORECODE = V_STORECODE
            AND FDATE BETWEEN V_DATE AND V_DATE + V_LIFE - 1;
   IF ( V_RET IS NULL ) THEN
      V_RET := 0 ;
   END IF;
   RETURN V_RET;
END;




create or replace
FUNCTION IDSSC_HIST_READ_UOD.PERF_ORDERS_CAL
(
  IV_ON_HAND IN number,
  V_DEMAND IN float,
  V_MARGIN IN float,
  V_UPT IN number,
  V_DATE IN DATE,
  V_CP IN float,
  V_SP IN float,
  V_LAUNCH_DATE IN date,
  IV_WC IN float,
  V_DEMAND_L IN float,
  V_TARGET_INVENTORY IN float,
  V_EXCESS IN varchar2
)
RETURN NUMBER
AS
   V_ON_HAND FLOAT(53) := IV_ON_HAND;
   V_WC FLOAT(53) := IV_WC;
   V_EXTRA FLOAT(53);
   V_FLAG NUMBER(10,0);
   V_N3 NUMBER(10,0);
   V_N1 NUMBER(10,0);
   V_N2 NUMBER(10,0);
   V_WASTE FLOAT(53);
   V_PROFIT FLOAT(53);
   V_DAYS FLOAT;

BEGIN
-- ORDERING TO PREVENT LOST SALES
-- ORDER TRAYS IF ON_HAND < DEMAND < TARGET INVENTORY TO PREVENT LOST SALES. 
   IF V_DEMAND > V_ON_HAND
     AND V_ON_HAND < (V_TARGET_INVENTORY-0.01)
     AND V_DEMAND <= (V_TARGET_INVENTORY-0.01) THEN
   
   BEGIN
      V_N1 := FLOOR((V_DEMAND - V_ON_HAND) / V_UPT) ;
      V_ON_HAND := V_ON_HAND + (V_N1 * V_UPT) ;
   END;
   END IF;
-- ORDER TRAYS IF ON_HAND < TARGET INVENTORY < DEMAND TILL YOU REACH TARGET INVENTORY, NOT EXCEEDING IT COVERING PART OF LOST SALES
   IF V_DEMAND > V_ON_HAND
     AND V_ON_HAND < V_TARGET_INVENTORY
     AND V_DEMAND > V_TARGET_INVENTORY THEN
   
   BEGIN
      V_N1 := FLOOR((V_TARGET_INVENTORY - V_ON_HAND) / V_UPT) ;
      V_ON_HAND := V_ON_HAND + (V_N1 * V_UPT) ;
   END;
   END IF;
-- V_N1 INDICATES ANY TRAYS ORDERED IN ABOVE SCENARIOS TO COVER LOST SALES PARTIALLY
   IF ( V_N1 IS NULL ) THEN
   
   BEGIN
      V_N1 := 0 ;
   END;
   END IF;
   
 -- EITHER YOUR DEMAND IS FULFILLED OR YOU HAVE EXCEEDED TARGET INVENTORY STOP ORDERING FOR LOST SALES 
 -- WE WILL ORDER TRAYS IF THEY ARE PROFITABLE OR EXCEEDING TARGET INVENTORY IS ALLOWED 
   IF V_TARGET_INVENTORY <= V_ON_HAND
     OR V_DEMAND <= V_ON_HAND THEN
   
   BEGIN
      V_N2 := 0 ;
   END;
   ELSE
  -- ORDER 1 EXTRA TRAY IF ITS PROFITABLE / CAN BE SOLD OVER ITS SHELF LIFE ( DUE TO V_N1 WE CAN BE AT MOST 1 TRAY AWAY TO PREVENT ALL LOST SALES) 
   BEGIN
      V_EXTRA := V_DEMAND_L - V_ON_HAND ;
      IF V_EXTRA >= V_UPT THEN
   -- ORDER 1 TRAY IF IT CAN BE SOLD COMPLETELY , I.E. NO WASTAGE   
      BEGIN
         V_N2 := 1 ;
      END;
      ELSE
   --CALCULATE WASTED UNITS IF WE SEND EXTRA TRAY AND CALCULATE PROFITABILITY OF THE TRAY  
      BEGIN
         V_WASTE := V_UPT - V_EXTRA ;
         V_PROFIT := V_EXTRA * V_MARGIN * V_SP - V_WASTE * V_CP ;
         IF V_PROFIT > 0 THEN
    --IF TRAY IS PROFITABLE SEND IT ELSE CHECK IF UPC IS NEWLY LAUNCHED   
         BEGIN
            V_N2 := 1 ;
         END;
         ELSE
         
         BEGIN
            IF V_LAUNCH_DATE IS NOT NULL THEN
        -- IF UPC IS NEWLY LAUNCHED SEND 1 TRAY  ELSE CHECK IF IT IS NOT BREACHING WASTE CONSTRAINT  
            BEGIN
               V_DAYS := V_DATE - V_LAUNCH_DATE ;
               IF V_DAYS <= 21 THEN
               
               BEGIN
                  V_N2 := 1 ;
               END;
               ELSE
               
               BEGIN
                  IF V_WC IS NULL THEN
                  
                  BEGIN
                     V_WC := 0 ;-- DEFAULT WASTE CONSTRAINT
                  END;
                  END IF;
                  IF V_WASTE <= V_WC * V_UPT THEN
                  --SENDING ONE TRAY IF WASTE CONSTRAINT IS NOT BREACHED
                  BEGIN
                     V_N2 := 1 ;
                  END;
                  ELSE
                 
                  BEGIN
                     V_N2 := 0 ;
                  END;
                  END IF;
               END;
               END IF;
            END;
            ELSE
            
            BEGIN
               IF V_WC IS NULL THEN
               
               BEGIN
                  V_WC := 0 ;
               END;
               END IF;
               IF V_WASTE <= V_WC * V_UPT THEN
               
               BEGIN
                  V_N2 := 1 ;
               END;
               ELSE
               
               BEGIN
                  V_N2 := 0 ;
               END;
               END IF;
            END;
            END IF;
         END;
         END IF;
      END;
      END IF;
   END;
   END IF;
   
   --AT THIS POINT WE HAVE ORDERED TO PREVENT LOST SALES IF TRAYS ARE PROFITABLE
   IF ( V_N2 IS NULL ) THEN
   
   BEGIN
      V_N2 := 0 ;
   END;
   END IF;
   --UPDATED ON HAND STOCK INCLUDING ORDERS TO PREVENT LOST SALES
   V_ON_HAND := V_ON_HAND + (V_N2 * V_UPT) ;
   
   --ORDERING TO ENSURE TARGET INVENTORY IF WE HAVE NOT EXCEEDED TARGET INVENTORY YET
   IF V_TARGET_INVENTORY > V_ON_HAND THEN
   
   BEGIN
      V_N3 := FLOOR((V_TARGET_INVENTORY - V_ON_HAND) / V_UPT) ;
      V_ON_HAND := V_ON_HAND + (V_N3 * V_UPT) ;
                  -- EXCEEDING TARGET INVENTORY BY 1 TRAY IF IT IS ALLOWED, EXCESS FLAG SET TO 'Y' AND IT CAN BE SOLD OVER ITS SHELF LIFE
      IF V_EXCESS = 'Y'
        AND V_TARGET_INVENTORY > V_ON_HAND THEN
      
      BEGIN
         IF V_DEMAND_L - V_ON_HAND >= V_UPT THEN
         
         BEGIN
            V_FLAG := 1 ;
         END;
         ELSE
         
         BEGIN
            V_FLAG := 0 ;
         END;
         END IF;
      END;
      ELSE
      
      BEGIN
         V_FLAG := 0 ;
      END;
      END IF;
   END;
   ELSE
   
   BEGIN
      V_N3 := 0 ;
      V_FLAG := 0 ;
   END;
   END IF;
   -- RETURNING TOTAL TRAYS TO BE ORDERED
   V_FLAG := V_FLAG + V_N3 + V_N2 + V_N1 ;
   RETURN V_FLAG;
END;




create or replace
FUNCTION idssc_hist_read_uod.PERF_EOD_CAL
(
  v_upc IN float,
  v_storecode IN float,
  v_fdate IN date,
  v_upt IN number,
  v_life IN number
)
RETURN FLOAT
AS
   v_waste FLOAT;
   V_SQL_CMD VARCHAR2(10000);
   V_DATE DATE := V_FDATE - V_LIFE + 1;

BEGIN
	
   SELECT waste INTO V_WASTE
    FROM idssc_hist_read_uod.PERF_daily_store_orders
    WHERE fdate =   v_date
           AND upc = v_upc
           AND storecode = v_storecode
             AND upt = v_upt;
  
IF  v_waste IS NULL  THEN
  v_waste := 0 ;
   END IF;  
      
   RETURN v_waste;
END;





create or replace
PROCEDURE idssc_hist_read_uod.PERF_ORDER_PLAN_GENE_DAY1
(v_date date)
AS
V_SQL_CMD clob;
BEGIN
insert into idssc_hist_read_uod.PERF_qc_inter_tables
values('ORDER PLAN','STARTING',SYSTIMESTAMP);


--SUBSET DATA FOR A DAY AND CALCULATE TARGET INVENTORY
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_TEMP_TABLE_1';
INSERT INTO idssc_hist_read_uod.PERF_TEMP_TABLE_1
SELECT A.UPC,A.STORECODE,A.DEPOT,A.DEMAND,A.FDATE,'STG',A.MODEL_CODE,A.C1,A.C2,A.C3,A.SP,A.CP,A.MARGIN,
A.WASTE_PCT,A.WASTE_CONSTRAINT,A.LAUNCH_DATE,A.EXCESS_FLAG,A.LIFE,A.FLAG1,A.FLAG2, ((CASE MODEL_CODE
WHEN 'COM' THEN GREATEST( (C3*DEMAND) , (idssc_hist_read_uod.PERF_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2)))
WHEN 'MUL' THEN C3*DEMAND
WHEN 'DOS' THEN idssc_hist_read_uod.PERF_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2)
ELSE 0
END ) * COALESCE (1 + C.TOTAL_UPLIFT,1)) AS TARGET_INVENTORY ,
idssc_hist_read_uod.PERF_DEMAND_SHELF_LIFE_CAL( STORECODE,A.UPC,  FDATE,LIFE) AS DEMAND_L
FROM idssc_hist_read_uod.PERF_daily_demand A 
LEFT JOIN idssc_hist_read_uod.PERF_nde  C
ON A.UPC = C.PRODUCT_ID  AND A.STORECODE= SUBSTR (C.LOCATION_ID, 2, 8) AND A.FDATE = C.uplift_dt
WHERE A.FDATE = v_date; 

  
--CALCULATE ORDERS AND JOIN PREVIOUS DAY EOD STOCK FOR EACH UPC
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_ORDER_PLAN_temp';
insert into idssc_hist_read_uod.PERF_ORDER_PLAN_temp    
select Z.* , C.UPT , 0 as on_hand, 
CASE WHEN (COALESCE (FLAG1,1) + COALESCE (FLAG2,1)) = 2 
THEN idssc_hist_read_uod.perf_ORDERS_CAL ( 0 , DEMAND , MARGIN , C . UPT , fdate , CP , SP , 
LAUNCH_DATE , WASTE_CONSTRAINT , DEMAND_L , TARGET_INVENTORY , EXCESS_FLAG ) ELSE 0  END AS ORDERS, null as eod, Z.LIFE AS LIFE_W
FROM idssc_hist_read_uod.PERF_TEMP_TABLE_1 Z LEFT JOIN idssc_hist_read_uod.PERF_UPT_UPC C ON Z.UPC = C.UPC;



update  idssc_hist_read_uod.PERF_ORDER_PLAN_TEmp
set eod = (ORDERS*UPT)*(1-COALESCE(WASTE_PCT, 0)) - COALESCE(DEMAND,0);


update  idssc_hist_read_uod.PERF_ORDER_PLAN_TEMP
SET EOD = CASE WHEN EOD<0 THEN 0 ELSE EOD END;

 
 --CALCULATING SOLD UNITS, WASTE AND STORING IT IN MASTER TABLE   
INSERT INTO idssc_hist_read_uod.PERF_daily_store_orders
(SELECT  UPC, STORECODE,DEPOT, DEMAND, FDATE, DEMAND_L, ON_HAND, ORDERS, UPT,
CASE WHEN ORDERS = 0 THEN 0 ELSE (CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND_L) > 0 THEN ((ORDERS*UPT)+ON_HAND-DEMAND_L) ELSE 0 END) END AS WASTE, 1 AS WASTE_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN 0 ELSE 1 END AS AVAILABILITY_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN (ORDERS*UPT+ON_HAND) ELSE DEMAND END AS SOLD_UNITS, life_w,life FROM 
idssc_hist_read_uod.PERF_ORDER_PLAN_temp);


v_sql_cmd := 'insert into idssc_hist_read_uod.PERF_qc_inter_tables
values(''ORDER PLAN'','' ' || V_DATE || ' DONE!'',SYSTIMESTAMP)';
execute immediate v_sql_cmd;


END;




create or replace
PROCEDURE idssc_hist_read_uod.perf_ORDER_PLAN_GENE
(v_date date)
AS
V_SQL_CMD clob;
BEGIN

--SUBSET DATA FOR A DAY AND CALCULATE TARGET INVENTORY
EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_TEMP_TABLE_1';
INSERT INTO idssc_hist_read_uod.PERF_TEMP_TABLE_1
SELECT  A.UPC,A.STORECODE,A.DEPOT,A.DEMAND,A.FDATE,'STG',A.MODEL_CODE,A.C1,A.C2,A.C3,A.SP,A.CP,A.MARGIN,
A.WASTE_PCT,A.WASTE_CONSTRAINT,A.LAUNCH_DATE,A.EXCESS_FLAG,A.LIFE,A.FLAG1,A.FLAG2, ((CASE MODEL_CODE
WHEN 'COM' THEN GREATEST ( (C3*DEMAND) , (idssc_hist_read_uod.PERF_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2)))
WHEN 'MUL' THEN C3*DEMAND
WHEN 'DOS' THEN idssc_hist_read_uod.PERF_TARGET_INVEN_CAL(STORECODE, A.UPC, FDATE ,C1, C2)
ELSE 0
END ) * COALESCE (1 + C.TOTAL_UPLIFT,1)) AS TARGET_INVENTORY ,
idssc_hist_read_uod.PERF_DEMAND_SHELF_LIFE_CAL( STORECODE,A.UPC,  FDATE,LIFE) AS DEMAND_L
FROM idssc_hist_read_uod.PERF_daily_demand A 
LEFT JOIN idssc_hist_read_uod.PERF_nde  C
ON A.UPC = C.PRODUCT_ID  AND A.STORECODE= SUBSTR (C.LOCATION_ID, 2, 8) AND A.FDATE = C.uplift_dt
WHERE A.FDATE = v_date; 


  
--CALCULATE ORDERS AND JOIN PREVIOUS DAY EOD STOCK FOR EACH UPC


insert into idssc_hist_read_uod.PERF_ORDER_PLAN_TEMP     
select  Z.* , D.UPT , COALESCE(D.eod, 0) as on_hand, 
CASE WHEN (COALESCE (z.FLAG1,1) + COALESCE (z.FLAG2,1)) = 2 
THEN idssc_hist_read_uod.perf_ORDERS_CAL ( COALESCE ( D.eod , 0 ) , z.DEMAND , z.MARGIN , D.UPT , z.fdate , z.CP , z.SP , 
z.LAUNCH_DATE , z.WASTE_CONSTRAINT , z.DEMAND_L , z.TARGET_INVENTORY , z.EXCESS_FLAG ) ELSE 0  END AS ORDERS, null as eod, d.LIFE_w AS LIFE_W
FROM idssc_hist_read_uod.PERF_TEMP_TABLE_1 Z 
LEFT JOIN idssc_hist_read_uod.PERF_ORDER_PLAN_TEMP D ON Z.UPC = D.UPC AND Z.STORECODE = D.STORECODE AND Z.FDATE =  (1 + D.FDATE);


delete idssc_hist_read_uod.PERF_ORDER_PLAN_TEMP where fdate = V_DATE-1;

update idssc_hist_read_uod.PERF_ORDER_PLAN_TEMP
set eod = ((ON_HAND + (ORDERS * UPT)) * (1 - COALESCE(WASTE_PCT, 0)) - COALESCE(DEMAND,0)- COALESCE(idssc_hist_read_uod.perf_EOD_CAL(UPC,STORECODE,FDATE,UPT,LIFE_w),0));


update idssc_hist_read_uod.PERF_ORDER_PLAN_TEMP
set life_w = life where orders<>0;


update idssc_hist_read_uod.PERF_ORDER_PLAN_TEMP
set eod = case when eod<0 then 0 else eod end;


     
UPDATE  idssc_hist_read_uod.PERF_daily_store_orders
SET WASTE_FLAG=0 WHERE FDATE = v_date-life_w+1;


 
 --CALCULATING SOLD UNITS, WASTE AND STORING IT IN MASTER TABLE   
INSERT INTO idssc_hist_read_uod.PERF_daily_store_orders
(SELECT  UPC, STORECODE,DEPOT, DEMAND, FDATE, DEMAND_L, ON_HAND, ORDERS, UPT,
CASE WHEN ORDERS = 0 THEN 0 ELSE (CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND_L) > 0 THEN ((ORDERS*UPT)+ON_HAND-DEMAND_L) ELSE 0 END) END AS WASTE, 1 AS WASTE_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN 0 ELSE 1 END AS AVAILABILITY_FLAG,
CASE WHEN (ORDERS*UPT+ON_HAND-DEMAND) < 0 THEN (ORDERS*UPT+ON_HAND) ELSE DEMAND END AS SOLD_UNITS, life_w,life FROM 
idssc_hist_read_uod.PERF_ORDER_PLAN_TEMP);



v_sql_cmd := 'insert into idssc_hist_read_uod.PERF_qc_inter_tables
values(''ORDER PLAN'','' ' || V_DATE || ' DONE!'',SYSTIMESTAMP)';
execute immediate v_sql_cmd;

COMMIT;

END;




create or replace
PROCEDURE idssc_hist_read_uod.perf_ORDER_PLAN_Gene_ALL
( V_DATE_START IN DATE, V_DATE_END IN DATE)
AS
V_DATE DATE;
V_SQL_CMD VARCHAR2(10000);
BEGIN

V_DATE :=  V_DATE_START+1;
   WHILE V_DATE < V_DATE_END+1
   LOOP 
      
      BEGIN
         idssc_hist_read_uod.perf_ORDER_PLAN_GENE(V_DATE);
         V_DATE := 1+ V_DATE ;
      END;
   END LOOP;

end;




create or replace
PROCEDURE IDSSC_HIST_READ_UOD.PERF_PROC_ORDER_PLAN
(
   V_END_DATE IN DATE,
   V_START_DATE IN DATE
)
AS
V_SQL_CMD VARCHAR2(10000);
v_c1 int;
V_c2 int;
BEGIN


BEGIN
IDSSC_HIST_READ_UOD.PERF_date_create(V_START_DATE,V_END_DATE);
END;

-- CODE FOR UPT-UPC--

  EXECUTE IMMEDIATE 'TRUNCATE TABLE idssc_hist_read_uod.PERF_UPT_UPC';
INSERT INTO IDSSC_HIST_READ_UOD.PERF_UPT_UPC(
				SELECT UPC, OLD_UPT FROM idssc_hist_read_uod.PERF_reco_comparison);

INSERT INTO IDSSC_HIST_READ_UOD.PERF_UPT_UPC(
				SELECT UPC, NEW_UPT FROM idssc_hist_read_uod.PERF_reco_comparison);

   v_sql_cmd := 'truncate table idssc_hist_read_uod.PERF_CORRECTED_LATEST'; execute immediate v_sql_cmd;     
INSERT INTO IDSSC_HIST_READ_UOD.PERF_CORRECTED_LATEST(
SELECT CAST(UPC AS INT),
		CATEGORY_CODE,
		CORP_CODE,
		CORR_SALES_DATE,
		CORR_SALES_QTY,
		RANK() OVER(PARTITION BY CAST(UPC AS INT),CATEGORY_CODE,CORP_CODE,CORR_SALES_DATE ORDER BY INTERFACE_RUN_DATE_TIME DESC)
FROM IDSSC_HIST.HIST_CORRECTED_SALES where CORR_SALES_DATE between V_START_DATE AND V_END_DATE+41
and upc not like '%A' and upc not like '%C');

DELETE IDSSC_HIST_READ_UOD.PERF_CORRECTED_LATEST
WHERE RANK_CORR<>1;

DELETE IDSSC_HIST_READ_UOD.perf_CORRECTED_LATEST
WHERE upc not in (select distinct upc from idssc_hist_read_uod.perf_reco_comparison);


insert into idssc_hist_read_uod.PERF_qc_inter_tables
values('CORRECTED SALES','LATEST SELECTED',SYSTIMESTAMP);
COMMIT;




v_sql_cmd := 'truncate table idssc_hist_read_uod.PERF_ACTUAL_LATEST'; execute immediate v_sql_cmd;     
INSERT INTO IDSSC_HIST_READ_UOD.PERF_ACTUAL_LATEST(
SELECT cast(UPC as int),
		DEPARTMENT,
		RETAIL_STORE_ID,
		BUSINESS_DATE,
		ACTUAL_UNIT_PRICE,
		(case when (SALE_QTY +ABS(RETURN_QTY))>0 then (SALE_QTY - ABS(RETURN_QTY)) else 0 end)  as actual,
		RANK() OVER (PARTITION BY cast(upc as int), DEPARTMENT,RETAIL_STORE_ID,BUSINESS_DATE,ACTUAL_UNIT_PRICE ORDER BY INTERFACE_RUN_DATE_TIME desc)
FROM IDSSC_HIST.hist_agg_upc_st_prce_other_day where BUSINESS_DATE between V_START_DATE AND V_END_DATE+41
and upc not like '%A' and upc not like '%C');


DELETE IDSSC_HIST_READ_UOD.PERF_ACTUAL_LATEST
WHERE RANK_act<>1;


v_sql_cmd := 'truncate table idssc_hist_read_uod.PERF_ACTUAL_TOTAL'; execute immediate v_sql_cmd; 
INSERT INTO PERF_ACTUAL_TOTAL(
SELECT UPC,
		CATEGORY_CODE,
		STORE,
		FDATE,
		SUM(ACTUAL)
FROM idssc_hist_read_uod.PERF_ACTUAL_LATEST where upc in (select distinct upc from idssc_hist_read_uod.perf_reco_comparison)
GROUP BY UPC,CATEGORY_CODE,STORE,FDATE);

insert into idssc_hist_read_uod.PERF_qc_inter_tables
values('ACTUAL SALES','LATEST SELECTED',SYSTIMESTAMP);
COMMIT;



v_sql_cmd := 'truncate table idssc_hist_read_uod.PERF_UPC_STORE'; execute immediate v_sql_cmd; 
INSERT INTO idssc_hist_read_uod.PERF_UPC_STORE(
SELECT DISTINCT UPC, STORE FROM idssc_hist_read_uod.PERF_ACTUAL_TOTAL WHERE UPC IN 
(SELECT DISTINCT UPC FROM idssc_hist_read_uod.PERF_reco_comparison)
GROUP BY UPC,STORE);


v_sql_cmd := 'truncate table idssc_hist_read_uod.PERF_DEMAND_GRID'; execute immediate v_sql_cmd; 
INSERT INTO idssc_hist_read_uod.PERF_DEMAND_GRID(
SELECT c.UPC,c.STORE,c.fDATE,d.CATEGORY_id,NULL,null FROM (select * from idssc_hist_read_uod.PERF_UPC_STORE A CROSS JOIN idssc_hist_read_uod.PERF_DATE_RANGE B)c left join idssc_hist_read_uod.man_product_dimension d on c.upc=d.upc );

MERGE INTO idssc_hist_read_uod.PERF_DEMAND_GRID 
USING (SELECT * FROM idssc_hist_read_uod.PERF_CORRECTED_LATEST) PERF_CORRECTED_LATEST 
ON ( idssc_hist_read_uod.PERF_DEMAND_GRID.UPC = PERF_CORRECTED_LATEST.UPC
AND  idssc_hist_read_uod.PERF_DEMAND_GRID.STORE = PERF_CORRECTED_LATEST.STORE 
AND idssc_hist_read_uod.PERF_DEMAND_GRID.FDATE = PERF_CORRECTED_LATEST.FDATE)
WHEN MATCHED THEN UPDATE SET CORRECTED = PERF_CORRECTED_LATEST.CORRECTED;

update idssc_hist_read_uod.PERF_DEMAND_GRID
 SET CORRECTED=0 where corrected is null;

MERGE INTO idssc_hist_read_uod.PERF_DEMAND_GRID 
USING (SELECT * FROM idssc_hist_read_uod.PERF_ACTUAL_TOTAL) PERF_ACTUAL_TOTAL 
ON ( idssc_hist_read_uod.PERF_DEMAND_GRID.UPC = PERF_ACTUAL_TOTAL.UPC
AND  idssc_hist_read_uod.PERF_DEMAND_GRID.STORE = PERF_ACTUAL_TOTAL.STORE 
AND idssc_hist_read_uod.PERF_DEMAND_GRID.FDATE = PERF_ACTUAL_TOTAL.FDATE)
WHEN MATCHED THEN UPDATE SET ACTUAL = PERF_ACTUAL_TOTAL.ACTUAL;

UPDATE idssc_hist_read_uod.PERF_DEMAND_GRID 
SET ACTUAL =0 WHERE ACTUAL IS NULL;

UPDATE idssc_hist_read_uod.PERF_DEMAND_GRID 
SET CORRECTED =0 WHERE CORRECTED IS NULL;

UPDATE idssc_hist_read_uod.PERF_DEMAND_GRID 
SET CORRECTED =ACTUAL WHERE CORRECTED <ACTUAL;

insert into idssc_hist_read_uod.PERF_qc_inter_tables
values('GRID','COMPLETED',SYSTIMESTAMP);


COMMIT;
execute immediate 'truncate TABLE idssc_hist_read_uod.PERF_DAILY_DEMAND_raw';
 insert INTO idssc_hist_read_uod.PERF_DAILY_DEMAND_raw
   ( select /*+PARALLEL(4)*/ x.upc,x.store,x.DEPOT_CODE,x.CORRECTED,
									x.fdate,
                                    x.MODEL ,
                                    x.DAY_FULL ,
                                    x.DAY_PART ,
                                    x.MULT ,
                                    x.SP ,
                                    x.CP ,
                                    x.MARGIN ,
                                    0,
                                    0.99,
                                   -- D.value_number  ,
                                    x.ON_RANGE_DT ,
                                    x.xs_flag,
                                  	F.LIFE
									FROM ( select a.*,b.depot_code, e.MODEL ,
                                  e.DAY_FULL ,
                                    e.DAY_PART ,e.mult,
                                    g.sp,g.cp,g.margin,e.ON_RANGE_DT,i.xs_flag
                                     from idssc_hist_read_uod.PERF_DEMAND_GRID A
                                         LEFT JOIN IDSSC_HIST.HIST_STORE_REF B
                                                  ON A.store = SUBSTR(B.SITE_CODE, 2, 8)
										 LEFT JOIN idssc_hist_read_uod.PERF_TI_MODEL E
												  ON A.UPC = E.PRODUCT_ID
													 AND A.store = SUBSTR(E.LOCATION_ID, 2, 8)
										 LEFT JOIN idssc_hist_read_uod.PERF_COST_FINAL G
												  ON G.upc = A.UPC
										 LEFT JOIN idssc_hist_read_uod.PERF_store_excess I
												  ON A.store = i.site_code 
												     AND A.CATEGORY_CODE= I.CATEGORY_CODE) x
										 LEFT JOIN idssc_hist_read_uod.PERF_PRODUCTLIFE F
												  ON x.UPC = F.UPC
                          AND x.DEPOT_CODE = F.DEPOT
													 AND to_char(x.fdate+1,'D') = F.FDAY );

			COMMIT;

  
         
			delete idssc_hist_read_uod.PERF_daily_DEMAND 
			WHERE LIFE IS NULL;
         
			delete idssc_hist_read_uod.PERF_daily_DEMAND
			WHERE MODEL_CODE IS NULL;
      
      insert into idssc_hist_read_uod.PERF_qc_inter_tables
values('DAILY DEMAND_raw','COMPLETED',SYSTIMESTAMP);


COMMIT;


       execute immediate 'truncate TABLE idssc_hist_read_uod.PERF_daily_demand';   

    BEGIN
          idssc_hist_read_uod.perf_APPEND_TRANSFORM(v_start_date,v_end_date);
       END;


			 update idssc_hist_read_uod.PERF_DAILY_DEMAND
          SET FLAG4 = (CASE 
                                          WHEN FLAG3 IS NULL THEN FLAG2
                 ELSE FLAG3
                       END);
                                                                
       update idssc_hist_read_uod.PERF_DAILY_DEMAND
          SET FLAG2 = FLAG4;


      insert into idssc_hist_read_uod.PERF_qc_inter_tables
values('DAILY DEMAND UPDATE','COMPLETED',SYSTIMESTAMP);


COMMIT;


                v_sql_cmd := 'truncate table idssc_hist_read_uod.PERF_nde'; execute immediate v_sql_cmd;               
   insert into idssc_hist_read_uod.PERF_nde
   (select product_id,
   location_id,
   uplift_dt,
   total_uplift
   from idssc_hist_read_uod.PERF_nde_1 where product_id in (select distinct upc from idssc_hist_read_uod.PERF_daily_demand));
                                                              
      insert into idssc_hist_read_uod.PERF_qc_inter_tables
values('NDE','COMPLETED',SYSTIMESTAMP);


COMMIT;
         

                                              
       execute immediate 'truncate TABLE idssc_hist_read_uod.PERF_daily_store_orders';                     
       
       
                      insert into idssc_hist_read_uod.PERF_qc_inter_tables
values('ORDER PLAN STARTING','COMPLETED',SYSTIMESTAMP);


COMMIT;
       
           
       BEGIN
       idssc_hist_read_uod.PERF_ORDER_PLAN_GENE_DAY1 (V_START_DATE);
       END;
      
		COMMIT;           
				   
       BEGIN
       idssc_hist_read_uod.PERF_ORDER_PLAN_GENE_ALL (V_START_DATE,V_END_DATE);
       END;
          
      COMMIT;
      
           v_sql_cmd := 'select max(A.B) from (select distinct fdate,count(*) B from idssc_hist_read_uod.PERF_daily_store_orders group by fdate)a'; 
                   execute immediate v_sql_cmd INTO V_C1;
       v_sql_cmd := 'select min(A.B) from (select distinct fdate,count(*) B from idssc_hist_read_uod.PERF_daily_store_orders group by fdate)a'; 
                   execute immediate v_sql_cmd INTO V_C2;
       
       v_sql_cmd := 'insert INTO idssc_hist_read_uod.PERF_qc_INTER_TABLES
       VALUES(''DAILY STORE ORDERS'',(case when (:a<>:b) then ''DUPLICATE RECORDS'' else ''CORRECT RECORDS'' end),SYSTIMESTAMP)'; 
       execute immediate v_sql_cmd using v_c1, v_c2;
       COMMIT;
       
      
      
        INSERT INTO idssc_hist_read_uod.PERF_qc_INTER_TABLES
                VALUES('ORDER PLAN','ORDER PLAN COMPLETED',SYSTIMESTAMP);
                COMMIT; 
      
      
  COMMIT;
  END;
  
  
  
  
  create or replace
PROCEDURE idssc_hist_read_uod.perf_PROC_KPI_CAL
(
   V_END_DATE IN DATE,
   V_START_DATE IN DATE
)
AS
V_SQL_CMD VARCHAR2(10000);
 
BEGIN

--TABLE FOR KPIS AT 3 LEVEL-ALL,ONLY MAYLAND,ALL EXCEPT MAYLAND--  
   
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_3_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_3_DEPOT
  ( SELECT UPC ,
           UPT ,
           DEPOT ,
           SUM(DEMAND) DEMAND  ,
           SUM(ON_HAND) ON_HAND  ,
           SUM(ORDERS) ORDERS  ,
           SUM(CASE ORDERS
                          WHEN 0 THEN 0
               ELSE WASTE
                  END) WASTE  ,
           SUM(SOLD_UNITS) SOLD_UNITS  
    FROM idssc_hist_read_uod.perf_DAILY_STORE_ORDERS 
     WHERE FDATE BETWEEN V_START_DATE AND V_END_DATE
    GROUP BY UPC,UPT,DEPOT );

       
       

       V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_3'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_3
  ( SELECT UPC ,
           UPT ,
           SUM(DEMAND) DEMAND  ,
           SUM(ON_HAND) ON_HAND  ,
           SUM(ORDERS) ORDERS  ,
           SUM(WASTE) WASTE  ,
           SUM(SOLD_UNITS) SOLD_UNITS  
    FROM idssc_hist_read_uod.perf_TEMP_TABLE_3_DEPOT 
      GROUP BY UPC,UPT );


V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_4'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_4
  ( SELECT A.UPC ,
           A.UPT ,
           B.IS_SRP ,
           B.TRAY_TYPE ,
           B.CURRENT_TRAY_TYPE ,
           B.CURRENT_UPT ,
           B.SP ,
           B.PRODUCT_COST ,
           A.DEMAND ,
           A.ORDERS ,
           A.WASTE ,
           A.SOLD_UNITS ,
           (A.DEMAND - A.SOLD_UNITS) LOST_SALES  ,
           A.SOLD_UNITS * B.primary_trans / A.UPT PRIMARY_TRANSPORT  ,
           A.SOLD_UNITS * B.TRAY_HIRE / A.UPT TRAY_HIRE_COST  ,
           A.SOLD_UNITS * B.DEPOT_RHD / A.UPT DEPOT_RHD_COST  ,
           A.SOLD_UNITS * B.TRAY_LENDING / A.UPT TRAY_LENDING_COST  ,
           A.SOLD_UNITS * B.STORE_HANDLING / A.UPT STORE_HANDLING_COST  ,
           A.SOLD_UNITS * B.EX_WORKS EX_WORKS_COST  ,
           A.SOLD_UNITS * B.SP SALES_REVENUE  ,
           A.SOLD_UNITS * B.PRODUCT_COST COST_OF_SOLD  ,
           A.WASTE * B.PRODUCT_COST * 0.6 WASTE_RECOVERY  ,
           A.WASTE / A.UPT * (B.primary_trans + B.TRAY_HIRE + B.DEPOT_RHD - B.TRAY_LENDING + B.STORE_HANDLING + (B.EX_WORKS * A.UPT)) COST_OF_WASTE  
    FROM idssc_hist_read_uod.perf_TEMP_TABLE_3 A
           LEFT JOIN idssc_hist_read_uod.perf_PROD_DESCR_LATEST B
            ON A.UPC = B.UPC
           AND A.UPT = B.UPT );

     delete perf_TEMP_TABLE_4
	 where upt=current_upt;


--===============================

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_4_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_4_DEPOT
  ( SELECT A.UPC ,
           A.UPT ,
           A.DEPOT ,
           B.IS_SRP ,
           B.TRAY_TYPE ,
           B.CURRENT_TRAY_TYPE ,
           b.current_upt,
           B.SP ,
           B.PRODUCT_COST ,
           A.DEMAND ,
           A.ORDERS ,
           A.WASTE ,
           A.SOLD_UNITS ,
           (A.DEMAND - A.SOLD_UNITS) LOST_SALES  ,
           A.SOLD_UNITS * B.primary_trans / A.UPT PRIMARY_TRANSPORT  ,
           A.SOLD_UNITS * B.TRAY_HIRE / A.UPT TRAY_HIRE_COST  ,
           A.SOLD_UNITS * B.DEPOT_RHD / A.UPT DEPOT_RHD_COST  ,
           A.SOLD_UNITS * B.TRAY_LENDING / A.UPT TRAY_LENDING_COST  ,
           A.SOLD_UNITS * B.STORE_HANDLING / A.UPT STORE_HANDLING_COST  ,
           A.SOLD_UNITS * B.EX_WORKS EX_WORKS_COST  ,
           A.SOLD_UNITS * B.SP SALES_REVENUE  ,
           A.SOLD_UNITS * B.PRODUCT_COST COST_OF_SOLD  ,
           A.WASTE * B.PRODUCT_COST * 0.6 WASTE_RECOVERY  ,
          A.WASTE / A.UPT * (B.primary_trans + B.TRAY_HIRE + B.DEPOT_RHD - B.TRAY_LENDING + B.STORE_HANDLING + (B.EX_WORKS * A.UPT)) COST_OF_WASTE  
    FROM idssc_hist_read_uod.perf_TEMP_TABLE_3_DEPOT A
        LEFT JOIN idssc_hist_read_uod.perf_PROD_DESCR_LATEST B
            ON A.UPC = B.UPC
           AND A.UPT = B.UPT );

                 
                 

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_5_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_5_DEPOT
SELECT UPC, 
          UPT,
                DEPOT,
          IS_SRP,
          TRAY_TYPE,
          CURRENT_TRAY_TYPE, 
                (CASE TRAY_TYPE
                           WHEN 'BROWN_TRAY' THEN 8
                          WHEN 'HALF_TRAY_2' THEN 7
                          WHEN 'HALF_TRAY_5' THEN 6
                          WHEN 'HALF_TRAY_7' THEN 5
                          WHEN 'METRIC_TRAY_2' THEN 4
                          WHEN 'METRIC_TRAY_5' THEN 3
                          WHEN ( CASE CURRENT_TRAY_TYPE
                                    WHEN 'METRIC_TRAY_7' THEN 'CARDBOARD'
                                    ELSE 'METRIC_TRAY_7'
                            END ) THEN 2
           ELSE 1
           END),
          CURRENT_UPT,
          SP,
          PRODUCT_COST,
          DEMAND,
         ORDERS,
          WASTE,
          SOLD_UNITS,
          LOST_SALES,
          PRIMARY_TRANSPORT,
          TRAY_HIRE_COST,
          DEPOT_RHD_COST,
          TRAY_LENDING_COST,
          STORE_HANDLING_COST,
          EX_WORKS_COST,
          SALES_REVENUE,
          COST_OF_SOLD,
          WASTE_RECOVERY,
          COST_OF_WASTE,

                 (PRIMARY_TRANSPORT + TRAY_HIRE_COST + DEPOT_RHD_COST  + STORE_HANDLING_COST + EX_WORKS_COST + COST_OF_WASTE) AS E2E_COST,
          (SALES_REVENUE+ TRAY_LENDING_COST ) AS E2E_REVENUE,
          (SALES_REVENUE + (TRAY_LENDING_COST-TRAY_HIRE_COST) - PRIMARY_TRANSPORT - DEPOT_RHD_COST  - STORE_HANDLING_COST - EX_WORKS_COST -  COST_OF_WASTE) AS E2E_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) AS GROSS_SELLING_MARGIN,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY AS GROSS_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY- DEPOT_RHD_COST - STORE_HANDLING_COST AS NET_PROFIT
FROM idssc_hist_read_uod.perf_TEMP_TABLE_4_DEPOT;




delete FROM idssc_hist_read_uod.perf_TEMP_TABLE_5_DEPOT
WHERE E2E_PROFIT IS NULL;

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_6_DEPOT'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_6_DEPOT
  SELECT UPC ,
         UPT ,
         DEPOT ,
         IS_SRP ,
         TRAY_TYPE ,
         CURRENT_TRAY_TYPE2 ,
         TRAY_PRIOIRTY ,
         CURRENT_UPT ,
         SP ,
         PRODUCT_COST ,
         DEMAND ,
         ORDERS ,
         WASTE ,
         SOLD_UNITS ,
         LOST_SALES ,
         PRIMARY_TRANSPORT ,
         TRAY_HIRE_COST ,
         DEPOT_RHD_COST ,
         TRAY_LENDING_COST ,
         STORE_HANDLING_COST ,
         EX_WORKS_COST ,
         SALES_REVENUE ,
         COST_OF_SOLD ,
         WASTE_RECOVERY ,
         COST_OF_WASTE ,
         E2E_COST ,
         E2E_REVENUE ,
         E2E_PROFIT ,
         GROSS_SELLING_MARGIN ,
         GROSS_PROFIT ,
         NET_PROFIT ,
         RANK() OVER ( PARTITION BY UPC,depot ORDER BY E2E_PROFIT DESC, TRAY_PRIOIRTY DESC  ) PROFIT_RANK  
    FROM idssc_hist_read_uod.perf_TEMP_TABLE_5_DEPOT ;
       

V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_temp_table_7_curr_dpt'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_temp_table_7_curr_dpt
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           DEPOT ,
           UPT CURRENT_UPT  ,
           TRAY_TYPE CURRENT_TRAY_TYPE  ,
           ORDERS CURRENT_ORDERS  ,
           WASTE CURRENT_WASTE  ,
           SOLD_UNITS CURRENT_SOLD_UNITS  ,
           LOST_SALES CURRENT_LOST_SALES  ,
           PRIMARY_TRANSPORT CURRENT_PRIMARY_TRANSPORT  ,
           TRAY_HIRE_COST CURRENT_TRAY_HIRE_COST  ,
           DEPOT_RHD_COST CURRENT_DEPOT_RHD_COST  ,
           TRAY_LENDING_COST CURRENT_TRAY_LENDING_COST  ,
           STORE_HANDLING_COST CURRENT_STORE_HANDLING_COST  ,
           EX_WORKS_COST CURRENT_EX_WORKS_COST  ,
           SALES_REVENUE CURRENT_SALES_REVENUE  ,
           COST_OF_SOLD CURRENT_COST_OF_SOLD  ,
           WASTE_RECOVERY CURRENT_WASTE_RECOVERY  ,
           COST_OF_WASTE CURRENT_COST_OF_WASTE  ,
           E2E_COST CURRENT_E2E_COST  ,
           E2E_REVENUE CURRENT_E2E_REVENUE  ,
           E2E_PROFIT CURRENT_E2E_PROFIT  ,
           GROSS_SELLING_MARGIN CURRENT_GROSS_SELLING_MARGIN  ,
           GROSS_PROFIT CURRENT_GROSS_PROFIT  ,
           NET_PROFIT CURRENT_NET_PROFIT  ,
           PROFIT_RANK CURRENT_PROFIT_RANK  
    FROM idssc_hist_read_uod.perf_TEMP_TABLE_6_DEPOT 
     WHERE CURRENT_TRAY_TYPE2 = TRAY_TYPE
             AND CURRENT_UPT = UPT );
                     
                      
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_7_CURRENT'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_7_CURRENT
  ( SELECT A.UPC ,
           MAX(SP) ,
           AVG(PRODUCT_COST) ,
           SUM(DEMAND) ,
           B.IS_SRP ,
           B.CURRENT_UPT ,
           B.CURRENT_TRAY_TYPE ,
           SUM(CURRENT_ORDERS) ,
           SUM(CURRENT_WASTE) ,
           SUM(CURRENT_SOLD_UNITS) ,
           SUM(CURRENT_LOST_SALES) ,
           SUM(CURRENT_PRIMARY_TRANSPORT) ,
           SUM(CURRENT_TRAY_HIRE_COST) ,
           SUM(CURRENT_DEPOT_RHD_COST) ,
           SUM(CURRENT_TRAY_LENDING_COST) ,
           SUM(CURRENT_STORE_HANDLING_COST) ,
           SUM(CURRENT_EX_WORKS_COST) ,
           SUM(CURRENT_SALES_REVENUE) ,
           SUM(CURRENT_COST_OF_SOLD) ,
           SUM(CURRENT_WASTE_RECOVERY) ,
           SUM(CURRENT_COST_OF_WASTE) ,
           SUM(CURRENT_E2E_COST) ,
           SUM(CURRENT_E2E_REVENUE) ,
           SUM(CURRENT_E2E_PROFIT) ,
           SUM(CURRENT_GROSS_SELLING_MARGIN) ,
           SUM(CURRENT_GROSS_PROFIT) ,
           SUM(CURRENT_NET_PROFIT) ,
           99 
    FROM idssc_hist_read_uod.perf_temp_table_7_curr_dpt A
           LEFT JOIN ( SELECT DISTINCT UPC ,
                                       CURRENT_UPT ,
                                       CURRENT_TRAY_TYPE ,
                                       IS_SRP 
                       FROM idssc_hist_read_uod.perf_PROD_DESCR_LATEST  ) B
            ON A.UPC = B.UPC
      GROUP BY A.UPC,B.CURRENT_UPT,B.CURRENT_TRAY_TYPE,B.IS_SRP );



         
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_5'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_5
SELECT UPC, 
          UPT,
          IS_SRP,
          TRAY_TYPE,
                CURRENT_TRAY_TYPE,
                CASE TRAY_TYPE
                           WHEN 'BROWN_TRAY' THEN 8
                WHEN 'HALF_TRAY_2' THEN 7
          WHEN 'HALF_TRAY_5' THEN 6
          WHEN 'HALF_TRAY_7' THEN 5
          WHEN 'METRIC_TRAY_2' THEN 4
          WHEN 'METRIC_TRAY_5' THEN 3
          WHEN (CASE  CURRENT_TRAY_TYPE   WHEN 'METRIC_TRAY_7' THEN 'CARDBOARD'
                         ELSE 'METRIC_TRAY_7'
                            END ) THEN 2
           ELSE 1
          
                END,
                     
          CURRENT_UPT,
          SP,
          PRODUCT_COST,
          DEMAND,
          ORDERS,
          WASTE,
         SOLD_UNITS,
          LOST_SALES,
          PRIMARY_TRANSPORT,
          TRAY_HIRE_COST,
          DEPOT_RHD_COST,
          TRAY_LENDING_COST,
          STORE_HANDLING_COST,
          EX_WORKS_COST,
          SALES_REVENUE,
          COST_OF_SOLD,
          WASTE_RECOVERY,
          COST_OF_WASTE ,
          (PRIMARY_TRANSPORT + TRAY_HIRE_COST + DEPOT_RHD_COST  + STORE_HANDLING_COST + EX_WORKS_COST + COST_OF_WASTE) AS E2E_COST,
          (SALES_REVENUE+ TRAY_LENDING_COST ) AS E2E_REVENUE,
          (SALES_REVENUE + (TRAY_LENDING_COST-TRAY_HIRE_COST) - PRIMARY_TRANSPORT - DEPOT_RHD_COST  - STORE_HANDLING_COST - EX_WORKS_COST -  COST_OF_WASTE) AS E2E_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) AS GROSS_SELLING_MARGIN,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY AS GROSS_PROFIT,
          (SALES_REVENUE-COST_OF_SOLD) + WASTE_RECOVERY- DEPOT_RHD_COST - STORE_HANDLING_COST AS NET_PROFIT
FROM idssc_hist_read_uod.perf_TEMP_TABLE_4;


delete FROM idssc_hist_read_uod.perf_TEMP_TABLE_5
WHERE E2E_PROFIT IS NULL;



V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_6'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_6
  SELECT UPC ,
         UPT ,
         IS_SRP ,
         TRAY_TYPE ,
         CURRENT_TRAY_TYPE2 ,
         TRAY_PRIOIRTY ,
         CURRENT_UPT ,
         SP ,
         PRODUCT_COST ,
         DEMAND ,
         ORDERS ,
         WASTE ,
         SOLD_UNITS ,
         LOST_SALES ,
         PRIMARY_TRANSPORT ,
         TRAY_HIRE_COST ,
         DEPOT_RHD_COST ,
         TRAY_LENDING_COST ,
         STORE_HANDLING_COST ,
         EX_WORKS_COST ,
         SALES_REVENUE ,
         COST_OF_SOLD ,
         WASTE_RECOVERY ,
         COST_OF_WASTE ,
         E2E_COST ,
         E2E_REVENUE ,
         E2E_PROFIT ,
         GROSS_SELLING_MARGIN ,
         GROSS_PROFIT ,
         NET_PROFIT ,
         RANK() OVER ( PARTITION BY UPC ORDER BY E2E_PROFIT DESC, TRAY_PRIOIRTY DESC  ) PROFIT_RANK  
    FROM idssc_hist_read_uod.perf_TEMP_TABLE_5;



V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_7_OPTIMAL'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_7_OPTIMAL
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           UPT OPTIMAL_UPT  ,
           TRAY_TYPE OPTIMAL_TRAY_TYPE  ,
           ORDERS OPTIMAL_ORDERS  ,
           WASTE OPTIMAL_WASTE  ,
           SOLD_UNITS OPTIMAL_SOLD_UNITS  ,
           LOST_SALES OPTIMAL_LOST_SALES  ,
           PRIMARY_TRANSPORT OPTIMAL_PRIMARY_TRANSPORT  ,
           TRAY_HIRE_COST OPTIMAL_TRAY_HIRE_COST  ,
           DEPOT_RHD_COST OPTIMAL_DEPOT_RHD_COST  ,
           TRAY_LENDING_COST OPTIMAL_TRAY_LENDING_COST  ,
           STORE_HANDLING_COST OPTIMAL_STORE_HANDLING_COST  ,
           EX_WORKS_COST OPTIMAL_EX_WORKS_COST  ,
           SALES_REVENUE OPTIMAL_SALES_REVENUE  ,
           COST_OF_SOLD OPTIMAL_COST_OF_SOLD  ,
           WASTE_RECOVERY OPTIMAL_WASTE_RECOVERY  ,
           COST_OF_WASTE OPTIMAL_COST_OF_WASTE  ,
           E2E_COST OPTIMAL_E2E_COST  ,
           E2E_REVENUE OPTIMAL_E2E_REVENUE  ,
           E2E_PROFIT OPTIMAL_E2E_PROFIT  ,
           GROSS_SELLING_MARGIN OPTIMAL_GROSS_SELLING_MARGIN  ,
           GROSS_PROFIT OPTIMAL_GROSS_PROFIT  ,
           NET_PROFIT OPTIMAL_NET_PROFIT  ,
           PROFIT_RANK OPTIMAL_PROFIT_RANK  
    FROM idssc_hist_read_uod.perf_TEMP_TABLE_6 
     WHERE PROFIT_RANK = 1 );

       
        
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_8'; EXECUTE IMMEDIATE V_SQL_CMD;
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_8
  ( SELECT A.UPC ,
           A.SP ,
           A.PRODUCT_COST ,
           A.DEMAND ,
           A.IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
          CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
           OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK 
    FROM idssc_hist_read_uod.perf_TEMP_TABLE_7_OPTIMAL A
           LEFT JOIN idssc_hist_read_uod.perf_TEMP_TABLE_7_CURRENT B
            ON A.UPC = B.UPC );


UPDATE idssc_hist_read_uod.perf_TEMP_TABLE_8
SET OPTIMAL_WASTE_RECOVERY = CASE WHEN OPTIMAL_WASTE>CURRENT_WASTE THEN (2*OPTIMAL_WASTE_RECOVERY)/3 ELSE OPTIMAL_WASTE_RECOVERY END ;
                     
  
V_SQL_CMD := 'TRUNCATE TABLE idssc_hist_read_uod.perf_TEMP_TABLE_final'; EXECUTE IMMEDIATE V_SQL_CMD;  
      
INSERT INTO idssc_hist_read_uod.perf_TEMP_TABLE_final
  ( SELECT UPC ,
           SP ,
           PRODUCT_COST ,
           DEMAND ,
           IS_SRP ,
           CURRENT_UPT ,
           CURRENT_TRAY_TYPE ,
           CURRENT_ORDERS ,
           CURRENT_WASTE ,
           CURRENT_SOLD_UNITS ,
           CURRENT_LOST_SALES ,
           CURRENT_PRIMARY_TRANSPORT ,
           CURRENT_TRAY_HIRE_COST ,
           CURRENT_DEPOT_RHD_COST ,
           CURRENT_TRAY_LENDING_COST ,
           CURRENT_STORE_HANDLING_COST ,
           CURRENT_EX_WORKS_COST ,
           CURRENT_SALES_REVENUE ,
           CURRENT_COST_OF_SOLD ,
           CURRENT_WASTE_RECOVERY ,
           CURRENT_COST_OF_WASTE ,
           CURRENT_E2E_COST ,
           CURRENT_E2E_REVENUE ,
           CURRENT_E2E_PROFIT ,
           CURRENT_GROSS_SELLING_MARGIN ,
           CURRENT_GROSS_PROFIT ,
           CURRENT_NET_PROFIT ,
           CURRENT_PROFIT_RANK ,
           case when demand=0 then 0 else current_WASTE / DEMAND end ,
            case when demand=0 then 0 else current_SOLD_UNITS / DEMAND end ,
           OPTIMAL_UPT ,
           OPTIMAL_TRAY_TYPE ,
           OPTIMAL_ORDERS ,
           OPTIMAL_WASTE ,
           OPTIMAL_SOLD_UNITS ,
           OPTIMAL_LOST_SALES ,
           OPTIMAL_PRIMARY_TRANSPORT ,
           OPTIMAL_TRAY_HIRE_COST ,
           OPTIMAL_DEPOT_RHD_COST ,
           OPTIMAL_TRAY_LENDING_COST ,
           OPTIMAL_STORE_HANDLING_COST ,
           OPTIMAL_EX_WORKS_COST ,
         OPTIMAL_SALES_REVENUE ,
           OPTIMAL_COST_OF_SOLD ,
           OPTIMAL_WASTE_RECOVERY ,
           OPTIMAL_COST_OF_WASTE ,
           OPTIMAL_E2E_COST ,
           OPTIMAL_E2E_REVENUE ,
           OPTIMAL_E2E_PROFIT ,
           OPTIMAL_GROSS_SELLING_MARGIN ,
           OPTIMAL_GROSS_PROFIT ,
           OPTIMAL_NET_PROFIT ,
           OPTIMAL_PROFIT_RANK ,
            case when demand=0 then 0 else OPTIMAL_WASTE / DEMAND end,
            case when demand=0 then 0 else OPTIMAL_SOLD_UNITS / DEMAND end
    FROM idssc_hist_read_uod.perf_TEMP_TABLE_8  );
	 
   
   delete idssc_hist_read_uod.tracking_new 
	where TRACKING_METHOD like 'P%';
  	INSERT INTO idssc_hist_read_uod.tracking_new 
	select concat(A.UPC,concat(' - ',B.Name))		,
A.SP	,
A.PRODUCT_COST	,
A.DEMAND	,
A.IS_SRP	,
A.CURRENT_UPT	,
A.CURRENT_TRAY_TYPE	,
A.CURRENT_ORDERS	,
A.CURRENT_WASTE	,
A.CURRENT_SOLD_UNITS	,
A.CURRENT_LOST_SALES	,
A.CURRENT_PRIMARY_TRANSPORT	,
A.CURRENT_TRAY_HIRE_COST	,
A.CURRENT_DEPOT_RHD_COST	,
A.CURRENT_TRAY_LENDING_COST	,
A.CURRENT_STORE_HANDLING_COST	,
A.CURRENT_EX_WORKS_COST	,
A.CURRENT_SALES_REVENUE	,
A.CURRENT_COST_OF_SOLD	,
A.CURRENT_WASTE_RECOVERY	,
A.CURRENT_COST_OF_WASTE	,
A.CURRENT_E2E_COST	,
A.CURRENT_E2E_REVENUE	,
A.CURRENT_E2E_PROFIT	,
A.CURRENT_GROSS_SELLING_MARGIN	,
A.CURRENT_GROSS_PROFIT	,
A.CURRENT_NET_PROFIT	,
A.CURRENT_PROFIT_RANK	,
A.CURRENT_WASTE_PER	,
A.CURRENT_SERVICE_LEVEL	,
A.OPTIMAL_UPT	,
A.OPTIMAL_TRAY_TYPE	,
A.OPTIMAL_ORDERS	,
A.OPTIMAL_WASTE	,
A.OPTIMAL_SOLD_UNITS	,
A.OPTIMAL_LOST_SALES	,
A.OPTIMAL_PRIMARY_TRANSPORT	,
A.OPTIMAL_TRAY_HIRE_COST	,
A.OPTIMAL_DEPOT_RHD_COST	,
A.OPTIMAL_TRAY_LENDING_COST	,
A.OPTIMAL_STORE_HANDLING_COST	,
A.OPTIMAL_EX_WORKS_COST	,
A.OPTIMAL_SALES_REVENUE	,
A.OPTIMAL_COST_OF_SOLD	,
A.OPTIMAL_WASTE_RECOVERY	,
A.OPTIMAL_COST_OF_WASTE	,
A.OPTIMAL_E2E_COST	,
A.OPTIMAL_E2E_REVENUE	,
A.OPTIMAL_E2E_PROFIT	,
A.OPTIMAL_GROSS_SELLING_MARGIN	,
A.OPTIMAL_GROSS_PROFIT	,
A.OPTIMAL_NET_PROFIT	,
A.OPTIMAL_PROFIT_RANK	,
A.OPTIMAL_WASTE_PER	,
A.OPTIMAL_SERVICE_LEVEL	,
'PERFORMANCE'	,
to_char(V_START_DATE, 'Month'),
B.CATEGORY	
from idssc_hist_read_uod.perf_TEMP_TABLE_final A
LEFT JOIN IDSSC_HIST.MAN_PRODUCT_DIMENSION B 
ON A.UPC=B.UPC;

 
 	update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Metric Tray 7"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_7';
			update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Metric Tray 5"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_5';
		   update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Metric Tray 2"' WHERE CURRENT_TRAY_TYPE='METRIC_TRAY_2';
		   update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Half Tray Full Height' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_7';
		   update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Half Tray Nested' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_5';
		   update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Half Tray Nested' WHERE CURRENT_TRAY_TYPE='HALF_TRAY_5';
      update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Brown Tray' WHERE CURRENT_TRAY_TYPE='BROWN_TRAY';
		   update idssc_hist_read_uod.tracking_new
          SET current_tray_type='Cardboard' WHERE CURRENT_TRAY_TYPE='CARDBOARD';



		  update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Metric Tray 7"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_7';
			update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Metric Tray 5"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_5';
		   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Metric Tray 5"' WHERE OPTIMAL_TRAY_TYPE='METRIC_TRAY_2';
		   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Half Tray Full Height' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_7';
		   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Half Tray Nested' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_5';
		   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_TRAY_TYPE='Half Tray Nested' WHERE OPTIMAL_TRAY_TYPE='HALF_TRAY_5';
   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_tray_type='Brown Tray' WHERE OPTIMAL_tray_type='BROWN_TRAY';
		   update idssc_hist_read_uod.tracking_new
          SET OPTIMAL_tray_type='Cardboard' WHERE OPTIMAL_tray_type='CARDBOARD';
   
   
   COMMIT;
   
   INSERT INTO idssc_hist_read_uod.PERF_qc_INTER_TABLES
                VALUES('TRACKING OUTPUT','TRACKING E2E EXECUTION COMPLETED',SYSTIMESTAMP);
                COMMIT;
    
             
end;




create or replace
PROCEDURE idssc_hist_read_uod.UOD_ben_tracking
(
   V_START_DATE IN DATE,
   V_END_DATE IN DATE,
   v_top in int
)
AS 
begin
idssc_hist_read_uod.ben_PROC_transformations(V_END_DATE,V_START_DATE,V_TOP);
IDSSC_HIST_READ_UOD.ben_PROC_ORDER_PLAN(V_END_DATE,V_START_DATE);
IDSSC_HIST_READ_UOD.ben_PROC_KPI_CAL(V_END_DATE,V_START_DATE);
END;




create or replace
PROCEDURE idssc_hist_read_uod.UOD_Perf_tracking
(
   V_START_DATE IN DATE,
   V_END_DATE IN DATE,
   v_top in int
)
AS 
begin
idssc_hist_read_uod.PERF_PROC_transformations(V_END_DATE,V_START_DATE,V_TOP);
IDSSC_HIST_READ_UOD.PERF_PROC_ORDER_PLAN(V_END_DATE,V_START_DATE);
IDSSC_HIST_READ_UOD.perf_PROC_KPI_CAL(V_END_DATE,V_START_DATE);
END;
